                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.4.0 #14620 (MINGW32)
                                      4 ;--------------------------------------------------------
                                      5 	.module enc
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _printf
                                     12 	.globl _SPI_ReadByte
                                     13 	.globl _SPI_WriteByte
                                     14 	.globl _P5_7
                                     15 	.globl _P5_6
                                     16 	.globl _P5_5
                                     17 	.globl _P5_4
                                     18 	.globl _P5_3
                                     19 	.globl _P5_2
                                     20 	.globl _P5_1
                                     21 	.globl _P5_0
                                     22 	.globl _P4_7
                                     23 	.globl _P4_6
                                     24 	.globl _P4_5
                                     25 	.globl _P4_4
                                     26 	.globl _P4_3
                                     27 	.globl _P4_2
                                     28 	.globl _P4_1
                                     29 	.globl _P4_0
                                     30 	.globl _PX0L
                                     31 	.globl _PT0L
                                     32 	.globl _PX1L
                                     33 	.globl _PT1L
                                     34 	.globl _PSL
                                     35 	.globl _PT2L
                                     36 	.globl _PPCL
                                     37 	.globl _EC
                                     38 	.globl _CCF0
                                     39 	.globl _CCF1
                                     40 	.globl _CCF2
                                     41 	.globl _CCF3
                                     42 	.globl _CCF4
                                     43 	.globl _CR
                                     44 	.globl _CF
                                     45 	.globl _TF2
                                     46 	.globl _EXF2
                                     47 	.globl _RCLK
                                     48 	.globl _TCLK
                                     49 	.globl _EXEN2
                                     50 	.globl _TR2
                                     51 	.globl _C_T2
                                     52 	.globl _CP_RL2
                                     53 	.globl _T2CON_7
                                     54 	.globl _T2CON_6
                                     55 	.globl _T2CON_5
                                     56 	.globl _T2CON_4
                                     57 	.globl _T2CON_3
                                     58 	.globl _T2CON_2
                                     59 	.globl _T2CON_1
                                     60 	.globl _T2CON_0
                                     61 	.globl _PT2
                                     62 	.globl _ET2
                                     63 	.globl _CY
                                     64 	.globl _AC
                                     65 	.globl _F0
                                     66 	.globl _RS1
                                     67 	.globl _RS0
                                     68 	.globl _OV
                                     69 	.globl _F1
                                     70 	.globl _P
                                     71 	.globl _PS
                                     72 	.globl _PT1
                                     73 	.globl _PX1
                                     74 	.globl _PT0
                                     75 	.globl _PX0
                                     76 	.globl _RD
                                     77 	.globl _WR
                                     78 	.globl _T1
                                     79 	.globl _T0
                                     80 	.globl _INT1
                                     81 	.globl _INT0
                                     82 	.globl _TXD
                                     83 	.globl _RXD
                                     84 	.globl _P3_7
                                     85 	.globl _P3_6
                                     86 	.globl _P3_5
                                     87 	.globl _P3_4
                                     88 	.globl _P3_3
                                     89 	.globl _P3_2
                                     90 	.globl _P3_1
                                     91 	.globl _P3_0
                                     92 	.globl _EA
                                     93 	.globl _ES
                                     94 	.globl _ET1
                                     95 	.globl _EX1
                                     96 	.globl _ET0
                                     97 	.globl _EX0
                                     98 	.globl _P2_7
                                     99 	.globl _P2_6
                                    100 	.globl _P2_5
                                    101 	.globl _P2_4
                                    102 	.globl _P2_3
                                    103 	.globl _P2_2
                                    104 	.globl _P2_1
                                    105 	.globl _P2_0
                                    106 	.globl _SM0
                                    107 	.globl _SM1
                                    108 	.globl _SM2
                                    109 	.globl _REN
                                    110 	.globl _TB8
                                    111 	.globl _RB8
                                    112 	.globl _TI
                                    113 	.globl _RI
                                    114 	.globl _P1_7
                                    115 	.globl _P1_6
                                    116 	.globl _P1_5
                                    117 	.globl _P1_4
                                    118 	.globl _P1_3
                                    119 	.globl _P1_2
                                    120 	.globl _P1_1
                                    121 	.globl _P1_0
                                    122 	.globl _TF1
                                    123 	.globl _TR1
                                    124 	.globl _TF0
                                    125 	.globl _TR0
                                    126 	.globl _IE1
                                    127 	.globl _IT1
                                    128 	.globl _IE0
                                    129 	.globl _IT0
                                    130 	.globl _P0_7
                                    131 	.globl _P0_6
                                    132 	.globl _P0_5
                                    133 	.globl _P0_4
                                    134 	.globl _P0_3
                                    135 	.globl _P0_2
                                    136 	.globl _P0_1
                                    137 	.globl _P0_0
                                    138 	.globl _EECON
                                    139 	.globl _KBF
                                    140 	.globl _KBE
                                    141 	.globl _KBLS
                                    142 	.globl _BRL
                                    143 	.globl _BDRCON
                                    144 	.globl _T2MOD
                                    145 	.globl _SPDAT
                                    146 	.globl _SPSTA
                                    147 	.globl _SPCON
                                    148 	.globl _SADEN
                                    149 	.globl _SADDR
                                    150 	.globl _WDTPRG
                                    151 	.globl _WDTRST
                                    152 	.globl _P5
                                    153 	.globl _P4
                                    154 	.globl _IPH1
                                    155 	.globl _IPL1
                                    156 	.globl _IPH0
                                    157 	.globl _IPL0
                                    158 	.globl _IEN1
                                    159 	.globl _IEN0
                                    160 	.globl _CMOD
                                    161 	.globl _CL
                                    162 	.globl _CH
                                    163 	.globl _CCON
                                    164 	.globl _CCAPM4
                                    165 	.globl _CCAPM3
                                    166 	.globl _CCAPM2
                                    167 	.globl _CCAPM1
                                    168 	.globl _CCAPM0
                                    169 	.globl _CCAP4L
                                    170 	.globl _CCAP3L
                                    171 	.globl _CCAP2L
                                    172 	.globl _CCAP1L
                                    173 	.globl _CCAP0L
                                    174 	.globl _CCAP4H
                                    175 	.globl _CCAP3H
                                    176 	.globl _CCAP2H
                                    177 	.globl _CCAP1H
                                    178 	.globl _CCAP0H
                                    179 	.globl _CKCON1
                                    180 	.globl _CKCON0
                                    181 	.globl _CKRL
                                    182 	.globl _AUXR1
                                    183 	.globl _AUXR
                                    184 	.globl _TH2
                                    185 	.globl _TL2
                                    186 	.globl _RCAP2H
                                    187 	.globl _RCAP2L
                                    188 	.globl _T2CON
                                    189 	.globl _B
                                    190 	.globl _ACC
                                    191 	.globl _PSW
                                    192 	.globl _IP
                                    193 	.globl _P3
                                    194 	.globl _IE
                                    195 	.globl _P2
                                    196 	.globl _SBUF
                                    197 	.globl _SCON
                                    198 	.globl _P1
                                    199 	.globl _TH1
                                    200 	.globl _TH0
                                    201 	.globl _TL1
                                    202 	.globl _TL0
                                    203 	.globl _TMOD
                                    204 	.globl _TCON
                                    205 	.globl _PCON
                                    206 	.globl _DPH
                                    207 	.globl _DPL
                                    208 	.globl _SP
                                    209 	.globl _P0
                                    210 	.globl _enc_bit_clear_PARM_2
                                    211 	.globl _enc_bit_set_PARM_2
                                    212 	.globl _enc_eth_read_PARM_2
                                    213 	.globl _enc_phy_write_PARM_2
                                    214 	.globl _enc_mac_read_PARM_2
                                    215 	.globl _enc_buffer_read_PARM_3
                                    216 	.globl _enc_buffer_read_PARM_2
                                    217 	.globl _enc_buffer_write_PARM_3
                                    218 	.globl _enc_buffer_write_PARM_2
                                    219 	.globl _enc_buffer_init_PARM_2
                                    220 	.globl _enc_control_write_PARM_3
                                    221 	.globl _enc_control_write_PARM_2
                                    222 	.globl _enc_set_autoinc
                                    223 	.globl _enc_select_reg_bank
                                    224 	.globl _enc_control_write
                                    225 	.globl _enc_buffer_init
                                    226 	.globl _enc_buffer_write
                                    227 	.globl _enc_buffer_read
                                    228 	.globl _enc_mac_read
                                    229 	.globl _enc_busy_wait
                                    230 	.globl _enc_phy_read
                                    231 	.globl _enc_phy_write
                                    232 	.globl _enc_eth_read
                                    233 	.globl _enc_reset
                                    234 	.globl _enc_init
                                    235 	.globl _enc_bit_set
                                    236 	.globl _enc_bit_clear
                                    237 ;--------------------------------------------------------
                                    238 ; special function registers
                                    239 ;--------------------------------------------------------
                                    240 	.area RSEG    (ABS,DATA)
      000000                        241 	.org 0x0000
                           000080   242 _P0	=	0x0080
                           000081   243 _SP	=	0x0081
                           000082   244 _DPL	=	0x0082
                           000083   245 _DPH	=	0x0083
                           000087   246 _PCON	=	0x0087
                           000088   247 _TCON	=	0x0088
                           000089   248 _TMOD	=	0x0089
                           00008A   249 _TL0	=	0x008a
                           00008B   250 _TL1	=	0x008b
                           00008C   251 _TH0	=	0x008c
                           00008D   252 _TH1	=	0x008d
                           000090   253 _P1	=	0x0090
                           000098   254 _SCON	=	0x0098
                           000099   255 _SBUF	=	0x0099
                           0000A0   256 _P2	=	0x00a0
                           0000A8   257 _IE	=	0x00a8
                           0000B0   258 _P3	=	0x00b0
                           0000B8   259 _IP	=	0x00b8
                           0000D0   260 _PSW	=	0x00d0
                           0000E0   261 _ACC	=	0x00e0
                           0000F0   262 _B	=	0x00f0
                           0000C8   263 _T2CON	=	0x00c8
                           0000CA   264 _RCAP2L	=	0x00ca
                           0000CB   265 _RCAP2H	=	0x00cb
                           0000CC   266 _TL2	=	0x00cc
                           0000CD   267 _TH2	=	0x00cd
                           00008E   268 _AUXR	=	0x008e
                           0000A2   269 _AUXR1	=	0x00a2
                           000097   270 _CKRL	=	0x0097
                           00008F   271 _CKCON0	=	0x008f
                           0000AF   272 _CKCON1	=	0x00af
                           0000FA   273 _CCAP0H	=	0x00fa
                           0000FB   274 _CCAP1H	=	0x00fb
                           0000FC   275 _CCAP2H	=	0x00fc
                           0000FD   276 _CCAP3H	=	0x00fd
                           0000FE   277 _CCAP4H	=	0x00fe
                           0000EA   278 _CCAP0L	=	0x00ea
                           0000EB   279 _CCAP1L	=	0x00eb
                           0000EC   280 _CCAP2L	=	0x00ec
                           0000ED   281 _CCAP3L	=	0x00ed
                           0000EE   282 _CCAP4L	=	0x00ee
                           0000DA   283 _CCAPM0	=	0x00da
                           0000DB   284 _CCAPM1	=	0x00db
                           0000DC   285 _CCAPM2	=	0x00dc
                           0000DD   286 _CCAPM3	=	0x00dd
                           0000DE   287 _CCAPM4	=	0x00de
                           0000D8   288 _CCON	=	0x00d8
                           0000F9   289 _CH	=	0x00f9
                           0000E9   290 _CL	=	0x00e9
                           0000D9   291 _CMOD	=	0x00d9
                           0000A8   292 _IEN0	=	0x00a8
                           0000B1   293 _IEN1	=	0x00b1
                           0000B8   294 _IPL0	=	0x00b8
                           0000B7   295 _IPH0	=	0x00b7
                           0000B2   296 _IPL1	=	0x00b2
                           0000B3   297 _IPH1	=	0x00b3
                           0000C0   298 _P4	=	0x00c0
                           0000E8   299 _P5	=	0x00e8
                           0000A6   300 _WDTRST	=	0x00a6
                           0000A7   301 _WDTPRG	=	0x00a7
                           0000A9   302 _SADDR	=	0x00a9
                           0000B9   303 _SADEN	=	0x00b9
                           0000C3   304 _SPCON	=	0x00c3
                           0000C4   305 _SPSTA	=	0x00c4
                           0000C5   306 _SPDAT	=	0x00c5
                           0000C9   307 _T2MOD	=	0x00c9
                           00009B   308 _BDRCON	=	0x009b
                           00009A   309 _BRL	=	0x009a
                           00009C   310 _KBLS	=	0x009c
                           00009D   311 _KBE	=	0x009d
                           00009E   312 _KBF	=	0x009e
                           0000D2   313 _EECON	=	0x00d2
                                    314 ;--------------------------------------------------------
                                    315 ; special function bits
                                    316 ;--------------------------------------------------------
                                    317 	.area RSEG    (ABS,DATA)
      000000                        318 	.org 0x0000
                           000080   319 _P0_0	=	0x0080
                           000081   320 _P0_1	=	0x0081
                           000082   321 _P0_2	=	0x0082
                           000083   322 _P0_3	=	0x0083
                           000084   323 _P0_4	=	0x0084
                           000085   324 _P0_5	=	0x0085
                           000086   325 _P0_6	=	0x0086
                           000087   326 _P0_7	=	0x0087
                           000088   327 _IT0	=	0x0088
                           000089   328 _IE0	=	0x0089
                           00008A   329 _IT1	=	0x008a
                           00008B   330 _IE1	=	0x008b
                           00008C   331 _TR0	=	0x008c
                           00008D   332 _TF0	=	0x008d
                           00008E   333 _TR1	=	0x008e
                           00008F   334 _TF1	=	0x008f
                           000090   335 _P1_0	=	0x0090
                           000091   336 _P1_1	=	0x0091
                           000092   337 _P1_2	=	0x0092
                           000093   338 _P1_3	=	0x0093
                           000094   339 _P1_4	=	0x0094
                           000095   340 _P1_5	=	0x0095
                           000096   341 _P1_6	=	0x0096
                           000097   342 _P1_7	=	0x0097
                           000098   343 _RI	=	0x0098
                           000099   344 _TI	=	0x0099
                           00009A   345 _RB8	=	0x009a
                           00009B   346 _TB8	=	0x009b
                           00009C   347 _REN	=	0x009c
                           00009D   348 _SM2	=	0x009d
                           00009E   349 _SM1	=	0x009e
                           00009F   350 _SM0	=	0x009f
                           0000A0   351 _P2_0	=	0x00a0
                           0000A1   352 _P2_1	=	0x00a1
                           0000A2   353 _P2_2	=	0x00a2
                           0000A3   354 _P2_3	=	0x00a3
                           0000A4   355 _P2_4	=	0x00a4
                           0000A5   356 _P2_5	=	0x00a5
                           0000A6   357 _P2_6	=	0x00a6
                           0000A7   358 _P2_7	=	0x00a7
                           0000A8   359 _EX0	=	0x00a8
                           0000A9   360 _ET0	=	0x00a9
                           0000AA   361 _EX1	=	0x00aa
                           0000AB   362 _ET1	=	0x00ab
                           0000AC   363 _ES	=	0x00ac
                           0000AF   364 _EA	=	0x00af
                           0000B0   365 _P3_0	=	0x00b0
                           0000B1   366 _P3_1	=	0x00b1
                           0000B2   367 _P3_2	=	0x00b2
                           0000B3   368 _P3_3	=	0x00b3
                           0000B4   369 _P3_4	=	0x00b4
                           0000B5   370 _P3_5	=	0x00b5
                           0000B6   371 _P3_6	=	0x00b6
                           0000B7   372 _P3_7	=	0x00b7
                           0000B0   373 _RXD	=	0x00b0
                           0000B1   374 _TXD	=	0x00b1
                           0000B2   375 _INT0	=	0x00b2
                           0000B3   376 _INT1	=	0x00b3
                           0000B4   377 _T0	=	0x00b4
                           0000B5   378 _T1	=	0x00b5
                           0000B6   379 _WR	=	0x00b6
                           0000B7   380 _RD	=	0x00b7
                           0000B8   381 _PX0	=	0x00b8
                           0000B9   382 _PT0	=	0x00b9
                           0000BA   383 _PX1	=	0x00ba
                           0000BB   384 _PT1	=	0x00bb
                           0000BC   385 _PS	=	0x00bc
                           0000D0   386 _P	=	0x00d0
                           0000D1   387 _F1	=	0x00d1
                           0000D2   388 _OV	=	0x00d2
                           0000D3   389 _RS0	=	0x00d3
                           0000D4   390 _RS1	=	0x00d4
                           0000D5   391 _F0	=	0x00d5
                           0000D6   392 _AC	=	0x00d6
                           0000D7   393 _CY	=	0x00d7
                           0000AD   394 _ET2	=	0x00ad
                           0000BD   395 _PT2	=	0x00bd
                           0000C8   396 _T2CON_0	=	0x00c8
                           0000C9   397 _T2CON_1	=	0x00c9
                           0000CA   398 _T2CON_2	=	0x00ca
                           0000CB   399 _T2CON_3	=	0x00cb
                           0000CC   400 _T2CON_4	=	0x00cc
                           0000CD   401 _T2CON_5	=	0x00cd
                           0000CE   402 _T2CON_6	=	0x00ce
                           0000CF   403 _T2CON_7	=	0x00cf
                           0000C8   404 _CP_RL2	=	0x00c8
                           0000C9   405 _C_T2	=	0x00c9
                           0000CA   406 _TR2	=	0x00ca
                           0000CB   407 _EXEN2	=	0x00cb
                           0000CC   408 _TCLK	=	0x00cc
                           0000CD   409 _RCLK	=	0x00cd
                           0000CE   410 _EXF2	=	0x00ce
                           0000CF   411 _TF2	=	0x00cf
                           0000DF   412 _CF	=	0x00df
                           0000DE   413 _CR	=	0x00de
                           0000DC   414 _CCF4	=	0x00dc
                           0000DB   415 _CCF3	=	0x00db
                           0000DA   416 _CCF2	=	0x00da
                           0000D9   417 _CCF1	=	0x00d9
                           0000D8   418 _CCF0	=	0x00d8
                           0000AE   419 _EC	=	0x00ae
                           0000BE   420 _PPCL	=	0x00be
                           0000BD   421 _PT2L	=	0x00bd
                           0000BC   422 _PSL	=	0x00bc
                           0000BB   423 _PT1L	=	0x00bb
                           0000BA   424 _PX1L	=	0x00ba
                           0000B9   425 _PT0L	=	0x00b9
                           0000B8   426 _PX0L	=	0x00b8
                           0000C0   427 _P4_0	=	0x00c0
                           0000C1   428 _P4_1	=	0x00c1
                           0000C2   429 _P4_2	=	0x00c2
                           0000C3   430 _P4_3	=	0x00c3
                           0000C4   431 _P4_4	=	0x00c4
                           0000C5   432 _P4_5	=	0x00c5
                           0000C6   433 _P4_6	=	0x00c6
                           0000C7   434 _P4_7	=	0x00c7
                           0000E8   435 _P5_0	=	0x00e8
                           0000E9   436 _P5_1	=	0x00e9
                           0000EA   437 _P5_2	=	0x00ea
                           0000EB   438 _P5_3	=	0x00eb
                           0000EC   439 _P5_4	=	0x00ec
                           0000ED   440 _P5_5	=	0x00ed
                           0000EE   441 _P5_6	=	0x00ee
                           0000EF   442 _P5_7	=	0x00ef
                                    443 ;--------------------------------------------------------
                                    444 ; overlayable register banks
                                    445 ;--------------------------------------------------------
                                    446 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        447 	.ds 8
                                    448 ;--------------------------------------------------------
                                    449 ; internal ram data
                                    450 ;--------------------------------------------------------
                                    451 	.area DSEG    (DATA)
      000000                        452 _enc_init_sloc0_1_0:
      000000                        453 	.ds 3
      000003                        454 _enc_init_sloc1_1_0:
      000003                        455 	.ds 3
      000006                        456 _enc_init_sloc2_1_0:
      000006                        457 	.ds 3
      000009                        458 _enc_init_sloc3_1_0:
      000009                        459 	.ds 3
                                    460 ;--------------------------------------------------------
                                    461 ; overlayable items in internal ram
                                    462 ;--------------------------------------------------------
                                    463 ;--------------------------------------------------------
                                    464 ; indirectly addressable internal ram data
                                    465 ;--------------------------------------------------------
                                    466 	.area ISEG    (DATA)
                                    467 ;--------------------------------------------------------
                                    468 ; absolute internal ram data
                                    469 ;--------------------------------------------------------
                                    470 	.area IABS    (ABS,DATA)
                                    471 	.area IABS    (ABS,DATA)
                                    472 ;--------------------------------------------------------
                                    473 ; bit data
                                    474 ;--------------------------------------------------------
                                    475 	.area BSEG    (BIT)
                                    476 ;--------------------------------------------------------
                                    477 ; paged external ram data
                                    478 ;--------------------------------------------------------
                                    479 	.area PSEG    (PAG,XDATA)
                                    480 ;--------------------------------------------------------
                                    481 ; uninitialized external ram data
                                    482 ;--------------------------------------------------------
                                    483 	.area XSEG    (XDATA)
      000000                        484 _enc_select_reg_bank_bank_10000_85:
      000000                        485 	.ds 1
      000001                        486 _enc_select_reg_bank_data_10001_87:
      000001                        487 	.ds 1
      000002                        488 _enc_control_write_PARM_2:
      000002                        489 	.ds 1
      000003                        490 _enc_control_write_PARM_3:
      000003                        491 	.ds 1
      000004                        492 _enc_control_write_reg_bank_10000_90:
      000004                        493 	.ds 2
      000006                        494 _enc_buffer_init_PARM_2:
      000006                        495 	.ds 2
      000008                        496 _enc_buffer_init_start_address_10000_92:
      000008                        497 	.ds 2
      00000A                        498 _enc_buffer_write_PARM_2:
      00000A                        499 	.ds 2
      00000C                        500 _enc_buffer_write_PARM_3:
      00000C                        501 	.ds 3
      00000F                        502 _enc_buffer_write_num_bytes_10000_95:
      00000F                        503 	.ds 2
      000011                        504 _enc_buffer_read_PARM_2:
      000011                        505 	.ds 2
      000013                        506 _enc_buffer_read_PARM_3:
      000013                        507 	.ds 3
      000016                        508 _enc_buffer_read_num_bytes_10000_105:
      000016                        509 	.ds 2
      000018                        510 _enc_mac_read_PARM_2:
      000018                        511 	.ds 1
      000019                        512 _enc_mac_read_addr_10000_115:
      000019                        513 	.ds 1
      00001A                        514 _enc_busy_wait_data_10000_120:
      00001A                        515 	.ds 1
      00001B                        516 _enc_phy_read_addr_10000_122:
      00001B                        517 	.ds 1
      00001C                        518 _enc_phy_write_PARM_2:
      00001C                        519 	.ds 2
      00001E                        520 _enc_phy_write_addr_10000_125:
      00001E                        521 	.ds 1
      00001F                        522 _enc_eth_read_PARM_2:
      00001F                        523 	.ds 1
      000020                        524 _enc_eth_read_addr_10000_127:
      000020                        525 	.ds 1
      000021                        526 _enc_init_mac_10000_133:
      000021                        527 	.ds 3
      000024                        528 _enc_bit_set_PARM_2:
      000024                        529 	.ds 1
      000025                        530 _enc_bit_set_addr_10000_139:
      000025                        531 	.ds 1
      000026                        532 _enc_bit_clear_PARM_2:
      000026                        533 	.ds 1
      000027                        534 _enc_bit_clear_addr_10000_141:
      000027                        535 	.ds 1
                                    536 ;--------------------------------------------------------
                                    537 ; absolute external ram data
                                    538 ;--------------------------------------------------------
                                    539 	.area XABS    (ABS,XDATA)
                                    540 ;--------------------------------------------------------
                                    541 ; initialized external ram data
                                    542 ;--------------------------------------------------------
                                    543 	.area XISEG   (XDATA)
                                    544 	.area HOME    (CODE)
                                    545 	.area GSINIT0 (CODE)
                                    546 	.area GSINIT1 (CODE)
                                    547 	.area GSINIT2 (CODE)
                                    548 	.area GSINIT3 (CODE)
                                    549 	.area GSINIT4 (CODE)
                                    550 	.area GSINIT5 (CODE)
                                    551 	.area GSINIT  (CODE)
                                    552 	.area GSFINAL (CODE)
                                    553 	.area CSEG    (CODE)
                                    554 ;--------------------------------------------------------
                                    555 ; global & static initialisations
                                    556 ;--------------------------------------------------------
                                    557 	.area HOME    (CODE)
                                    558 	.area GSINIT  (CODE)
                                    559 	.area GSFINAL (CODE)
                                    560 	.area GSINIT  (CODE)
                                    561 ;--------------------------------------------------------
                                    562 ; Home
                                    563 ;--------------------------------------------------------
                                    564 	.area HOME    (CODE)
                                    565 	.area HOME    (CODE)
                                    566 ;--------------------------------------------------------
                                    567 ; code
                                    568 ;--------------------------------------------------------
                                    569 	.area CSEG    (CODE)
                                    570 ;------------------------------------------------------------
                                    571 ;Allocation info for local variables in function 'enc_set_autoinc'
                                    572 ;------------------------------------------------------------
                                    573 ;data                      Allocated with name '_enc_set_autoinc_data_10001_84'
                                    574 ;------------------------------------------------------------
                                    575 ;	enc.c:14: void enc_set_autoinc(void) {
                                    576 ;	-----------------------------------------
                                    577 ;	 function enc_set_autoinc
                                    578 ;	-----------------------------------------
      000000                        579 _enc_set_autoinc:
                           000007   580 	ar7 = 0x07
                           000006   581 	ar6 = 0x06
                           000005   582 	ar5 = 0x05
                           000004   583 	ar4 = 0x04
                           000003   584 	ar3 = 0x03
                           000002   585 	ar2 = 0x02
                           000001   586 	ar1 = 0x01
                           000000   587 	ar0 = 0x00
                                    588 ;	enc.c:15: CS_LOW;
                                    589 ;	assignBit
      000000 C2 91            [12]  590 	clr	_P1_1
                                    591 ;	enc.c:16: SPI_WriteByte(ENC_ECON2);
      000002 75 82 1E         [24]  592 	mov	dpl, #0x1e
      000005 12r00r00         [24]  593 	lcall	_SPI_WriteByte
                                    594 ;	enc.c:17: uint8_t data = SPI_ReadByte(); // Read the data from the SPI slave
      000008 12r00r00         [24]  595 	lcall	_SPI_ReadByte
      00000B AF 82            [24]  596 	mov	r7, dpl
                                    597 ;	enc.c:18: CS_HIGH;
                                    598 ;	assignBit
      00000D D2 91            [12]  599 	setb	_P1_1
                                    600 ;	enc.c:19: data |= (1 << 7); // Set bit 7 of the data to 1
      00000F 43 07 80         [24]  601 	orl	ar7,#0x80
                                    602 ;	enc.c:20: CS_LOW;
                                    603 ;	assignBit
      000012 C2 91            [12]  604 	clr	_P1_1
                                    605 ;	enc.c:21: SPI_WriteByte(SPI_WRITE_ECON2);      // Write ECON2 address
      000014 75 82 5E         [24]  606 	mov	dpl, #0x5e
      000017 C0 07            [24]  607 	push	ar7
      000019 12r00r00         [24]  608 	lcall	_SPI_WriteByte
      00001C D0 07            [24]  609 	pop	ar7
                                    610 ;	enc.c:22: SPI_WriteByte(data);      // Write the modified data with MSB set
      00001E 8F 82            [24]  611 	mov	dpl, r7
      000020 12r00r00         [24]  612 	lcall	_SPI_WriteByte
                                    613 ;	enc.c:23: CS_HIGH;
                                    614 ;	assignBit
      000023 D2 91            [12]  615 	setb	_P1_1
                                    616 ;	enc.c:24: }
      000025 22               [24]  617 	ret
                                    618 ;------------------------------------------------------------
                                    619 ;Allocation info for local variables in function 'enc_select_reg_bank'
                                    620 ;------------------------------------------------------------
                                    621 ;bank                      Allocated with name '_enc_select_reg_bank_bank_10000_85'
                                    622 ;data                      Allocated with name '_enc_select_reg_bank_data_10001_87'
                                    623 ;i                         Allocated with name '_enc_select_reg_bank_i_20001_89'
                                    624 ;------------------------------------------------------------
                                    625 ;	enc.c:25: void enc_select_reg_bank(uint8_t bank) {
                                    626 ;	-----------------------------------------
                                    627 ;	 function enc_select_reg_bank
                                    628 ;	-----------------------------------------
      000026                        629 _enc_select_reg_bank:
      000026 E5 82            [12]  630 	mov	a,dpl
      000028 90r00r00         [24]  631 	mov	dptr,#_enc_select_reg_bank_bank_10000_85
      00002B F0               [24]  632 	movx	@dptr,a
                                    633 ;	enc.c:26: CS_LOW;
                                    634 ;	assignBit
      00002C C2 91            [12]  635 	clr	_P1_1
                                    636 ;	enc.c:27: SPI_WriteByte(ENC_ECON1); // Send the address
      00002E 75 82 1F         [24]  637 	mov	dpl, #0x1f
      000031 12r00r00         [24]  638 	lcall	_SPI_WriteByte
                                    639 ;	enc.c:28: uint8_t data = SPI_ReadByte(); // Read the data
      000034 12r00r00         [24]  640 	lcall	_SPI_ReadByte
      000037 AF 82            [24]  641 	mov	r7, dpl
                                    642 ;	enc.c:29: CS_HIGH;
                                    643 ;	assignBit
      000039 D2 91            [12]  644 	setb	_P1_1
                                    645 ;	enc.c:32: data &= ~0x03; // Clear the last two bits
      00003B 53 07 FC         [24]  646 	anl	ar7,#0xfc
      00003E 90r00r01         [24]  647 	mov	dptr,#_enc_select_reg_bank_data_10001_87
      000041 EF               [12]  648 	mov	a,r7
      000042 F0               [24]  649 	movx	@dptr,a
                                    650 ;	enc.c:33: switch (bank) {
      000043 90r00r00         [24]  651 	mov	dptr,#_enc_select_reg_bank_bank_10000_85
      000046 E0               [24]  652 	movx	a,@dptr
      000047 FE               [12]  653 	mov  r6,a
      000048 24 FC            [12]  654 	add	a,#0xff - 0x03
      00004A 40 30            [24]  655 	jc	00105$
      00004C EE               [12]  656 	mov	a,r6
      00004D 2E               [12]  657 	add	a,r6
                                    658 ;	enc.c:34: case 0:
      00004E 90r00r52         [24]  659 	mov	dptr,#00133$
      000051 73               [24]  660 	jmp	@a+dptr
      000052                        661 00133$:
      000052 80 06            [24]  662 	sjmp	00101$
      000054 80 0B            [24]  663 	sjmp	00102$
      000056 80 12            [24]  664 	sjmp	00103$
      000058 80 19            [24]  665 	sjmp	00104$
      00005A                        666 00101$:
                                    667 ;	enc.c:35: data |= 0x00; // Last two bits: 00
      00005A 90r00r01         [24]  668 	mov	dptr,#_enc_select_reg_bank_data_10001_87
      00005D EF               [12]  669 	mov	a,r7
      00005E F0               [24]  670 	movx	@dptr,a
                                    671 ;	enc.c:36: break;
                                    672 ;	enc.c:37: case 1:
      00005F 80 30            [24]  673 	sjmp	00115$
      000061                        674 00102$:
                                    675 ;	enc.c:38: data |= 0x01; // Last two bits: 01
      000061 90r00r01         [24]  676 	mov	dptr,#_enc_select_reg_bank_data_10001_87
      000064 74 01            [12]  677 	mov	a,#0x01
      000066 4F               [12]  678 	orl	a,r7
      000067 F0               [24]  679 	movx	@dptr,a
                                    680 ;	enc.c:39: break;
                                    681 ;	enc.c:40: case 2:
      000068 80 27            [24]  682 	sjmp	00115$
      00006A                        683 00103$:
                                    684 ;	enc.c:41: data |= 0x02; // Last two bits: 10
      00006A 90r00r01         [24]  685 	mov	dptr,#_enc_select_reg_bank_data_10001_87
      00006D 74 02            [12]  686 	mov	a,#0x02
      00006F 4F               [12]  687 	orl	a,r7
      000070 F0               [24]  688 	movx	@dptr,a
                                    689 ;	enc.c:42: break;
                                    690 ;	enc.c:43: case 3:
      000071 80 1E            [24]  691 	sjmp	00115$
      000073                        692 00104$:
                                    693 ;	enc.c:44: data |= 0x03; // Last two bits: 11
      000073 90r00r01         [24]  694 	mov	dptr,#_enc_select_reg_bank_data_10001_87
      000076 74 03            [12]  695 	mov	a,#0x03
      000078 4F               [12]  696 	orl	a,r7
      000079 F0               [24]  697 	movx	@dptr,a
                                    698 ;	enc.c:45: break;
                                    699 ;	enc.c:46: default:
      00007A 80 15            [24]  700 	sjmp	00115$
      00007C                        701 00105$:
                                    702 ;	enc.c:47: printf("wrong bank");
      00007C 74r00            [12]  703 	mov	a,#___str_0
      00007E C0 E0            [24]  704 	push	acc
      000080 74s00            [12]  705 	mov	a,#(___str_0 >> 8)
      000082 C0 E0            [24]  706 	push	acc
      000084 74 80            [12]  707 	mov	a,#0x80
      000086 C0 E0            [24]  708 	push	acc
      000088 12r00r00         [24]  709 	lcall	_printf
      00008B 15 81            [12]  710 	dec	sp
      00008D 15 81            [12]  711 	dec	sp
      00008F 15 81            [12]  712 	dec	sp
                                    713 ;	enc.c:50: for (int i = 0; i < 16; i++)
      000091                        714 00115$:
      000091 7F 00            [12]  715 	mov	r7,#0x00
      000093                        716 00109$:
      000093 BF 10 00         [24]  717 	cjne	r7,#0x10,00134$
      000096                        718 00134$:
      000096 50 03            [24]  719 	jnc	00107$
      000098 0F               [12]  720 	inc	r7
      000099 80 F8            [24]  721 	sjmp	00109$
      00009B                        722 00107$:
                                    723 ;	enc.c:53: CS_LOW;
                                    724 ;	assignBit
      00009B C2 91            [12]  725 	clr	_P1_1
                                    726 ;	enc.c:54: SPI_WriteByte(SPI_WRITE_ECON1);
      00009D 75 82 5F         [24]  727 	mov	dpl, #0x5f
      0000A0 12r00r00         [24]  728 	lcall	_SPI_WriteByte
                                    729 ;	enc.c:55: SPI_WriteByte(data); // Send the modified data
      0000A3 90r00r01         [24]  730 	mov	dptr,#_enc_select_reg_bank_data_10001_87
      0000A6 E0               [24]  731 	movx	a,@dptr
      0000A7 F5 82            [12]  732 	mov	dpl,a
      0000A9 12r00r00         [24]  733 	lcall	_SPI_WriteByte
                                    734 ;	enc.c:56: CS_HIGH;
                                    735 ;	assignBit
      0000AC D2 91            [12]  736 	setb	_P1_1
                                    737 ;	enc.c:57: }
      0000AE 22               [24]  738 	ret
                                    739 ;------------------------------------------------------------
                                    740 ;Allocation info for local variables in function 'enc_control_write'
                                    741 ;------------------------------------------------------------
                                    742 ;addr                      Allocated with name '_enc_control_write_PARM_2'
                                    743 ;data                      Allocated with name '_enc_control_write_PARM_3'
                                    744 ;reg_bank                  Allocated with name '_enc_control_write_reg_bank_10000_90'
                                    745 ;opcode                    Allocated with name '_enc_control_write_opcode_10000_91'
                                    746 ;------------------------------------------------------------
                                    747 ;	enc.c:59: void enc_control_write(int reg_bank, uint8_t addr, uint8_t data) {
                                    748 ;	-----------------------------------------
                                    749 ;	 function enc_control_write
                                    750 ;	-----------------------------------------
      0000AF                        751 _enc_control_write:
      0000AF AF 83            [24]  752 	mov	r7,dph
      0000B1 E5 82            [12]  753 	mov	a,dpl
      0000B3 90r00r04         [24]  754 	mov	dptr,#_enc_control_write_reg_bank_10000_90
      0000B6 F0               [24]  755 	movx	@dptr,a
      0000B7 EF               [12]  756 	mov	a,r7
      0000B8 A3               [24]  757 	inc	dptr
      0000B9 F0               [24]  758 	movx	@dptr,a
                                    759 ;	enc.c:61: addr = addr + opcode;
      0000BA 90r00r02         [24]  760 	mov	dptr,#_enc_control_write_PARM_2
      0000BD E0               [24]  761 	movx	a,@dptr
      0000BE 24 40            [12]  762 	add	a, #0x40
      0000C0 F0               [24]  763 	movx	@dptr,a
                                    764 ;	enc.c:62: enc_select_reg_bank(reg_bank);
      0000C1 90r00r04         [24]  765 	mov	dptr,#_enc_control_write_reg_bank_10000_90
      0000C4 E0               [24]  766 	movx	a,@dptr
      0000C5 FE               [12]  767 	mov	r6,a
      0000C6 A3               [24]  768 	inc	dptr
      0000C7 E0               [24]  769 	movx	a,@dptr
      0000C8 8E 82            [24]  770 	mov	dpl, r6
      0000CA 12r00r26         [24]  771 	lcall	_enc_select_reg_bank
                                    772 ;	enc.c:63: CS_LOW;
                                    773 ;	assignBit
      0000CD C2 91            [12]  774 	clr	_P1_1
                                    775 ;	enc.c:64: SPI_WriteByte(addr);
      0000CF 90r00r02         [24]  776 	mov	dptr,#_enc_control_write_PARM_2
      0000D2 E0               [24]  777 	movx	a,@dptr
      0000D3 F5 82            [12]  778 	mov	dpl,a
      0000D5 12r00r00         [24]  779 	lcall	_SPI_WriteByte
                                    780 ;	enc.c:65: SPI_WriteByte(data);
      0000D8 90r00r03         [24]  781 	mov	dptr,#_enc_control_write_PARM_3
      0000DB E0               [24]  782 	movx	a,@dptr
      0000DC F5 82            [12]  783 	mov	dpl,a
      0000DE 12r00r00         [24]  784 	lcall	_SPI_WriteByte
                                    785 ;	enc.c:66: CS_HIGH;
                                    786 ;	assignBit
      0000E1 D2 91            [12]  787 	setb	_P1_1
                                    788 ;	enc.c:67: }
      0000E3 22               [24]  789 	ret
                                    790 ;------------------------------------------------------------
                                    791 ;Allocation info for local variables in function 'enc_buffer_init'
                                    792 ;------------------------------------------------------------
                                    793 ;end_address               Allocated with name '_enc_buffer_init_PARM_2'
                                    794 ;start_address             Allocated with name '_enc_buffer_init_start_address_10000_92'
                                    795 ;------------------------------------------------------------
                                    796 ;	enc.c:69: void enc_buffer_init(uint16_t start_address, uint16_t end_address) {
                                    797 ;	-----------------------------------------
                                    798 ;	 function enc_buffer_init
                                    799 ;	-----------------------------------------
      0000E4                        800 _enc_buffer_init:
      0000E4 AF 83            [24]  801 	mov	r7,dph
      0000E6 E5 82            [12]  802 	mov	a,dpl
      0000E8 90r00r08         [24]  803 	mov	dptr,#_enc_buffer_init_start_address_10000_92
      0000EB F0               [24]  804 	movx	@dptr,a
      0000EC EF               [12]  805 	mov	a,r7
      0000ED A3               [24]  806 	inc	dptr
      0000EE F0               [24]  807 	movx	@dptr,a
                                    808 ;	enc.c:71: if (start_address > TX_BUFFER_END || end_address > TX_BUFFER_END) {
      0000EF 90r00r08         [24]  809 	mov	dptr,#_enc_buffer_init_start_address_10000_92
      0000F2 E0               [24]  810 	movx	a,@dptr
      0000F3 FE               [12]  811 	mov	r6,a
      0000F4 A3               [24]  812 	inc	dptr
      0000F5 E0               [24]  813 	movx	a,@dptr
      0000F6 FF               [12]  814 	mov	r7,a
      0000F7 C3               [12]  815 	clr	c
      0000F8 74 FF            [12]  816 	mov	a,#0xff
      0000FA 9E               [12]  817 	subb	a,r6
      0000FB 74 1F            [12]  818 	mov	a,#0x1f
      0000FD 9F               [12]  819 	subb	a,r7
      0000FE 40 15            [24]  820 	jc	00101$
      000100 90r00r06         [24]  821 	mov	dptr,#_enc_buffer_init_PARM_2
      000103 E0               [24]  822 	movx	a,@dptr
      000104 FC               [12]  823 	mov	r4,a
      000105 A3               [24]  824 	inc	dptr
      000106 E0               [24]  825 	movx	a,@dptr
      000107 FD               [12]  826 	mov	r5,a
      000108 8C 02            [24]  827 	mov	ar2,r4
      00010A 8D 03            [24]  828 	mov	ar3,r5
      00010C C3               [12]  829 	clr	c
      00010D 74 FF            [12]  830 	mov	a,#0xff
      00010F 9A               [12]  831 	subb	a,r2
      000110 74 1F            [12]  832 	mov	a,#0x1f
      000112 9B               [12]  833 	subb	a,r3
      000113 50 2A            [24]  834 	jnc	00102$
      000115                        835 00101$:
                                    836 ;	enc.c:72: printf("\nInvalid Buffer Range: Start 0x%04X, End 0x%04X\n",
      000115 90r00r06         [24]  837 	mov	dptr,#_enc_buffer_init_PARM_2
      000118 E0               [24]  838 	movx	a,@dptr
      000119 C0 E0            [24]  839 	push	acc
      00011B A3               [24]  840 	inc	dptr
      00011C E0               [24]  841 	movx	a,@dptr
      00011D C0 E0            [24]  842 	push	acc
      00011F 90r00r08         [24]  843 	mov	dptr,#_enc_buffer_init_start_address_10000_92
      000122 E0               [24]  844 	movx	a,@dptr
      000123 C0 E0            [24]  845 	push	acc
      000125 A3               [24]  846 	inc	dptr
      000126 E0               [24]  847 	movx	a,@dptr
      000127 C0 E0            [24]  848 	push	acc
      000129 74r0B            [12]  849 	mov	a,#___str_1
      00012B C0 E0            [24]  850 	push	acc
      00012D 74s00            [12]  851 	mov	a,#(___str_1 >> 8)
      00012F C0 E0            [24]  852 	push	acc
      000131 74 80            [12]  853 	mov	a,#0x80
      000133 C0 E0            [24]  854 	push	acc
      000135 12r00r00         [24]  855 	lcall	_printf
      000138 E5 81            [12]  856 	mov	a,sp
      00013A 24 F9            [12]  857 	add	a,#0xf9
      00013C F5 81            [12]  858 	mov	sp,a
                                    859 ;	enc.c:74: return;
      00013E 22               [24]  860 	ret
      00013F                        861 00102$:
                                    862 ;	enc.c:77: start_address &= ~1;  // Align to even address
      00013F 53 06 FE         [24]  863 	anl	ar6,#0xfe
      000142 90r00r08         [24]  864 	mov	dptr,#_enc_buffer_init_start_address_10000_92
      000145 EE               [12]  865 	mov	a,r6
      000146 F0               [24]  866 	movx	@dptr,a
      000147 EF               [12]  867 	mov	a,r7
      000148 A3               [24]  868 	inc	dptr
      000149 F0               [24]  869 	movx	@dptr,a
                                    870 ;	enc.c:79: enc_control_write(0, ENC_ERDPTL, (uint8_t) (start_address & 0xFF)); // ERDPTL
      00014A 90r00r08         [24]  871 	mov	dptr,#_enc_buffer_init_start_address_10000_92
      00014D E0               [24]  872 	movx	a,@dptr
      00014E FE               [12]  873 	mov	r6,a
      00014F A3               [24]  874 	inc	dptr
      000150 E0               [24]  875 	movx	a,@dptr
      000151 FF               [12]  876 	mov	r7,a
      000152 8E 03            [24]  877 	mov	ar3,r6
      000154 90r00r02         [24]  878 	mov	dptr,#_enc_control_write_PARM_2
      000157 E4               [12]  879 	clr	a
      000158 F0               [24]  880 	movx	@dptr,a
      000159 90r00r03         [24]  881 	mov	dptr,#_enc_control_write_PARM_3
      00015C EB               [12]  882 	mov	a,r3
      00015D F0               [24]  883 	movx	@dptr,a
      00015E 90 00 00         [24]  884 	mov	dptr,#0x0000
      000161 C0 07            [24]  885 	push	ar7
      000163 C0 06            [24]  886 	push	ar6
      000165 C0 05            [24]  887 	push	ar5
      000167 C0 04            [24]  888 	push	ar4
      000169 C0 03            [24]  889 	push	ar3
      00016B 12r00rAF         [24]  890 	lcall	_enc_control_write
      00016E D0 03            [24]  891 	pop	ar3
      000170 D0 04            [24]  892 	pop	ar4
      000172 D0 05            [24]  893 	pop	ar5
      000174 D0 06            [24]  894 	pop	ar6
      000176 D0 07            [24]  895 	pop	ar7
                                    896 ;	enc.c:80: enc_control_write(0, ENC_ERDPTH, (uint8_t) (start_address >> 8)); // ERDPTH
      000178 8F 02            [24]  897 	mov	ar2,r7
      00017A 90r00r02         [24]  898 	mov	dptr,#_enc_control_write_PARM_2
      00017D 74 01            [12]  899 	mov	a,#0x01
      00017F F0               [24]  900 	movx	@dptr,a
      000180 90r00r03         [24]  901 	mov	dptr,#_enc_control_write_PARM_3
      000183 EA               [12]  902 	mov	a,r2
      000184 F0               [24]  903 	movx	@dptr,a
      000185 90 00 00         [24]  904 	mov	dptr,#0x0000
      000188 C0 07            [24]  905 	push	ar7
      00018A C0 06            [24]  906 	push	ar6
      00018C C0 05            [24]  907 	push	ar5
      00018E C0 04            [24]  908 	push	ar4
      000190 C0 03            [24]  909 	push	ar3
      000192 C0 02            [24]  910 	push	ar2
      000194 12r00rAF         [24]  911 	lcall	_enc_control_write
      000197 D0 02            [24]  912 	pop	ar2
      000199 D0 03            [24]  913 	pop	ar3
                                    914 ;	enc.c:81: enc_control_write(0, ENC_ERXSTL, (uint8_t) (start_address & 0xFF)); // ERXSTL
      00019B 90r00r02         [24]  915 	mov	dptr,#_enc_control_write_PARM_2
      00019E 74 08            [12]  916 	mov	a,#0x08
      0001A0 F0               [24]  917 	movx	@dptr,a
      0001A1 90r00r03         [24]  918 	mov	dptr,#_enc_control_write_PARM_3
      0001A4 EB               [12]  919 	mov	a,r3
      0001A5 F0               [24]  920 	movx	@dptr,a
      0001A6 90 00 00         [24]  921 	mov	dptr,#0x0000
      0001A9 C0 03            [24]  922 	push	ar3
      0001AB C0 02            [24]  923 	push	ar2
      0001AD 12r00rAF         [24]  924 	lcall	_enc_control_write
      0001B0 D0 02            [24]  925 	pop	ar2
                                    926 ;	enc.c:82: enc_control_write(0, ENC_ERXSTH, (uint8_t) (start_address >> 8)); // ERXSTH
      0001B2 90r00r02         [24]  927 	mov	dptr,#_enc_control_write_PARM_2
      0001B5 74 09            [12]  928 	mov	a,#0x09
      0001B7 F0               [24]  929 	movx	@dptr,a
      0001B8 90r00r03         [24]  930 	mov	dptr,#_enc_control_write_PARM_3
      0001BB EA               [12]  931 	mov	a,r2
      0001BC F0               [24]  932 	movx	@dptr,a
      0001BD 90 00 00         [24]  933 	mov	dptr,#0x0000
      0001C0 C0 02            [24]  934 	push	ar2
      0001C2 12r00rAF         [24]  935 	lcall	_enc_control_write
      0001C5 D0 02            [24]  936 	pop	ar2
      0001C7 D0 03            [24]  937 	pop	ar3
      0001C9 D0 04            [24]  938 	pop	ar4
                                    939 ;	enc.c:83: enc_control_write(0, ENC_ERXNDL, (uint8_t) (end_address & 0xFF)); // ERXNDL
      0001CB 8C 01            [24]  940 	mov	ar1,r4
      0001CD 90r00r02         [24]  941 	mov	dptr,#_enc_control_write_PARM_2
      0001D0 74 0A            [12]  942 	mov	a,#0x0a
      0001D2 F0               [24]  943 	movx	@dptr,a
      0001D3 90r00r03         [24]  944 	mov	dptr,#_enc_control_write_PARM_3
      0001D6 E9               [12]  945 	mov	a,r1
      0001D7 F0               [24]  946 	movx	@dptr,a
      0001D8 90 00 00         [24]  947 	mov	dptr,#0x0000
      0001DB C0 04            [24]  948 	push	ar4
      0001DD C0 03            [24]  949 	push	ar3
      0001DF C0 02            [24]  950 	push	ar2
      0001E1 12r00rAF         [24]  951 	lcall	_enc_control_write
      0001E4 D0 02            [24]  952 	pop	ar2
      0001E6 D0 03            [24]  953 	pop	ar3
      0001E8 D0 04            [24]  954 	pop	ar4
      0001EA D0 05            [24]  955 	pop	ar5
                                    956 ;	enc.c:84: enc_control_write(0, ENC_ERXNDH, (uint8_t) (end_address >> 8)); // ERXNDH
      0001EC 8D 01            [24]  957 	mov	ar1,r5
      0001EE 90r00r02         [24]  958 	mov	dptr,#_enc_control_write_PARM_2
      0001F1 74 0B            [12]  959 	mov	a,#0x0b
      0001F3 F0               [24]  960 	movx	@dptr,a
      0001F4 90r00r03         [24]  961 	mov	dptr,#_enc_control_write_PARM_3
      0001F7 E9               [12]  962 	mov	a,r1
      0001F8 F0               [24]  963 	movx	@dptr,a
      0001F9 90 00 00         [24]  964 	mov	dptr,#0x0000
      0001FC C0 05            [24]  965 	push	ar5
      0001FE C0 04            [24]  966 	push	ar4
      000200 C0 03            [24]  967 	push	ar3
      000202 C0 02            [24]  968 	push	ar2
      000204 12r00rAF         [24]  969 	lcall	_enc_control_write
      000207 D0 02            [24]  970 	pop	ar2
      000209 D0 03            [24]  971 	pop	ar3
                                    972 ;	enc.c:85: enc_control_write(0, ENC_ERXRDPTL, (uint8_t) (start_address & 0xFF)); // ERXRDPTL
      00020B 90r00r02         [24]  973 	mov	dptr,#_enc_control_write_PARM_2
      00020E 74 0C            [12]  974 	mov	a,#0x0c
      000210 F0               [24]  975 	movx	@dptr,a
      000211 90r00r03         [24]  976 	mov	dptr,#_enc_control_write_PARM_3
      000214 EB               [12]  977 	mov	a,r3
      000215 F0               [24]  978 	movx	@dptr,a
      000216 90 00 00         [24]  979 	mov	dptr,#0x0000
      000219 C0 02            [24]  980 	push	ar2
      00021B 12r00rAF         [24]  981 	lcall	_enc_control_write
      00021E D0 02            [24]  982 	pop	ar2
                                    983 ;	enc.c:86: enc_control_write(0, ENC_ERXRDPTH, (uint8_t) (start_address >> 8)); // ERXRDPTH
      000220 90r00r02         [24]  984 	mov	dptr,#_enc_control_write_PARM_2
      000223 74 0D            [12]  985 	mov	a,#0x0d
      000225 F0               [24]  986 	movx	@dptr,a
      000226 90r00r03         [24]  987 	mov	dptr,#_enc_control_write_PARM_3
      000229 EA               [12]  988 	mov	a,r2
      00022A F0               [24]  989 	movx	@dptr,a
      00022B 90 00 00         [24]  990 	mov	dptr,#0x0000
      00022E 12r00rAF         [24]  991 	lcall	_enc_control_write
      000231 D0 04            [24]  992 	pop	ar4
      000233 D0 05            [24]  993 	pop	ar5
      000235 D0 06            [24]  994 	pop	ar6
      000237 D0 07            [24]  995 	pop	ar7
                                    996 ;	enc.c:87: printf("\nBuffer Initialized: Start 0x%04X, End 0x%04X\n", start_address,
      000239 C0 04            [24]  997 	push	ar4
      00023B C0 05            [24]  998 	push	ar5
      00023D C0 06            [24]  999 	push	ar6
      00023F C0 07            [24] 1000 	push	ar7
      000241 74r3C            [12] 1001 	mov	a,#___str_2
      000243 C0 E0            [24] 1002 	push	acc
      000245 74s00            [12] 1003 	mov	a,#(___str_2 >> 8)
      000247 C0 E0            [24] 1004 	push	acc
      000249 74 80            [12] 1005 	mov	a,#0x80
      00024B C0 E0            [24] 1006 	push	acc
      00024D 12r00r00         [24] 1007 	lcall	_printf
      000250 E5 81            [12] 1008 	mov	a,sp
      000252 24 F9            [12] 1009 	add	a,#0xf9
      000254 F5 81            [12] 1010 	mov	sp,a
                                   1011 ;	enc.c:89: }
      000256 22               [24] 1012 	ret
                                   1013 ;------------------------------------------------------------
                                   1014 ;Allocation info for local variables in function 'enc_buffer_write'
                                   1015 ;------------------------------------------------------------
                                   1016 ;start_address             Allocated with name '_enc_buffer_write_PARM_2'
                                   1017 ;data_ptr                  Allocated with name '_enc_buffer_write_PARM_3'
                                   1018 ;num_bytes                 Allocated with name '_enc_buffer_write_num_bytes_10000_95'
                                   1019 ;higher_byte               Allocated with name '_enc_buffer_write_higher_byte_10001_101'
                                   1020 ;lower_byte                Allocated with name '_enc_buffer_write_lower_byte_10001_101'
                                   1021 ;opcode                    Allocated with name '_enc_buffer_write_opcode_10002_102'
                                   1022 ;i                         Allocated with name '_enc_buffer_write_i_20002_103'
                                   1023 ;------------------------------------------------------------
                                   1024 ;	enc.c:91: void enc_buffer_write(int num_bytes, uint16_t start_address, uint8_t *data_ptr) {
                                   1025 ;	-----------------------------------------
                                   1026 ;	 function enc_buffer_write
                                   1027 ;	-----------------------------------------
      000257                       1028 _enc_buffer_write:
      000257 AF 83            [24] 1029 	mov	r7,dph
      000259 E5 82            [12] 1030 	mov	a,dpl
      00025B 90r00r0F         [24] 1031 	mov	dptr,#_enc_buffer_write_num_bytes_10000_95
      00025E F0               [24] 1032 	movx	@dptr,a
      00025F EF               [12] 1033 	mov	a,r7
      000260 A3               [24] 1034 	inc	dptr
      000261 F0               [24] 1035 	movx	@dptr,a
                                   1036 ;	enc.c:92: if (num_bytes < 1) {
      000262 90r00r0F         [24] 1037 	mov	dptr,#_enc_buffer_write_num_bytes_10000_95
      000265 E0               [24] 1038 	movx	a,@dptr
      000266 FE               [12] 1039 	mov	r6,a
      000267 A3               [24] 1040 	inc	dptr
      000268 E0               [24] 1041 	movx	a,@dptr
      000269 FF               [12] 1042 	mov	r7,a
      00026A C3               [12] 1043 	clr	c
      00026B EE               [12] 1044 	mov	a,r6
      00026C 94 01            [12] 1045 	subb	a,#0x01
      00026E EF               [12] 1046 	mov	a,r7
      00026F 64 80            [12] 1047 	xrl	a,#0x80
      000271 94 80            [12] 1048 	subb	a,#0x80
      000273 50 1A            [24] 1049 	jnc	00102$
                                   1050 ;	enc.c:93: printf("\n\rInvalid number of bytes: %d\n\r", num_bytes);
      000275 C0 06            [24] 1051 	push	ar6
      000277 C0 07            [24] 1052 	push	ar7
      000279 74r6B            [12] 1053 	mov	a,#___str_3
      00027B C0 E0            [24] 1054 	push	acc
      00027D 74s00            [12] 1055 	mov	a,#(___str_3 >> 8)
      00027F C0 E0            [24] 1056 	push	acc
      000281 74 80            [12] 1057 	mov	a,#0x80
      000283 C0 E0            [24] 1058 	push	acc
      000285 12r00r00         [24] 1059 	lcall	_printf
      000288 E5 81            [12] 1060 	mov	a,sp
      00028A 24 FB            [12] 1061 	add	a,#0xfb
      00028C F5 81            [12] 1062 	mov	sp,a
                                   1063 ;	enc.c:94: return;
      00028E 22               [24] 1064 	ret
      00028F                       1065 00102$:
                                   1066 ;	enc.c:96: if (start_address > TX_BUFFER_END) {
      00028F 90r00r0A         [24] 1067 	mov	dptr,#_enc_buffer_write_PARM_2
      000292 E0               [24] 1068 	movx	a,@dptr
      000293 FC               [12] 1069 	mov	r4,a
      000294 A3               [24] 1070 	inc	dptr
      000295 E0               [24] 1071 	movx	a,@dptr
      000296 FD               [12] 1072 	mov	r5,a
      000297 8C 02            [24] 1073 	mov	ar2,r4
      000299 8D 03            [24] 1074 	mov	ar3,r5
      00029B C3               [12] 1075 	clr	c
      00029C 74 FF            [12] 1076 	mov	a,#0xff
      00029E 9A               [12] 1077 	subb	a,r2
      00029F 74 1F            [12] 1078 	mov	a,#0x1f
      0002A1 9B               [12] 1079 	subb	a,r3
      0002A2 50 1A            [24] 1080 	jnc	00104$
                                   1081 ;	enc.c:97: printf("\n\rInvalid address: %04X\n\r", start_address);
      0002A4 C0 04            [24] 1082 	push	ar4
      0002A6 C0 05            [24] 1083 	push	ar5
      0002A8 74r8B            [12] 1084 	mov	a,#___str_4
      0002AA C0 E0            [24] 1085 	push	acc
      0002AC 74s00            [12] 1086 	mov	a,#(___str_4 >> 8)
      0002AE C0 E0            [24] 1087 	push	acc
      0002B0 74 80            [12] 1088 	mov	a,#0x80
      0002B2 C0 E0            [24] 1089 	push	acc
      0002B4 12r00r00         [24] 1090 	lcall	_printf
      0002B7 E5 81            [12] 1091 	mov	a,sp
      0002B9 24 FB            [12] 1092 	add	a,#0xfb
      0002BB F5 81            [12] 1093 	mov	sp,a
                                   1094 ;	enc.c:98: return;
      0002BD 22               [24] 1095 	ret
      0002BE                       1096 00104$:
                                   1097 ;	enc.c:101: || (start_address + num_bytes) > TX_BUFFER_END) {
      0002BE 74 E4            [12] 1098 	mov	a,#0x100 - 0x1c
      0002C0 2B               [12] 1099 	add	a,r3
      0002C1 50 13            [24] 1100 	jnc	00105$
      0002C3 8E 00            [24] 1101 	mov	ar0,r6
      0002C5 8F 01            [24] 1102 	mov	ar1,r7
      0002C7 E8               [12] 1103 	mov	a,r0
      0002C8 2A               [12] 1104 	add	a, r2
      0002C9 FA               [12] 1105 	mov	r2,a
      0002CA E9               [12] 1106 	mov	a,r1
      0002CB 3B               [12] 1107 	addc	a, r3
      0002CC FB               [12] 1108 	mov	r3,a
      0002CD C3               [12] 1109 	clr	c
      0002CE 74 FF            [12] 1110 	mov	a,#0xff
      0002D0 9A               [12] 1111 	subb	a,r2
      0002D1 74 1F            [12] 1112 	mov	a,#0x1f
      0002D3 9B               [12] 1113 	subb	a,r3
      0002D4 50 24            [24] 1114 	jnc	00106$
      0002D6                       1115 00105$:
                                   1116 ;	enc.c:102: printf("\nInvalid TX Address: Start 0x%04X, Size %d\n", start_address,
      0002D6 90r00r0F         [24] 1117 	mov	dptr,#_enc_buffer_write_num_bytes_10000_95
      0002D9 E0               [24] 1118 	movx	a,@dptr
      0002DA C0 E0            [24] 1119 	push	acc
      0002DC A3               [24] 1120 	inc	dptr
      0002DD E0               [24] 1121 	movx	a,@dptr
      0002DE C0 E0            [24] 1122 	push	acc
      0002E0 C0 04            [24] 1123 	push	ar4
      0002E2 C0 05            [24] 1124 	push	ar5
      0002E4 74rA5            [12] 1125 	mov	a,#___str_5
      0002E6 C0 E0            [24] 1126 	push	acc
      0002E8 74s00            [12] 1127 	mov	a,#(___str_5 >> 8)
      0002EA C0 E0            [24] 1128 	push	acc
      0002EC 74 80            [12] 1129 	mov	a,#0x80
      0002EE C0 E0            [24] 1130 	push	acc
      0002F0 12r00r00         [24] 1131 	lcall	_printf
      0002F3 E5 81            [12] 1132 	mov	a,sp
      0002F5 24 F9            [12] 1133 	add	a,#0xf9
      0002F7 F5 81            [12] 1134 	mov	sp,a
                                   1135 ;	enc.c:104: return;
      0002F9 22               [24] 1136 	ret
      0002FA                       1137 00106$:
                                   1138 ;	enc.c:107: if (num_bytes > 1) {
      0002FA C3               [12] 1139 	clr	c
      0002FB 74 01            [12] 1140 	mov	a,#0x01
      0002FD 9E               [12] 1141 	subb	a,r6
      0002FE 74 80            [12] 1142 	mov	a,#(0x00 ^ 0x80)
      000300 8F F0            [24] 1143 	mov	b,r7
      000302 63 F0 80         [24] 1144 	xrl	b,#0x80
      000305 95 F0            [12] 1145 	subb	a,b
      000307 50 0B            [24] 1146 	jnc	00109$
                                   1147 ;	enc.c:108: enc_set_autoinc();
      000309 C0 05            [24] 1148 	push	ar5
      00030B C0 04            [24] 1149 	push	ar4
      00030D 12r00r00         [24] 1150 	lcall	_enc_set_autoinc
      000310 D0 04            [24] 1151 	pop	ar4
      000312 D0 05            [24] 1152 	pop	ar5
      000314                       1153 00109$:
                                   1154 ;	enc.c:110: uint8_t higher_byte = (uint8_t) ((start_address >> 8) & 0xFF);
      000314 8D 07            [24] 1155 	mov	ar7,r5
                                   1156 ;	enc.c:111: uint8_t lower_byte = (uint8_t) (start_address & 0xFF);
                                   1157 ;	enc.c:113: enc_control_write(0, ENC_EWRPTH, higher_byte); // High byte
      000316 90r00r02         [24] 1158 	mov	dptr,#_enc_control_write_PARM_2
      000319 74 03            [12] 1159 	mov	a,#0x03
      00031B F0               [24] 1160 	movx	@dptr,a
      00031C 90r00r03         [24] 1161 	mov	dptr,#_enc_control_write_PARM_3
      00031F EF               [12] 1162 	mov	a,r7
      000320 F0               [24] 1163 	movx	@dptr,a
      000321 90 00 00         [24] 1164 	mov	dptr,#0x0000
      000324 C0 04            [24] 1165 	push	ar4
      000326 12r00rAF         [24] 1166 	lcall	_enc_control_write
      000329 D0 04            [24] 1167 	pop	ar4
                                   1168 ;	enc.c:114: enc_control_write(0, ENC_EWRPTL, lower_byte); //
      00032B 90r00r02         [24] 1169 	mov	dptr,#_enc_control_write_PARM_2
      00032E 74 02            [12] 1170 	mov	a,#0x02
      000330 F0               [24] 1171 	movx	@dptr,a
      000331 90r00r03         [24] 1172 	mov	dptr,#_enc_control_write_PARM_3
      000334 EC               [12] 1173 	mov	a,r4
      000335 F0               [24] 1174 	movx	@dptr,a
      000336 90 00 00         [24] 1175 	mov	dptr,#0x0000
      000339 12r00rAF         [24] 1176 	lcall	_enc_control_write
                                   1177 ;	enc.c:117: CS_LOW; // Pull CS Low
                                   1178 ;	assignBit
      00033C C2 91            [12] 1179 	clr	_P1_1
                                   1180 ;	enc.c:118: SPI_WriteByte(opcode);
      00033E 75 82 7A         [24] 1181 	mov	dpl, #0x7a
      000341 12r00r00         [24] 1182 	lcall	_SPI_WriteByte
                                   1183 ;	enc.c:121: for (int i = 0; i < num_bytes; i++) {
      000344 90r00r0F         [24] 1184 	mov	dptr,#_enc_buffer_write_num_bytes_10000_95
      000347 E0               [24] 1185 	movx	a,@dptr
      000348 FE               [12] 1186 	mov	r6,a
      000349 A3               [24] 1187 	inc	dptr
      00034A E0               [24] 1188 	movx	a,@dptr
      00034B FF               [12] 1189 	mov	r7,a
      00034C 90r00r0C         [24] 1190 	mov	dptr,#_enc_buffer_write_PARM_3
      00034F E0               [24] 1191 	movx	a,@dptr
      000350 FB               [12] 1192 	mov	r3,a
      000351 A3               [24] 1193 	inc	dptr
      000352 E0               [24] 1194 	movx	a,@dptr
      000353 FC               [12] 1195 	mov	r4,a
      000354 A3               [24] 1196 	inc	dptr
      000355 E0               [24] 1197 	movx	a,@dptr
      000356 FD               [12] 1198 	mov	r5,a
      000357 79 00            [12] 1199 	mov	r1,#0x00
      000359 7A 00            [12] 1200 	mov	r2,#0x00
      00035B                       1201 00112$:
      00035B C3               [12] 1202 	clr	c
      00035C E9               [12] 1203 	mov	a,r1
      00035D 9E               [12] 1204 	subb	a,r6
      00035E EA               [12] 1205 	mov	a,r2
      00035F 64 80            [12] 1206 	xrl	a,#0x80
      000361 8F F0            [24] 1207 	mov	b,r7
      000363 63 F0 80         [24] 1208 	xrl	b,#0x80
      000366 95 F0            [12] 1209 	subb	a,b
      000368 50 37            [24] 1210 	jnc	00110$
                                   1211 ;	enc.c:123: SPI_WriteByte(*data_ptr); // Send data
      00036A 8B 82            [24] 1212 	mov	dpl,r3
      00036C 8C 83            [24] 1213 	mov	dph,r4
      00036E 8D F0            [24] 1214 	mov	b,r5
      000370 12r00r00         [24] 1215 	lcall	__gptrget
      000373 F8               [12] 1216 	mov	r0,a
      000374 A3               [24] 1217 	inc	dptr
      000375 AB 82            [24] 1218 	mov	r3,dpl
      000377 AC 83            [24] 1219 	mov	r4,dph
      000379 88 82            [24] 1220 	mov	dpl, r0
      00037B C0 07            [24] 1221 	push	ar7
      00037D C0 06            [24] 1222 	push	ar6
      00037F C0 05            [24] 1223 	push	ar5
      000381 C0 04            [24] 1224 	push	ar4
      000383 C0 03            [24] 1225 	push	ar3
      000385 C0 02            [24] 1226 	push	ar2
      000387 C0 01            [24] 1227 	push	ar1
      000389 12r00r00         [24] 1228 	lcall	_SPI_WriteByte
      00038C D0 01            [24] 1229 	pop	ar1
      00038E D0 02            [24] 1230 	pop	ar2
      000390 D0 03            [24] 1231 	pop	ar3
      000392 D0 04            [24] 1232 	pop	ar4
      000394 D0 05            [24] 1233 	pop	ar5
      000396 D0 06            [24] 1234 	pop	ar6
      000398 D0 07            [24] 1235 	pop	ar7
                                   1236 ;	enc.c:124: data_ptr++;
                                   1237 ;	enc.c:121: for (int i = 0; i < num_bytes; i++) {
      00039A 09               [12] 1238 	inc	r1
      00039B B9 00 BD         [24] 1239 	cjne	r1,#0x00,00112$
      00039E 0A               [12] 1240 	inc	r2
      00039F 80 BA            [24] 1241 	sjmp	00112$
      0003A1                       1242 00110$:
                                   1243 ;	enc.c:126: CS_HIGH; // Pull CS High
                                   1244 ;	assignBit
      0003A1 D2 91            [12] 1245 	setb	_P1_1
                                   1246 ;	enc.c:127: }
      0003A3 22               [24] 1247 	ret
                                   1248 ;------------------------------------------------------------
                                   1249 ;Allocation info for local variables in function 'enc_buffer_read'
                                   1250 ;------------------------------------------------------------
                                   1251 ;start_address             Allocated with name '_enc_buffer_read_PARM_2'
                                   1252 ;data_ptr                  Allocated with name '_enc_buffer_read_PARM_3'
                                   1253 ;num_bytes                 Allocated with name '_enc_buffer_read_num_bytes_10000_105'
                                   1254 ;higher_byte               Allocated with name '_enc_buffer_read_higher_byte_10001_111'
                                   1255 ;lower_byte                Allocated with name '_enc_buffer_read_lower_byte_10001_111'
                                   1256 ;opcode                    Allocated with name '_enc_buffer_read_opcode_10002_112'
                                   1257 ;i                         Allocated with name '_enc_buffer_read_i_20002_113'
                                   1258 ;------------------------------------------------------------
                                   1259 ;	enc.c:130: uint16_t enc_buffer_read(int num_bytes, uint16_t start_address,
                                   1260 ;	-----------------------------------------
                                   1261 ;	 function enc_buffer_read
                                   1262 ;	-----------------------------------------
      0003A4                       1263 _enc_buffer_read:
      0003A4 AF 83            [24] 1264 	mov	r7,dph
      0003A6 E5 82            [12] 1265 	mov	a,dpl
      0003A8 90r00r16         [24] 1266 	mov	dptr,#_enc_buffer_read_num_bytes_10000_105
      0003AB F0               [24] 1267 	movx	@dptr,a
      0003AC EF               [12] 1268 	mov	a,r7
      0003AD A3               [24] 1269 	inc	dptr
      0003AE F0               [24] 1270 	movx	@dptr,a
                                   1271 ;	enc.c:132: if (num_bytes < 1) {
      0003AF 90r00r16         [24] 1272 	mov	dptr,#_enc_buffer_read_num_bytes_10000_105
      0003B2 E0               [24] 1273 	movx	a,@dptr
      0003B3 FE               [12] 1274 	mov	r6,a
      0003B4 A3               [24] 1275 	inc	dptr
      0003B5 E0               [24] 1276 	movx	a,@dptr
      0003B6 FF               [12] 1277 	mov	r7,a
      0003B7 C3               [12] 1278 	clr	c
      0003B8 EE               [12] 1279 	mov	a,r6
      0003B9 94 01            [12] 1280 	subb	a,#0x01
      0003BB EF               [12] 1281 	mov	a,r7
      0003BC 64 80            [12] 1282 	xrl	a,#0x80
      0003BE 94 80            [12] 1283 	subb	a,#0x80
      0003C0 50 1D            [24] 1284 	jnc	00102$
                                   1285 ;	enc.c:133: printf("\n\rInvalid number of bytes: %d\n\r", num_bytes);
      0003C2 C0 06            [24] 1286 	push	ar6
      0003C4 C0 07            [24] 1287 	push	ar7
      0003C6 74r6B            [12] 1288 	mov	a,#___str_3
      0003C8 C0 E0            [24] 1289 	push	acc
      0003CA 74s00            [12] 1290 	mov	a,#(___str_3 >> 8)
      0003CC C0 E0            [24] 1291 	push	acc
      0003CE 74 80            [12] 1292 	mov	a,#0x80
      0003D0 C0 E0            [24] 1293 	push	acc
      0003D2 12r00r00         [24] 1294 	lcall	_printf
      0003D5 E5 81            [12] 1295 	mov	a,sp
      0003D7 24 FB            [12] 1296 	add	a,#0xfb
      0003D9 F5 81            [12] 1297 	mov	sp,a
                                   1298 ;	enc.c:134: return 0;
      0003DB 90 00 00         [24] 1299 	mov	dptr,#0x0000
      0003DE 22               [24] 1300 	ret
      0003DF                       1301 00102$:
                                   1302 ;	enc.c:136: if (start_address > TX_BUFFER_END) {
      0003DF 90r00r11         [24] 1303 	mov	dptr,#_enc_buffer_read_PARM_2
      0003E2 E0               [24] 1304 	movx	a,@dptr
      0003E3 FC               [12] 1305 	mov	r4,a
      0003E4 A3               [24] 1306 	inc	dptr
      0003E5 E0               [24] 1307 	movx	a,@dptr
      0003E6 FD               [12] 1308 	mov	r5,a
      0003E7 8C 02            [24] 1309 	mov	ar2,r4
      0003E9 8D 03            [24] 1310 	mov	ar3,r5
      0003EB C3               [12] 1311 	clr	c
      0003EC 74 FF            [12] 1312 	mov	a,#0xff
      0003EE 9A               [12] 1313 	subb	a,r2
      0003EF 74 1F            [12] 1314 	mov	a,#0x1f
      0003F1 9B               [12] 1315 	subb	a,r3
      0003F2 50 1D            [24] 1316 	jnc	00104$
                                   1317 ;	enc.c:137: printf("\n\rInvalid address: %04X\n\r", start_address);
      0003F4 C0 04            [24] 1318 	push	ar4
      0003F6 C0 05            [24] 1319 	push	ar5
      0003F8 74r8B            [12] 1320 	mov	a,#___str_4
      0003FA C0 E0            [24] 1321 	push	acc
      0003FC 74s00            [12] 1322 	mov	a,#(___str_4 >> 8)
      0003FE C0 E0            [24] 1323 	push	acc
      000400 74 80            [12] 1324 	mov	a,#0x80
      000402 C0 E0            [24] 1325 	push	acc
      000404 12r00r00         [24] 1326 	lcall	_printf
      000407 E5 81            [12] 1327 	mov	a,sp
      000409 24 FB            [12] 1328 	add	a,#0xfb
      00040B F5 81            [12] 1329 	mov	sp,a
                                   1330 ;	enc.c:138: return 0;
      00040D 90 00 00         [24] 1331 	mov	dptr,#0x0000
      000410 22               [24] 1332 	ret
      000411                       1333 00104$:
                                   1334 ;	enc.c:141: if ((start_address + num_bytes) > RX_BUFFER_END) {
      000411 8E 00            [24] 1335 	mov	ar0,r6
      000413 8F 01            [24] 1336 	mov	ar1,r7
      000415 E8               [12] 1337 	mov	a,r0
      000416 2A               [12] 1338 	add	a, r2
      000417 FA               [12] 1339 	mov	r2,a
      000418 E9               [12] 1340 	mov	a,r1
      000419 3B               [12] 1341 	addc	a, r3
      00041A FB               [12] 1342 	mov	r3,a
      00041B C3               [12] 1343 	clr	c
      00041C 74 FF            [12] 1344 	mov	a,#0xff
      00041E 9A               [12] 1345 	subb	a,r2
      00041F 74 1B            [12] 1346 	mov	a,#0x1b
      000421 9B               [12] 1347 	subb	a,r3
      000422 50 21            [24] 1348 	jnc	00106$
                                   1349 ;	enc.c:142: printf("\nInvalid RX Address: Start 0x%04X, Size %d\n", start_address,
      000424 C0 06            [24] 1350 	push	ar6
      000426 C0 07            [24] 1351 	push	ar7
      000428 C0 04            [24] 1352 	push	ar4
      00042A C0 05            [24] 1353 	push	ar5
      00042C 74rD1            [12] 1354 	mov	a,#___str_6
      00042E C0 E0            [24] 1355 	push	acc
      000430 74s00            [12] 1356 	mov	a,#(___str_6 >> 8)
      000432 C0 E0            [24] 1357 	push	acc
      000434 74 80            [12] 1358 	mov	a,#0x80
      000436 C0 E0            [24] 1359 	push	acc
      000438 12r00r00         [24] 1360 	lcall	_printf
      00043B E5 81            [12] 1361 	mov	a,sp
      00043D 24 F9            [12] 1362 	add	a,#0xf9
      00043F F5 81            [12] 1363 	mov	sp,a
                                   1364 ;	enc.c:144: return 0;
      000441 90 00 00         [24] 1365 	mov	dptr,#0x0000
      000444 22               [24] 1366 	ret
      000445                       1367 00106$:
                                   1368 ;	enc.c:147: if (num_bytes > 1) {
      000445 C3               [12] 1369 	clr	c
      000446 74 01            [12] 1370 	mov	a,#0x01
      000448 9E               [12] 1371 	subb	a,r6
      000449 74 80            [12] 1372 	mov	a,#(0x00 ^ 0x80)
      00044B 8F F0            [24] 1373 	mov	b,r7
      00044D 63 F0 80         [24] 1374 	xrl	b,#0x80
      000450 95 F0            [12] 1375 	subb	a,b
      000452 50 0B            [24] 1376 	jnc	00108$
                                   1377 ;	enc.c:148: enc_set_autoinc();
      000454 C0 05            [24] 1378 	push	ar5
      000456 C0 04            [24] 1379 	push	ar4
      000458 12r00r00         [24] 1380 	lcall	_enc_set_autoinc
      00045B D0 04            [24] 1381 	pop	ar4
      00045D D0 05            [24] 1382 	pop	ar5
      00045F                       1383 00108$:
                                   1384 ;	enc.c:151: uint8_t higher_byte = (uint8_t) ((start_address >> 8) & 0xFF);
      00045F 8D 07            [24] 1385 	mov	ar7,r5
                                   1386 ;	enc.c:152: uint8_t lower_byte = (uint8_t) (start_address & 0xFF);
                                   1387 ;	enc.c:153: enc_control_write(0, ENC_ERDPTH, higher_byte); // ERDPTH
      000461 90r00r02         [24] 1388 	mov	dptr,#_enc_control_write_PARM_2
      000464 74 01            [12] 1389 	mov	a,#0x01
      000466 F0               [24] 1390 	movx	@dptr,a
      000467 90r00r03         [24] 1391 	mov	dptr,#_enc_control_write_PARM_3
      00046A EF               [12] 1392 	mov	a,r7
      00046B F0               [24] 1393 	movx	@dptr,a
      00046C 90 00 00         [24] 1394 	mov	dptr,#0x0000
      00046F C0 04            [24] 1395 	push	ar4
      000471 12r00rAF         [24] 1396 	lcall	_enc_control_write
      000474 D0 04            [24] 1397 	pop	ar4
                                   1398 ;	enc.c:154: enc_control_write(0, ENC_ERDPTL, lower_byte); // ERDPTL
      000476 90r00r02         [24] 1399 	mov	dptr,#_enc_control_write_PARM_2
      000479 E4               [12] 1400 	clr	a
      00047A F0               [24] 1401 	movx	@dptr,a
      00047B 90r00r03         [24] 1402 	mov	dptr,#_enc_control_write_PARM_3
      00047E EC               [12] 1403 	mov	a,r4
      00047F F0               [24] 1404 	movx	@dptr,a
      000480 90 00 00         [24] 1405 	mov	dptr,#0x0000
      000483 12r00rAF         [24] 1406 	lcall	_enc_control_write
                                   1407 ;	enc.c:158: CS_LOW; // Pull CS Low
                                   1408 ;	assignBit
      000486 C2 91            [12] 1409 	clr	_P1_1
                                   1410 ;	enc.c:159: SPI_WriteByte(opcode);
      000488 75 82 3A         [24] 1411 	mov	dpl, #0x3a
      00048B 12r00r00         [24] 1412 	lcall	_SPI_WriteByte
                                   1413 ;	enc.c:160: for (int i = 0; i < num_bytes; i++) {
      00048E 90r00r16         [24] 1414 	mov	dptr,#_enc_buffer_read_num_bytes_10000_105
      000491 E0               [24] 1415 	movx	a,@dptr
      000492 FE               [12] 1416 	mov	r6,a
      000493 A3               [24] 1417 	inc	dptr
      000494 E0               [24] 1418 	movx	a,@dptr
      000495 FF               [12] 1419 	mov	r7,a
      000496 90r00r13         [24] 1420 	mov	dptr,#_enc_buffer_read_PARM_3
      000499 E0               [24] 1421 	movx	a,@dptr
      00049A FB               [12] 1422 	mov	r3,a
      00049B A3               [24] 1423 	inc	dptr
      00049C E0               [24] 1424 	movx	a,@dptr
      00049D FC               [12] 1425 	mov	r4,a
      00049E A3               [24] 1426 	inc	dptr
      00049F E0               [24] 1427 	movx	a,@dptr
      0004A0 FD               [12] 1428 	mov	r5,a
      0004A1 79 00            [12] 1429 	mov	r1,#0x00
      0004A3 7A 00            [12] 1430 	mov	r2,#0x00
      0004A5                       1431 00111$:
      0004A5 C3               [12] 1432 	clr	c
      0004A6 E9               [12] 1433 	mov	a,r1
      0004A7 9E               [12] 1434 	subb	a,r6
      0004A8 EA               [12] 1435 	mov	a,r2
      0004A9 64 80            [12] 1436 	xrl	a,#0x80
      0004AB 8F F0            [24] 1437 	mov	b,r7
      0004AD 63 F0 80         [24] 1438 	xrl	b,#0x80
      0004B0 95 F0            [12] 1439 	subb	a,b
      0004B2 50 37            [24] 1440 	jnc	00109$
                                   1441 ;	enc.c:161: *data_ptr = SPI_ReadByte(); // Read data
      0004B4 C0 07            [24] 1442 	push	ar7
      0004B6 C0 06            [24] 1443 	push	ar6
      0004B8 C0 05            [24] 1444 	push	ar5
      0004BA C0 04            [24] 1445 	push	ar4
      0004BC C0 03            [24] 1446 	push	ar3
      0004BE C0 02            [24] 1447 	push	ar2
      0004C0 C0 01            [24] 1448 	push	ar1
      0004C2 12r00r00         [24] 1449 	lcall	_SPI_ReadByte
      0004C5 A8 82            [24] 1450 	mov	r0, dpl
      0004C7 D0 01            [24] 1451 	pop	ar1
      0004C9 D0 02            [24] 1452 	pop	ar2
      0004CB D0 03            [24] 1453 	pop	ar3
      0004CD D0 04            [24] 1454 	pop	ar4
      0004CF D0 05            [24] 1455 	pop	ar5
      0004D1 D0 06            [24] 1456 	pop	ar6
      0004D3 D0 07            [24] 1457 	pop	ar7
      0004D5 8B 82            [24] 1458 	mov	dpl,r3
      0004D7 8C 83            [24] 1459 	mov	dph,r4
      0004D9 8D F0            [24] 1460 	mov	b,r5
      0004DB E8               [12] 1461 	mov	a,r0
      0004DC 12r00r00         [24] 1462 	lcall	__gptrput
      0004DF A3               [24] 1463 	inc	dptr
      0004E0 AB 82            [24] 1464 	mov	r3,dpl
      0004E2 AC 83            [24] 1465 	mov	r4,dph
                                   1466 ;	enc.c:163: data_ptr++;
                                   1467 ;	enc.c:160: for (int i = 0; i < num_bytes; i++) {
      0004E4 09               [12] 1468 	inc	r1
      0004E5 B9 00 BD         [24] 1469 	cjne	r1,#0x00,00111$
      0004E8 0A               [12] 1470 	inc	r2
      0004E9 80 BA            [24] 1471 	sjmp	00111$
      0004EB                       1472 00109$:
                                   1473 ;	enc.c:165: CS_HIGH;// Pull CS High
                                   1474 ;	assignBit
      0004EB D2 91            [12] 1475 	setb	_P1_1
                                   1476 ;	enc.c:166: return (uint16_t) num_bytes;
      0004ED 8E 82            [24] 1477 	mov	dpl, r6
      0004EF 8F 83            [24] 1478 	mov	dph, r7
                                   1479 ;	enc.c:167: }
      0004F1 22               [24] 1480 	ret
                                   1481 ;------------------------------------------------------------
                                   1482 ;Allocation info for local variables in function 'enc_mac_read'
                                   1483 ;------------------------------------------------------------
                                   1484 ;bank                      Allocated with name '_enc_mac_read_PARM_2'
                                   1485 ;addr                      Allocated with name '_enc_mac_read_addr_10000_115'
                                   1486 ;data                      Allocated with name '_enc_mac_read_data_10001_118'
                                   1487 ;------------------------------------------------------------
                                   1488 ;	enc.c:169: uint8_t enc_mac_read(uint8_t addr, uint8_t bank) {
                                   1489 ;	-----------------------------------------
                                   1490 ;	 function enc_mac_read
                                   1491 ;	-----------------------------------------
      0004F2                       1492 _enc_mac_read:
      0004F2 E5 82            [12] 1493 	mov	a,dpl
      0004F4 90r00r19         [24] 1494 	mov	dptr,#_enc_mac_read_addr_10000_115
      0004F7 F0               [24] 1495 	movx	@dptr,a
                                   1496 ;	enc.c:170: if (addr > ENC_MAC_MAX_ADDRESS) {
      0004F8 E0               [24] 1497 	movx	a,@dptr
      0004F9 FF               [12] 1498 	mov  r7,a
      0004FA 24 E0            [12] 1499 	add	a,#0xff - 0x1f
      0004FC 50 19            [24] 1500 	jnc	00102$
                                   1501 ;	enc.c:171: printf("\nInvalid address: MAC register address range [0, 0x1F]\n");
      0004FE 74rFD            [12] 1502 	mov	a,#___str_7
      000500 C0 E0            [24] 1503 	push	acc
      000502 74s00            [12] 1504 	mov	a,#(___str_7 >> 8)
      000504 C0 E0            [24] 1505 	push	acc
      000506 74 80            [12] 1506 	mov	a,#0x80
      000508 C0 E0            [24] 1507 	push	acc
      00050A 12r00r00         [24] 1508 	lcall	_printf
      00050D 15 81            [12] 1509 	dec	sp
      00050F 15 81            [12] 1510 	dec	sp
      000511 15 81            [12] 1511 	dec	sp
                                   1512 ;	enc.c:172: return 0;
      000513 75 82 00         [24] 1513 	mov	dpl, #0x00
      000516 22               [24] 1514 	ret
      000517                       1515 00102$:
                                   1516 ;	enc.c:175: enc_select_reg_bank(bank);
      000517 90r00r18         [24] 1517 	mov	dptr,#_enc_mac_read_PARM_2
      00051A E0               [24] 1518 	movx	a,@dptr
      00051B F5 82            [12] 1519 	mov	dpl,a
      00051D C0 07            [24] 1520 	push	ar7
      00051F 12r00r26         [24] 1521 	lcall	_enc_select_reg_bank
      000522 D0 07            [24] 1522 	pop	ar7
                                   1523 ;	enc.c:177: CS_LOW;
                                   1524 ;	assignBit
      000524 C2 91            [12] 1525 	clr	_P1_1
                                   1526 ;	enc.c:180: SPI_WriteByte(addr);           // Send the address
      000526 8F 82            [24] 1527 	mov	dpl, r7
      000528 C0 07            [24] 1528 	push	ar7
      00052A 12r00r00         [24] 1529 	lcall	_SPI_WriteByte
                                   1530 ;	enc.c:182: uint8_t data = SPI_ReadByte(); // Read the data
      00052D 12r00r00         [24] 1531 	lcall	_SPI_ReadByte
      000530 AE 82            [24] 1532 	mov	r6, dpl
      000532 D0 07            [24] 1533 	pop	ar7
                                   1534 ;	enc.c:185: CS_HIGH;
                                   1535 ;	assignBit
      000534 D2 91            [12] 1536 	setb	_P1_1
                                   1537 ;	enc.c:186: printf("Read: Address 0x%02X, Data 0x%02X\n", addr, data);
      000536 8E 04            [24] 1538 	mov	ar4,r6
      000538 7D 00            [12] 1539 	mov	r5,#0x00
      00053A 7B 00            [12] 1540 	mov	r3,#0x00
      00053C C0 06            [24] 1541 	push	ar6
      00053E C0 04            [24] 1542 	push	ar4
      000540 C0 05            [24] 1543 	push	ar5
      000542 C0 07            [24] 1544 	push	ar7
      000544 C0 03            [24] 1545 	push	ar3
      000546 74r35            [12] 1546 	mov	a,#___str_8
      000548 C0 E0            [24] 1547 	push	acc
      00054A 74s01            [12] 1548 	mov	a,#(___str_8 >> 8)
      00054C C0 E0            [24] 1549 	push	acc
      00054E 74 80            [12] 1550 	mov	a,#0x80
      000550 C0 E0            [24] 1551 	push	acc
      000552 12r00r00         [24] 1552 	lcall	_printf
      000555 E5 81            [12] 1553 	mov	a,sp
      000557 24 F9            [12] 1554 	add	a,#0xf9
      000559 F5 81            [12] 1555 	mov	sp,a
      00055B D0 06            [24] 1556 	pop	ar6
                                   1557 ;	enc.c:188: return data;
      00055D 8E 82            [24] 1558 	mov	dpl, r6
                                   1559 ;	enc.c:189: }
      00055F 22               [24] 1560 	ret
                                   1561 ;------------------------------------------------------------
                                   1562 ;Allocation info for local variables in function 'enc_busy_wait'
                                   1563 ;------------------------------------------------------------
                                   1564 ;data                      Allocated with name '_enc_busy_wait_data_10000_120'
                                   1565 ;------------------------------------------------------------
                                   1566 ;	enc.c:191: void enc_busy_wait(void) {
                                   1567 ;	-----------------------------------------
                                   1568 ;	 function enc_busy_wait
                                   1569 ;	-----------------------------------------
      000560                       1570 _enc_busy_wait:
                                   1571 ;	enc.c:192: uint8_t data = enc_mac_read(0x0A, 3); // Read ESTAT register (bank 3)
      000560 90r00r18         [24] 1572 	mov	dptr,#_enc_mac_read_PARM_2
      000563 74 03            [12] 1573 	mov	a,#0x03
      000565 F0               [24] 1574 	movx	@dptr,a
      000566 75 82 0A         [24] 1575 	mov	dpl, #0x0a
      000569 12r04rF2         [24] 1576 	lcall	_enc_mac_read
      00056C E5 82            [12] 1577 	mov	a, dpl
      00056E 90r00r1A         [24] 1578 	mov	dptr,#_enc_busy_wait_data_10000_120
      000571 F0               [24] 1579 	movx	@dptr,a
                                   1580 ;	enc.c:193: while (data & 0x01) {                 // Wait until BUSY bit clears
      000572                       1581 00101$:
      000572 90r00r1A         [24] 1582 	mov	dptr,#_enc_busy_wait_data_10000_120
      000575 E0               [24] 1583 	movx	a,@dptr
      000576 30 E0 14         [24] 1584 	jnb	acc.0,00104$
                                   1585 ;	enc.c:194: data = enc_mac_read(0x0A, 3);
      000579 90r00r18         [24] 1586 	mov	dptr,#_enc_mac_read_PARM_2
      00057C 74 03            [12] 1587 	mov	a,#0x03
      00057E F0               [24] 1588 	movx	@dptr,a
      00057F 75 82 0A         [24] 1589 	mov	dpl, #0x0a
      000582 12r04rF2         [24] 1590 	lcall	_enc_mac_read
      000585 E5 82            [12] 1591 	mov	a, dpl
      000587 90r00r1A         [24] 1592 	mov	dptr,#_enc_busy_wait_data_10000_120
      00058A F0               [24] 1593 	movx	@dptr,a
      00058B 80 E5            [24] 1594 	sjmp	00101$
      00058D                       1595 00104$:
                                   1596 ;	enc.c:196: }
      00058D 22               [24] 1597 	ret
                                   1598 ;------------------------------------------------------------
                                   1599 ;Allocation info for local variables in function 'enc_phy_read'
                                   1600 ;------------------------------------------------------------
                                   1601 ;addr                      Allocated with name '_enc_phy_read_addr_10000_122'
                                   1602 ;data_LSB                  Allocated with name '_enc_phy_read_data_LSB_10001_124'
                                   1603 ;data_MSB                  Allocated with name '_enc_phy_read_data_MSB_10001_124'
                                   1604 ;data                      Allocated with name '_enc_phy_read_data_10001_124'
                                   1605 ;------------------------------------------------------------
                                   1606 ;	enc.c:197: uint16_t enc_phy_read(uint8_t addr) {
                                   1607 ;	-----------------------------------------
                                   1608 ;	 function enc_phy_read
                                   1609 ;	-----------------------------------------
      00058E                       1610 _enc_phy_read:
      00058E E5 82            [12] 1611 	mov	a,dpl
      000590 90r00r1B         [24] 1612 	mov	dptr,#_enc_phy_read_addr_10000_122
      000593 F0               [24] 1613 	movx	@dptr,a
                                   1614 ;	enc.c:198: enc_control_write(2, ENC_MIREGADR, addr);
      000594 E0               [24] 1615 	movx	a,@dptr
      000595 FF               [12] 1616 	mov	r7,a
      000596 90r00r02         [24] 1617 	mov	dptr,#_enc_control_write_PARM_2
      000599 74 14            [12] 1618 	mov	a,#0x14
      00059B F0               [24] 1619 	movx	@dptr,a
      00059C 90r00r03         [24] 1620 	mov	dptr,#_enc_control_write_PARM_3
      00059F EF               [12] 1621 	mov	a,r7
      0005A0 F0               [24] 1622 	movx	@dptr,a
      0005A1 90 00 02         [24] 1623 	mov	dptr,#0x0002
      0005A4 C0 07            [24] 1624 	push	ar7
      0005A6 12r00rAF         [24] 1625 	lcall	_enc_control_write
                                   1626 ;	enc.c:199: enc_control_write(2, ENC_MICMD, 1);				//MICMD.MIIRD bit set
      0005A9 90r00r02         [24] 1627 	mov	dptr,#_enc_control_write_PARM_2
      0005AC 74 12            [12] 1628 	mov	a,#0x12
      0005AE F0               [24] 1629 	movx	@dptr,a
      0005AF 90r00r03         [24] 1630 	mov	dptr,#_enc_control_write_PARM_3
      0005B2 74 01            [12] 1631 	mov	a,#0x01
      0005B4 F0               [24] 1632 	movx	@dptr,a
      0005B5 90 00 02         [24] 1633 	mov	dptr,#0x0002
      0005B8 12r00rAF         [24] 1634 	lcall	_enc_control_write
                                   1635 ;	enc.c:201: enc_busy_wait();
      0005BB 12r05r60         [24] 1636 	lcall	_enc_busy_wait
                                   1637 ;	enc.c:203: enc_control_write(2, ENC_MICMD, 0);				//MICMD.MIIRD bit cleared
      0005BE 90r00r02         [24] 1638 	mov	dptr,#_enc_control_write_PARM_2
      0005C1 74 12            [12] 1639 	mov	a,#0x12
      0005C3 F0               [24] 1640 	movx	@dptr,a
      0005C4 90r00r03         [24] 1641 	mov	dptr,#_enc_control_write_PARM_3
      0005C7 E4               [12] 1642 	clr	a
      0005C8 F0               [24] 1643 	movx	@dptr,a
      0005C9 90 00 02         [24] 1644 	mov	dptr,#0x0002
      0005CC 12r00rAF         [24] 1645 	lcall	_enc_control_write
                                   1646 ;	enc.c:205: uint16_t data_LSB = enc_mac_read(ENC_MIRDL, 2);
      0005CF 90r00r18         [24] 1647 	mov	dptr,#_enc_mac_read_PARM_2
      0005D2 74 02            [12] 1648 	mov	a,#0x02
      0005D4 F0               [24] 1649 	movx	@dptr,a
      0005D5 75 82 18         [24] 1650 	mov	dpl, #0x18
      0005D8 12r04rF2         [24] 1651 	lcall	_enc_mac_read
      0005DB AE 82            [24] 1652 	mov	r6, dpl
      0005DD 7D 00            [12] 1653 	mov	r5,#0x00
                                   1654 ;	enc.c:206: uint16_t data_MSB = enc_mac_read(ENC_MIRDH, 2);
      0005DF 90r00r18         [24] 1655 	mov	dptr,#_enc_mac_read_PARM_2
      0005E2 74 02            [12] 1656 	mov	a,#0x02
      0005E4 F0               [24] 1657 	movx	@dptr,a
      0005E5 75 82 19         [24] 1658 	mov	dpl, #0x19
      0005E8 C0 06            [24] 1659 	push	ar6
      0005EA C0 05            [24] 1660 	push	ar5
      0005EC 12r04rF2         [24] 1661 	lcall	_enc_mac_read
      0005EF AC 82            [24] 1662 	mov	r4, dpl
      0005F1 D0 05            [24] 1663 	pop	ar5
      0005F3 D0 06            [24] 1664 	pop	ar6
      0005F5 D0 07            [24] 1665 	pop	ar7
                                   1666 ;	enc.c:208: uint16_t data = (data_MSB << 8) + data_LSB;
      0005F7 8C 03            [24] 1667 	mov	ar3,r4
      0005F9 7C 00            [12] 1668 	mov	r4,#0x00
      0005FB EE               [12] 1669 	mov	a,r6
      0005FC 2C               [12] 1670 	add	a, r4
      0005FD FE               [12] 1671 	mov	r6,a
      0005FE ED               [12] 1672 	mov	a,r5
      0005FF 3B               [12] 1673 	addc	a, r3
      000600 FD               [12] 1674 	mov	r5,a
                                   1675 ;	enc.c:209: printf("PHY Read: Address 0x%02X, Data 0x%04X\n\r", addr, data);
      000601 C0 06            [24] 1676 	push	ar6
      000603 C0 05            [24] 1677 	push	ar5
      000605 C0 06            [24] 1678 	push	ar6
      000607 C0 05            [24] 1679 	push	ar5
      000609 C0 07            [24] 1680 	push	ar7
      00060B C0 04            [24] 1681 	push	ar4
      00060D 74r58            [12] 1682 	mov	a,#___str_9
      00060F C0 E0            [24] 1683 	push	acc
      000611 74s01            [12] 1684 	mov	a,#(___str_9 >> 8)
      000613 C0 E0            [24] 1685 	push	acc
      000615 74 80            [12] 1686 	mov	a,#0x80
      000617 C0 E0            [24] 1687 	push	acc
      000619 12r00r00         [24] 1688 	lcall	_printf
      00061C E5 81            [12] 1689 	mov	a,sp
      00061E 24 F9            [12] 1690 	add	a,#0xf9
      000620 F5 81            [12] 1691 	mov	sp,a
      000622 D0 05            [24] 1692 	pop	ar5
      000624 D0 06            [24] 1693 	pop	ar6
                                   1694 ;	enc.c:210: return data;
      000626 8E 82            [24] 1695 	mov	dpl, r6
      000628 8D 83            [24] 1696 	mov	dph, r5
                                   1697 ;	enc.c:211: }
      00062A 22               [24] 1698 	ret
                                   1699 ;------------------------------------------------------------
                                   1700 ;Allocation info for local variables in function 'enc_phy_write'
                                   1701 ;------------------------------------------------------------
                                   1702 ;data                      Allocated with name '_enc_phy_write_PARM_2'
                                   1703 ;addr                      Allocated with name '_enc_phy_write_addr_10000_125'
                                   1704 ;------------------------------------------------------------
                                   1705 ;	enc.c:213: void enc_phy_write(uint8_t addr, uint16_t data) {
                                   1706 ;	-----------------------------------------
                                   1707 ;	 function enc_phy_write
                                   1708 ;	-----------------------------------------
      00062B                       1709 _enc_phy_write:
      00062B E5 82            [12] 1710 	mov	a,dpl
      00062D 90r00r1E         [24] 1711 	mov	dptr,#_enc_phy_write_addr_10000_125
      000630 F0               [24] 1712 	movx	@dptr,a
                                   1713 ;	enc.c:214: enc_control_write(2, ENC_MIREGADR, addr);
      000631 E0               [24] 1714 	movx	a,@dptr
      000632 FF               [12] 1715 	mov	r7,a
      000633 90r00r02         [24] 1716 	mov	dptr,#_enc_control_write_PARM_2
      000636 74 14            [12] 1717 	mov	a,#0x14
      000638 F0               [24] 1718 	movx	@dptr,a
      000639 90r00r03         [24] 1719 	mov	dptr,#_enc_control_write_PARM_3
      00063C EF               [12] 1720 	mov	a,r7
      00063D F0               [24] 1721 	movx	@dptr,a
      00063E 90 00 02         [24] 1722 	mov	dptr,#0x0002
      000641 C0 07            [24] 1723 	push	ar7
      000643 12r00rAF         [24] 1724 	lcall	_enc_control_write
                                   1725 ;	enc.c:215: enc_control_write(2, ENC_MIWRL, (uint8_t) (data & 0xFF));
      000646 90r00r1C         [24] 1726 	mov	dptr,#_enc_phy_write_PARM_2
      000649 E0               [24] 1727 	movx	a,@dptr
      00064A FD               [12] 1728 	mov	r5,a
      00064B A3               [24] 1729 	inc	dptr
      00064C E0               [24] 1730 	movx	a,@dptr
      00064D FE               [12] 1731 	mov	r6,a
      00064E 8D 04            [24] 1732 	mov	ar4,r5
      000650 90r00r02         [24] 1733 	mov	dptr,#_enc_control_write_PARM_2
      000653 74 16            [12] 1734 	mov	a,#0x16
      000655 F0               [24] 1735 	movx	@dptr,a
      000656 90r00r03         [24] 1736 	mov	dptr,#_enc_control_write_PARM_3
      000659 EC               [12] 1737 	mov	a,r4
      00065A F0               [24] 1738 	movx	@dptr,a
      00065B 90 00 02         [24] 1739 	mov	dptr,#0x0002
      00065E C0 06            [24] 1740 	push	ar6
      000660 C0 05            [24] 1741 	push	ar5
      000662 12r00rAF         [24] 1742 	lcall	_enc_control_write
      000665 D0 05            [24] 1743 	pop	ar5
      000667 D0 06            [24] 1744 	pop	ar6
                                   1745 ;	enc.c:216: enc_control_write(2, ENC_MIWRH, (uint8_t) ((data >> 8) & 0xFF));
      000669 8E 04            [24] 1746 	mov	ar4,r6
      00066B 90r00r02         [24] 1747 	mov	dptr,#_enc_control_write_PARM_2
      00066E 74 17            [12] 1748 	mov	a,#0x17
      000670 F0               [24] 1749 	movx	@dptr,a
      000671 90r00r03         [24] 1750 	mov	dptr,#_enc_control_write_PARM_3
      000674 EC               [12] 1751 	mov	a,r4
      000675 F0               [24] 1752 	movx	@dptr,a
      000676 90 00 02         [24] 1753 	mov	dptr,#0x0002
      000679 C0 06            [24] 1754 	push	ar6
      00067B C0 05            [24] 1755 	push	ar5
      00067D 12r00rAF         [24] 1756 	lcall	_enc_control_write
      000680 D0 05            [24] 1757 	pop	ar5
      000682 D0 06            [24] 1758 	pop	ar6
      000684 D0 07            [24] 1759 	pop	ar7
                                   1760 ;	enc.c:217: printf("PHY Write: Address 0x%02X, Data 0x%04X\n\r", addr, data);
      000686 7C 00            [12] 1761 	mov	r4,#0x00
      000688 C0 05            [24] 1762 	push	ar5
      00068A C0 06            [24] 1763 	push	ar6
      00068C C0 07            [24] 1764 	push	ar7
      00068E C0 04            [24] 1765 	push	ar4
      000690 74r80            [12] 1766 	mov	a,#___str_10
      000692 C0 E0            [24] 1767 	push	acc
      000694 74s01            [12] 1768 	mov	a,#(___str_10 >> 8)
      000696 C0 E0            [24] 1769 	push	acc
      000698 74 80            [12] 1770 	mov	a,#0x80
      00069A C0 E0            [24] 1771 	push	acc
      00069C 12r00r00         [24] 1772 	lcall	_printf
      00069F E5 81            [12] 1773 	mov	a,sp
      0006A1 24 F9            [12] 1774 	add	a,#0xf9
      0006A3 F5 81            [12] 1775 	mov	sp,a
                                   1776 ;	enc.c:218: }
      0006A5 22               [24] 1777 	ret
                                   1778 ;------------------------------------------------------------
                                   1779 ;Allocation info for local variables in function 'enc_eth_read'
                                   1780 ;------------------------------------------------------------
                                   1781 ;bank                      Allocated with name '_enc_eth_read_PARM_2'
                                   1782 ;addr                      Allocated with name '_enc_eth_read_addr_10000_127'
                                   1783 ;data                      Allocated with name '_enc_eth_read_data_10001_130'
                                   1784 ;------------------------------------------------------------
                                   1785 ;	enc.c:220: uint8_t enc_eth_read(uint8_t addr, uint8_t bank) {
                                   1786 ;	-----------------------------------------
                                   1787 ;	 function enc_eth_read
                                   1788 ;	-----------------------------------------
      0006A6                       1789 _enc_eth_read:
      0006A6 E5 82            [12] 1790 	mov	a,dpl
      0006A8 90r00r20         [24] 1791 	mov	dptr,#_enc_eth_read_addr_10000_127
      0006AB F0               [24] 1792 	movx	@dptr,a
                                   1793 ;	enc.c:221: if (addr > ENC_MAC_MAX_ADDRESS) {
      0006AC E0               [24] 1794 	movx	a,@dptr
      0006AD FF               [12] 1795 	mov  r7,a
      0006AE 24 E0            [12] 1796 	add	a,#0xff - 0x1f
      0006B0 50 19            [24] 1797 	jnc	00102$
                                   1798 ;	enc.c:222: printf("\nInvalid address: MAC register address range [0, 0x1F]\n");
      0006B2 C0 07            [24] 1799 	push	ar7
      0006B4 74rFD            [12] 1800 	mov	a,#___str_7
      0006B6 C0 E0            [24] 1801 	push	acc
      0006B8 74s00            [12] 1802 	mov	a,#(___str_7 >> 8)
      0006BA C0 E0            [24] 1803 	push	acc
      0006BC 74 80            [12] 1804 	mov	a,#0x80
      0006BE C0 E0            [24] 1805 	push	acc
      0006C0 12r00r00         [24] 1806 	lcall	_printf
      0006C3 15 81            [12] 1807 	dec	sp
      0006C5 15 81            [12] 1808 	dec	sp
      0006C7 15 81            [12] 1809 	dec	sp
      0006C9 D0 07            [24] 1810 	pop	ar7
      0006CB                       1811 00102$:
                                   1812 ;	enc.c:225: enc_select_reg_bank(bank);
      0006CB 90r00r1F         [24] 1813 	mov	dptr,#_enc_eth_read_PARM_2
      0006CE E0               [24] 1814 	movx	a,@dptr
      0006CF F5 82            [12] 1815 	mov	dpl,a
      0006D1 C0 07            [24] 1816 	push	ar7
      0006D3 12r00r26         [24] 1817 	lcall	_enc_select_reg_bank
      0006D6 D0 07            [24] 1818 	pop	ar7
                                   1819 ;	enc.c:227: CS_LOW;
                                   1820 ;	assignBit
      0006D8 C2 91            [12] 1821 	clr	_P1_1
                                   1822 ;	enc.c:230: SPI_WriteByte(addr);           // Send the address
      0006DA 8F 82            [24] 1823 	mov	dpl, r7
      0006DC 12r00r00         [24] 1824 	lcall	_SPI_WriteByte
                                   1825 ;	enc.c:232: uint8_t data = SPI_ReadByte(); // Read the data
      0006DF 12r00r00         [24] 1826 	lcall	_SPI_ReadByte
      0006E2 AF 82            [24] 1827 	mov	r7, dpl
                                   1828 ;	enc.c:235: CS_HIGH;
                                   1829 ;	assignBit
      0006E4 D2 91            [12] 1830 	setb	_P1_1
                                   1831 ;	enc.c:237: return data;
      0006E6 8F 82            [24] 1832 	mov	dpl, r7
                                   1833 ;	enc.c:238: }
      0006E8 22               [24] 1834 	ret
                                   1835 ;------------------------------------------------------------
                                   1836 ;Allocation info for local variables in function 'enc_reset'
                                   1837 ;------------------------------------------------------------
                                   1838 ;	enc.c:240: void enc_reset(void) {
                                   1839 ;	-----------------------------------------
                                   1840 ;	 function enc_reset
                                   1841 ;	-----------------------------------------
      0006E9                       1842 _enc_reset:
                                   1843 ;	enc.c:241: CS_LOW;
                                   1844 ;	assignBit
      0006E9 C2 91            [12] 1845 	clr	_P1_1
                                   1846 ;	enc.c:243: SPI_WriteByte(0XFF);
      0006EB 75 82 FF         [24] 1847 	mov	dpl, #0xff
      0006EE 12r00r00         [24] 1848 	lcall	_SPI_WriteByte
                                   1849 ;	enc.c:245: CS_HIGH;
                                   1850 ;	assignBit
      0006F1 D2 91            [12] 1851 	setb	_P1_1
                                   1852 ;	enc.c:247: }
      0006F3 22               [24] 1853 	ret
                                   1854 ;------------------------------------------------------------
                                   1855 ;Allocation info for local variables in function 'enc_init'
                                   1856 ;------------------------------------------------------------
                                   1857 ;sloc0                     Allocated with name '_enc_init_sloc0_1_0'
                                   1858 ;sloc1                     Allocated with name '_enc_init_sloc1_1_0'
                                   1859 ;sloc2                     Allocated with name '_enc_init_sloc2_1_0'
                                   1860 ;sloc3                     Allocated with name '_enc_init_sloc3_1_0'
                                   1861 ;mac                       Allocated with name '_enc_init_mac_10000_133'
                                   1862 ;rx_start                  Allocated with name '_enc_init_rx_start_10001_135'
                                   1863 ;rx_end                    Allocated with name '_enc_init_rx_end_10001_135'
                                   1864 ;tx_start                  Allocated with name '_enc_init_tx_start_10001_135'
                                   1865 ;tx_end                    Allocated with name '_enc_init_tx_end_10001_135'
                                   1866 ;read_macon1               Allocated with name '_enc_init_read_macon1_10002_136'
                                   1867 ;rev                       Allocated with name '_enc_init_rev_10003_137'
                                   1868 ;------------------------------------------------------------
                                   1869 ;	enc.c:251: void enc_init(const uint8_t *mac) {
                                   1870 ;	-----------------------------------------
                                   1871 ;	 function enc_init
                                   1872 ;	-----------------------------------------
      0006F4                       1873 _enc_init:
      0006F4 AF F0            [24] 1874 	mov	r7,b
      0006F6 AE 83            [24] 1875 	mov	r6,dph
      0006F8 E5 82            [12] 1876 	mov	a,dpl
      0006FA 90r00r21         [24] 1877 	mov	dptr,#_enc_init_mac_10000_133
      0006FD F0               [24] 1878 	movx	@dptr,a
      0006FE EE               [12] 1879 	mov	a,r6
      0006FF A3               [24] 1880 	inc	dptr
      000700 F0               [24] 1881 	movx	@dptr,a
      000701 EF               [12] 1882 	mov	a,r7
      000702 A3               [24] 1883 	inc	dptr
      000703 F0               [24] 1884 	movx	@dptr,a
                                   1885 ;	enc.c:253: enc_reset();
      000704 12r06rE9         [24] 1886 	lcall	_enc_reset
                                   1887 ;	enc.c:256: while (!(enc_mac_read(ENC_ESTAT, 0) & 0x01))
      000707                       1888 00101$:
      000707 90r00r18         [24] 1889 	mov	dptr,#_enc_mac_read_PARM_2
      00070A E4               [12] 1890 	clr	a
      00070B F0               [24] 1891 	movx	@dptr,a
      00070C 75 82 1D         [24] 1892 	mov	dpl, #0x1d
      00070F 12r04rF2         [24] 1893 	lcall	_enc_mac_read
      000712 E5 82            [12] 1894 	mov	a, dpl
      000714 30 E0 F0         [24] 1895 	jnb	acc.0,00101$
                                   1896 ;	enc.c:265: enc_buffer_init(rx_start, rx_end);
      000717 90r00r06         [24] 1897 	mov	dptr,#_enc_buffer_init_PARM_2
      00071A 74 FF            [12] 1898 	mov	a,#0xff
      00071C F0               [24] 1899 	movx	@dptr,a
      00071D 74 1B            [12] 1900 	mov	a,#0x1b
      00071F A3               [24] 1901 	inc	dptr
      000720 F0               [24] 1902 	movx	@dptr,a
      000721 90 00 00         [24] 1903 	mov	dptr,#0x0000
      000724 12r00rE4         [24] 1904 	lcall	_enc_buffer_init
                                   1905 ;	enc.c:266: enc_control_write(0, ENC_ETXSTL, (uint8_t) (tx_start & 0xFF)); // Low byte
      000727 90r00r02         [24] 1906 	mov	dptr,#_enc_control_write_PARM_2
      00072A 74 04            [12] 1907 	mov	a,#0x04
      00072C F0               [24] 1908 	movx	@dptr,a
      00072D 90r00r03         [24] 1909 	mov	dptr,#_enc_control_write_PARM_3
      000730 E4               [12] 1910 	clr	a
      000731 F0               [24] 1911 	movx	@dptr,a
      000732 90 00 00         [24] 1912 	mov	dptr,#0x0000
      000735 12r00rAF         [24] 1913 	lcall	_enc_control_write
                                   1914 ;	enc.c:267: enc_control_write(0, ENC_ETXSTH, (uint8_t) ((tx_start >> 8) & 0xFF)); // High byte
      000738 90r00r02         [24] 1915 	mov	dptr,#_enc_control_write_PARM_2
      00073B 74 05            [12] 1916 	mov	a,#0x05
      00073D F0               [24] 1917 	movx	@dptr,a
      00073E 90r00r03         [24] 1918 	mov	dptr,#_enc_control_write_PARM_3
      000741 74 1C            [12] 1919 	mov	a,#0x1c
      000743 F0               [24] 1920 	movx	@dptr,a
      000744 90 00 00         [24] 1921 	mov	dptr,#0x0000
      000747 12r00rAF         [24] 1922 	lcall	_enc_control_write
                                   1923 ;	enc.c:270: enc_control_write(0, ENC_ETXNDL, (uint8_t) (tx_end & 0xFF)); // Low byte
      00074A 90r00r02         [24] 1924 	mov	dptr,#_enc_control_write_PARM_2
      00074D 74 06            [12] 1925 	mov	a,#0x06
      00074F F0               [24] 1926 	movx	@dptr,a
      000750 90r00r03         [24] 1927 	mov	dptr,#_enc_control_write_PARM_3
      000753 74 FF            [12] 1928 	mov	a,#0xff
      000755 F0               [24] 1929 	movx	@dptr,a
      000756 90 00 00         [24] 1930 	mov	dptr,#0x0000
      000759 12r00rAF         [24] 1931 	lcall	_enc_control_write
                                   1932 ;	enc.c:271: enc_control_write(0, ENC_ETXNDH, (uint8_t) ((tx_end >> 8) & 0xFF)); // High byte
      00075C 90r00r02         [24] 1933 	mov	dptr,#_enc_control_write_PARM_2
      00075F 74 07            [12] 1934 	mov	a,#0x07
      000761 F0               [24] 1935 	movx	@dptr,a
      000762 90r00r03         [24] 1936 	mov	dptr,#_enc_control_write_PARM_3
      000765 74 1F            [12] 1937 	mov	a,#0x1f
      000767 F0               [24] 1938 	movx	@dptr,a
      000768 90 00 00         [24] 1939 	mov	dptr,#0x0000
      00076B 12r00rAF         [24] 1940 	lcall	_enc_control_write
                                   1941 ;	enc.c:279: enc_control_write(1, ERXFCON, 0xB1);// crcen,ucen,pcen,bcen
      00076E 90r00r02         [24] 1942 	mov	dptr,#_enc_control_write_PARM_2
      000771 74 18            [12] 1943 	mov	a,#0x18
      000773 F0               [24] 1944 	movx	@dptr,a
      000774 90r00r03         [24] 1945 	mov	dptr,#_enc_control_write_PARM_3
      000777 74 B1            [12] 1946 	mov	a,#0xb1
      000779 F0               [24] 1947 	movx	@dptr,a
      00077A 90 00 01         [24] 1948 	mov	dptr,#0x0001
      00077D 12r00rAF         [24] 1949 	lcall	_enc_control_write
                                   1950 ;	enc.c:280: enc_control_write(1, EPMM0, 0x3F); //pattern match
      000780 90r00r02         [24] 1951 	mov	dptr,#_enc_control_write_PARM_2
      000783 74 08            [12] 1952 	mov	a,#0x08
      000785 F0               [24] 1953 	movx	@dptr,a
      000786 90r00r03         [24] 1954 	mov	dptr,#_enc_control_write_PARM_3
      000789 74 3F            [12] 1955 	mov	a,#0x3f
      00078B F0               [24] 1956 	movx	@dptr,a
      00078C 90 00 01         [24] 1957 	mov	dptr,#0x0001
      00078F 12r00rAF         [24] 1958 	lcall	_enc_control_write
                                   1959 ;	enc.c:281: enc_control_write(1, EPMM1, 0x30); //pattern match
      000792 90r00r02         [24] 1960 	mov	dptr,#_enc_control_write_PARM_2
      000795 74 09            [12] 1961 	mov	a,#0x09
      000797 F0               [24] 1962 	movx	@dptr,a
      000798 90r00r03         [24] 1963 	mov	dptr,#_enc_control_write_PARM_3
      00079B 74 30            [12] 1964 	mov	a,#0x30
      00079D F0               [24] 1965 	movx	@dptr,a
      00079E 90 00 01         [24] 1966 	mov	dptr,#0x0001
      0007A1 12r00rAF         [24] 1967 	lcall	_enc_control_write
                                   1968 ;	enc.c:282: enc_control_write(1, EPMCSL, 0xF9); //pattern match
      0007A4 90r00r02         [24] 1969 	mov	dptr,#_enc_control_write_PARM_2
      0007A7 74 10            [12] 1970 	mov	a,#0x10
      0007A9 F0               [24] 1971 	movx	@dptr,a
      0007AA 90r00r03         [24] 1972 	mov	dptr,#_enc_control_write_PARM_3
      0007AD 74 F9            [12] 1973 	mov	a,#0xf9
      0007AF F0               [24] 1974 	movx	@dptr,a
      0007B0 90 00 01         [24] 1975 	mov	dptr,#0x0001
      0007B3 12r00rAF         [24] 1976 	lcall	_enc_control_write
                                   1977 ;	enc.c:283: enc_control_write(1, EPMCSH, 0xF7); //pattern match
      0007B6 90r00r02         [24] 1978 	mov	dptr,#_enc_control_write_PARM_2
      0007B9 74 11            [12] 1979 	mov	a,#0x11
      0007BB F0               [24] 1980 	movx	@dptr,a
      0007BC 90r00r03         [24] 1981 	mov	dptr,#_enc_control_write_PARM_3
      0007BF 74 F7            [12] 1982 	mov	a,#0xf7
      0007C1 F0               [24] 1983 	movx	@dptr,a
      0007C2 90 00 01         [24] 1984 	mov	dptr,#0x0001
      0007C5 12r00rAF         [24] 1985 	lcall	_enc_control_write
                                   1986 ;	enc.c:286: uint8_t read_macon1 = enc_mac_read(ENC_MACON1, 2); //mac enable for reception
      0007C8 90r00r18         [24] 1987 	mov	dptr,#_enc_mac_read_PARM_2
      0007CB 74 02            [12] 1988 	mov	a,#0x02
      0007CD F0               [24] 1989 	movx	@dptr,a
      0007CE 75 82 00         [24] 1990 	mov	dpl, #0x00
      0007D1 12r04rF2         [24] 1991 	lcall	_enc_mac_read
      0007D4 E5 82            [12] 1992 	mov	a, dpl
                                   1993 ;	enc.c:287: enc_control_write(2, ENC_MACON1, (read_macon1 | (1 << 0))); //mac enable for reception
      0007D6 44 01            [12] 1994 	orl	a,#0x01
      0007D8 FF               [12] 1995 	mov	r7,a
      0007D9 90r00r02         [24] 1996 	mov	dptr,#_enc_control_write_PARM_2
      0007DC E4               [12] 1997 	clr	a
      0007DD F0               [24] 1998 	movx	@dptr,a
      0007DE 90r00r03         [24] 1999 	mov	dptr,#_enc_control_write_PARM_3
      0007E1 EF               [12] 2000 	mov	a,r7
      0007E2 F0               [24] 2001 	movx	@dptr,a
      0007E3 90 00 02         [24] 2002 	mov	dptr,#0x0002
      0007E6 12r00rAF         [24] 2003 	lcall	_enc_control_write
                                   2004 ;	enc.c:289: enc_control_write(2, MACON3, 0x33); //MACON3_PADCFG0|MACON3_TXCRCEN|MACON3_FRMLNEN)
      0007E9 90r00r02         [24] 2005 	mov	dptr,#_enc_control_write_PARM_2
      0007EC 74 02            [12] 2006 	mov	a,#0x02
      0007EE F0               [24] 2007 	movx	@dptr,a
      0007EF 90r00r03         [24] 2008 	mov	dptr,#_enc_control_write_PARM_3
      0007F2 74 33            [12] 2009 	mov	a,#0x33
      0007F4 F0               [24] 2010 	movx	@dptr,a
      0007F5 90 00 02         [24] 2011 	mov	dptr,#0x0002
      0007F8 12r00rAF         [24] 2012 	lcall	_enc_control_write
                                   2013 ;	enc.c:294: enc_control_write(2, MAIPGL, 0x12); // MAIPGL: Non-back-to-back gap
      0007FB 90r00r02         [24] 2014 	mov	dptr,#_enc_control_write_PARM_2
      0007FE 74 06            [12] 2015 	mov	a,#0x06
      000800 F0               [24] 2016 	movx	@dptr,a
      000801 90r00r03         [24] 2017 	mov	dptr,#_enc_control_write_PARM_3
      000804 74 12            [12] 2018 	mov	a,#0x12
      000806 F0               [24] 2019 	movx	@dptr,a
      000807 90 00 02         [24] 2020 	mov	dptr,#0x0002
      00080A 12r00rAF         [24] 2021 	lcall	_enc_control_write
                                   2022 ;	enc.c:295: enc_control_write(2, MAIPGH, 0x0C); // MAIPGH: Non-back-to-back gap (Half Duplex)
      00080D 90r00r02         [24] 2023 	mov	dptr,#_enc_control_write_PARM_2
      000810 74 07            [12] 2024 	mov	a,#0x07
      000812 F0               [24] 2025 	movx	@dptr,a
      000813 90r00r03         [24] 2026 	mov	dptr,#_enc_control_write_PARM_3
      000816 74 0C            [12] 2027 	mov	a,#0x0c
      000818 F0               [24] 2028 	movx	@dptr,a
      000819 90 00 02         [24] 2029 	mov	dptr,#0x0002
      00081C 12r00rAF         [24] 2030 	lcall	_enc_control_write
                                   2031 ;	enc.c:297: enc_control_write(2, MABBIPG, 0x12); // MABBIPG: Back-to-back gap (Full Duplex)
      00081F 90r00r02         [24] 2032 	mov	dptr,#_enc_control_write_PARM_2
      000822 74 04            [12] 2033 	mov	a,#0x04
      000824 F0               [24] 2034 	movx	@dptr,a
      000825 90r00r03         [24] 2035 	mov	dptr,#_enc_control_write_PARM_3
      000828 74 12            [12] 2036 	mov	a,#0x12
      00082A F0               [24] 2037 	movx	@dptr,a
      00082B 90 00 02         [24] 2038 	mov	dptr,#0x0002
      00082E 12r00rAF         [24] 2039 	lcall	_enc_control_write
                                   2040 ;	enc.c:299: enc_control_write(2, MACON4, 0x40); // MACON4: IEEE compliance00
      000831 90r00r02         [24] 2041 	mov	dptr,#_enc_control_write_PARM_2
      000834 74 03            [12] 2042 	mov	a,#0x03
      000836 F0               [24] 2043 	movx	@dptr,a
      000837 90r00r03         [24] 2044 	mov	dptr,#_enc_control_write_PARM_3
      00083A 74 40            [12] 2045 	mov	a,#0x40
      00083C F0               [24] 2046 	movx	@dptr,a
      00083D 90 00 02         [24] 2047 	mov	dptr,#0x0002
      000840 12r00rAF         [24] 2048 	lcall	_enc_control_write
                                   2049 ;	enc.c:302: enc_control_write(2, MAMXFLL, 0xDC); // MAMXFLL
      000843 90r00r02         [24] 2050 	mov	dptr,#_enc_control_write_PARM_2
      000846 74 0A            [12] 2051 	mov	a,#0x0a
      000848 F0               [24] 2052 	movx	@dptr,a
      000849 90r00r03         [24] 2053 	mov	dptr,#_enc_control_write_PARM_3
      00084C 74 DC            [12] 2054 	mov	a,#0xdc
      00084E F0               [24] 2055 	movx	@dptr,a
      00084F 90 00 02         [24] 2056 	mov	dptr,#0x0002
      000852 12r00rAF         [24] 2057 	lcall	_enc_control_write
                                   2058 ;	enc.c:303: enc_control_write(2, MAMXFLH, 0x05); // MAMXFLH
      000855 90r00r02         [24] 2059 	mov	dptr,#_enc_control_write_PARM_2
      000858 74 0B            [12] 2060 	mov	a,#0x0b
      00085A F0               [24] 2061 	movx	@dptr,a
      00085B 90r00r03         [24] 2062 	mov	dptr,#_enc_control_write_PARM_3
      00085E 74 05            [12] 2063 	mov	a,#0x05
      000860 F0               [24] 2064 	movx	@dptr,a
      000861 90 00 02         [24] 2065 	mov	dptr,#0x0002
      000864 12r00rAF         [24] 2066 	lcall	_enc_control_write
                                   2067 ;	enc.c:308: enc_control_write(3, ENC_MAADR6, mac[5]); // MAADR6
      000867 90r00r21         [24] 2068 	mov	dptr,#_enc_init_mac_10000_133
      00086A E0               [24] 2069 	movx	a,@dptr
      00086B FD               [12] 2070 	mov	r5,a
      00086C A3               [24] 2071 	inc	dptr
      00086D E0               [24] 2072 	movx	a,@dptr
      00086E FE               [12] 2073 	mov	r6,a
      00086F A3               [24] 2074 	inc	dptr
      000870 E0               [24] 2075 	movx	a,@dptr
      000871 FF               [12] 2076 	mov	r7,a
      000872 74 05            [12] 2077 	mov	a,#0x05
      000874 2D               [12] 2078 	add	a, r5
      000875 F5*00            [12] 2079 	mov	_enc_init_sloc0_1_0,a
      000877 E4               [12] 2080 	clr	a
      000878 3E               [12] 2081 	addc	a, r6
      000879 F5*01            [12] 2082 	mov	(_enc_init_sloc0_1_0 + 1),a
      00087B 8F*02            [24] 2083 	mov	(_enc_init_sloc0_1_0 + 2),r7
      00087D 85*00 82         [24] 2084 	mov	dpl,_enc_init_sloc0_1_0
      000880 85*01 83         [24] 2085 	mov	dph,(_enc_init_sloc0_1_0 + 1)
      000883 85*02 F0         [24] 2086 	mov	b,(_enc_init_sloc0_1_0 + 2)
      000886 12r00r00         [24] 2087 	lcall	__gptrget
      000889 F9               [12] 2088 	mov	r1,a
      00088A 90r00r02         [24] 2089 	mov	dptr,#_enc_control_write_PARM_2
      00088D 74 01            [12] 2090 	mov	a,#0x01
      00088F F0               [24] 2091 	movx	@dptr,a
      000890 90r00r03         [24] 2092 	mov	dptr,#_enc_control_write_PARM_3
      000893 E9               [12] 2093 	mov	a,r1
      000894 F0               [24] 2094 	movx	@dptr,a
      000895 90 00 03         [24] 2095 	mov	dptr,#0x0003
      000898 C0 07            [24] 2096 	push	ar7
      00089A C0 06            [24] 2097 	push	ar6
      00089C C0 05            [24] 2098 	push	ar5
      00089E 12r00rAF         [24] 2099 	lcall	_enc_control_write
      0008A1 D0 05            [24] 2100 	pop	ar5
      0008A3 D0 06            [24] 2101 	pop	ar6
      0008A5 D0 07            [24] 2102 	pop	ar7
                                   2103 ;	enc.c:309: enc_control_write(3, ENC_MAADR5, mac[4]); // MAADR5
      0008A7 74 04            [12] 2104 	mov	a,#0x04
      0008A9 2D               [12] 2105 	add	a, r5
      0008AA F5*03            [12] 2106 	mov	_enc_init_sloc1_1_0,a
      0008AC E4               [12] 2107 	clr	a
      0008AD 3E               [12] 2108 	addc	a, r6
      0008AE F5*04            [12] 2109 	mov	(_enc_init_sloc1_1_0 + 1),a
      0008B0 8F*05            [24] 2110 	mov	(_enc_init_sloc1_1_0 + 2),r7
      0008B2 85*03 82         [24] 2111 	mov	dpl,_enc_init_sloc1_1_0
      0008B5 85*04 83         [24] 2112 	mov	dph,(_enc_init_sloc1_1_0 + 1)
      0008B8 85*05 F0         [24] 2113 	mov	b,(_enc_init_sloc1_1_0 + 2)
      0008BB 12r00r00         [24] 2114 	lcall	__gptrget
      0008BE FB               [12] 2115 	mov	r3,a
      0008BF 90r00r02         [24] 2116 	mov	dptr,#_enc_control_write_PARM_2
      0008C2 E4               [12] 2117 	clr	a
      0008C3 F0               [24] 2118 	movx	@dptr,a
      0008C4 90r00r03         [24] 2119 	mov	dptr,#_enc_control_write_PARM_3
      0008C7 EB               [12] 2120 	mov	a,r3
      0008C8 F0               [24] 2121 	movx	@dptr,a
      0008C9 90 00 03         [24] 2122 	mov	dptr,#0x0003
      0008CC C0 07            [24] 2123 	push	ar7
      0008CE C0 06            [24] 2124 	push	ar6
      0008D0 C0 05            [24] 2125 	push	ar5
      0008D2 12r00rAF         [24] 2126 	lcall	_enc_control_write
      0008D5 D0 05            [24] 2127 	pop	ar5
      0008D7 D0 06            [24] 2128 	pop	ar6
      0008D9 D0 07            [24] 2129 	pop	ar7
                                   2130 ;	enc.c:310: enc_control_write(3, ENC_MAADR4, mac[3]); // MAADR4
      0008DB 74 03            [12] 2131 	mov	a,#0x03
      0008DD 2D               [12] 2132 	add	a, r5
      0008DE F5*06            [12] 2133 	mov	_enc_init_sloc2_1_0,a
      0008E0 E4               [12] 2134 	clr	a
      0008E1 3E               [12] 2135 	addc	a, r6
      0008E2 F5*07            [12] 2136 	mov	(_enc_init_sloc2_1_0 + 1),a
      0008E4 8F*08            [24] 2137 	mov	(_enc_init_sloc2_1_0 + 2),r7
      0008E6 85*06 82         [24] 2138 	mov	dpl,_enc_init_sloc2_1_0
      0008E9 85*07 83         [24] 2139 	mov	dph,(_enc_init_sloc2_1_0 + 1)
      0008EC 85*08 F0         [24] 2140 	mov	b,(_enc_init_sloc2_1_0 + 2)
      0008EF 12r00r00         [24] 2141 	lcall	__gptrget
      0008F2 F9               [12] 2142 	mov	r1,a
      0008F3 90r00r02         [24] 2143 	mov	dptr,#_enc_control_write_PARM_2
      0008F6 74 03            [12] 2144 	mov	a,#0x03
      0008F8 F0               [24] 2145 	movx	@dptr,a
      0008F9 90r00r03         [24] 2146 	mov	dptr,#_enc_control_write_PARM_3
      0008FC E9               [12] 2147 	mov	a,r1
      0008FD F0               [24] 2148 	movx	@dptr,a
      0008FE 90 00 03         [24] 2149 	mov	dptr,#0x0003
      000901 C0 07            [24] 2150 	push	ar7
      000903 C0 06            [24] 2151 	push	ar6
      000905 C0 05            [24] 2152 	push	ar5
      000907 12r00rAF         [24] 2153 	lcall	_enc_control_write
      00090A D0 05            [24] 2154 	pop	ar5
      00090C D0 06            [24] 2155 	pop	ar6
      00090E D0 07            [24] 2156 	pop	ar7
                                   2157 ;	enc.c:311: enc_control_write(3, ENC_MAADR3, mac[2]); // MAADR3
      000910 74 02            [12] 2158 	mov	a,#0x02
      000912 2D               [12] 2159 	add	a, r5
      000913 F5*09            [12] 2160 	mov	_enc_init_sloc3_1_0,a
      000915 E4               [12] 2161 	clr	a
      000916 3E               [12] 2162 	addc	a, r6
      000917 F5*0A            [12] 2163 	mov	(_enc_init_sloc3_1_0 + 1),a
      000919 8F*0B            [24] 2164 	mov	(_enc_init_sloc3_1_0 + 2),r7
      00091B 85*09 82         [24] 2165 	mov	dpl,_enc_init_sloc3_1_0
      00091E 85*0A 83         [24] 2166 	mov	dph,(_enc_init_sloc3_1_0 + 1)
      000921 85*0B F0         [24] 2167 	mov	b,(_enc_init_sloc3_1_0 + 2)
      000924 12r00r00         [24] 2168 	lcall	__gptrget
      000927 FB               [12] 2169 	mov	r3,a
      000928 90r00r02         [24] 2170 	mov	dptr,#_enc_control_write_PARM_2
      00092B 74 02            [12] 2171 	mov	a,#0x02
      00092D F0               [24] 2172 	movx	@dptr,a
      00092E 90r00r03         [24] 2173 	mov	dptr,#_enc_control_write_PARM_3
      000931 EB               [12] 2174 	mov	a,r3
      000932 F0               [24] 2175 	movx	@dptr,a
      000933 90 00 03         [24] 2176 	mov	dptr,#0x0003
      000936 C0 07            [24] 2177 	push	ar7
      000938 C0 06            [24] 2178 	push	ar6
      00093A C0 05            [24] 2179 	push	ar5
      00093C 12r00rAF         [24] 2180 	lcall	_enc_control_write
      00093F D0 05            [24] 2181 	pop	ar5
      000941 D0 06            [24] 2182 	pop	ar6
      000943 D0 07            [24] 2183 	pop	ar7
                                   2184 ;	enc.c:312: enc_control_write(3, ENC_MAADR2, mac[1]); // MAADR2
      000945 74 01            [12] 2185 	mov	a,#0x01
      000947 2D               [12] 2186 	add	a, r5
      000948 FA               [12] 2187 	mov	r2,a
      000949 E4               [12] 2188 	clr	a
      00094A 3E               [12] 2189 	addc	a, r6
      00094B FB               [12] 2190 	mov	r3,a
      00094C 8F 04            [24] 2191 	mov	ar4,r7
      00094E 8A 82            [24] 2192 	mov	dpl,r2
      000950 8B 83            [24] 2193 	mov	dph,r3
      000952 8C F0            [24] 2194 	mov	b,r4
      000954 12r00r00         [24] 2195 	lcall	__gptrget
      000957 F9               [12] 2196 	mov	r1,a
      000958 90r00r02         [24] 2197 	mov	dptr,#_enc_control_write_PARM_2
      00095B 74 05            [12] 2198 	mov	a,#0x05
      00095D F0               [24] 2199 	movx	@dptr,a
      00095E 90r00r03         [24] 2200 	mov	dptr,#_enc_control_write_PARM_3
      000961 E9               [12] 2201 	mov	a,r1
      000962 F0               [24] 2202 	movx	@dptr,a
      000963 90 00 03         [24] 2203 	mov	dptr,#0x0003
      000966 C0 07            [24] 2204 	push	ar7
      000968 C0 06            [24] 2205 	push	ar6
      00096A C0 05            [24] 2206 	push	ar5
      00096C C0 04            [24] 2207 	push	ar4
      00096E C0 03            [24] 2208 	push	ar3
      000970 C0 02            [24] 2209 	push	ar2
      000972 12r00rAF         [24] 2210 	lcall	_enc_control_write
      000975 D0 02            [24] 2211 	pop	ar2
      000977 D0 03            [24] 2212 	pop	ar3
      000979 D0 04            [24] 2213 	pop	ar4
      00097B D0 05            [24] 2214 	pop	ar5
      00097D D0 06            [24] 2215 	pop	ar6
      00097F D0 07            [24] 2216 	pop	ar7
                                   2217 ;	enc.c:313: enc_control_write(3, ENC_MAADR1, mac[0]); // MAADR1
      000981 8D 82            [24] 2218 	mov	dpl,r5
      000983 8E 83            [24] 2219 	mov	dph,r6
      000985 8F F0            [24] 2220 	mov	b,r7
      000987 12r00r00         [24] 2221 	lcall	__gptrget
      00098A F9               [12] 2222 	mov	r1,a
      00098B 90r00r02         [24] 2223 	mov	dptr,#_enc_control_write_PARM_2
      00098E 74 04            [12] 2224 	mov	a,#0x04
      000990 F0               [24] 2225 	movx	@dptr,a
      000991 90r00r03         [24] 2226 	mov	dptr,#_enc_control_write_PARM_3
      000994 E9               [12] 2227 	mov	a,r1
      000995 F0               [24] 2228 	movx	@dptr,a
      000996 90 00 03         [24] 2229 	mov	dptr,#0x0003
      000999 C0 07            [24] 2230 	push	ar7
      00099B C0 06            [24] 2231 	push	ar6
      00099D C0 05            [24] 2232 	push	ar5
      00099F C0 04            [24] 2233 	push	ar4
      0009A1 C0 03            [24] 2234 	push	ar3
      0009A3 C0 02            [24] 2235 	push	ar2
      0009A5 12r00rAF         [24] 2236 	lcall	_enc_control_write
                                   2237 ;	enc.c:314: enc_phy_write(PHCON1, 0x0100);
      0009A8 90r00r1C         [24] 2238 	mov	dptr,#_enc_phy_write_PARM_2
      0009AB E4               [12] 2239 	clr	a
      0009AC F0               [24] 2240 	movx	@dptr,a
      0009AD 04               [12] 2241 	inc	a
      0009AE A3               [24] 2242 	inc	dptr
      0009AF F0               [24] 2243 	movx	@dptr,a
      0009B0 75 82 00         [24] 2244 	mov	dpl, #0x00
      0009B3 12r06r2B         [24] 2245 	lcall	_enc_phy_write
                                   2246 ;	enc.c:315: enc_phy_write(PHCON2, 0x0100);
      0009B6 90r00r1C         [24] 2247 	mov	dptr,#_enc_phy_write_PARM_2
      0009B9 E4               [12] 2248 	clr	a
      0009BA F0               [24] 2249 	movx	@dptr,a
      0009BB 04               [12] 2250 	inc	a
      0009BC A3               [24] 2251 	inc	dptr
      0009BD F0               [24] 2252 	movx	@dptr,a
      0009BE 75 82 10         [24] 2253 	mov	dpl, #0x10
      0009C1 12r06r2B         [24] 2254 	lcall	_enc_phy_write
                                   2255 ;	enc.c:318: enc_control_write(0, ENC_EIE, 0XC0); // reception enable bit
      0009C4 90r00r02         [24] 2256 	mov	dptr,#_enc_control_write_PARM_2
      0009C7 74 1B            [12] 2257 	mov	a,#0x1b
      0009C9 F0               [24] 2258 	movx	@dptr,a
      0009CA 90r00r03         [24] 2259 	mov	dptr,#_enc_control_write_PARM_3
      0009CD 74 C0            [12] 2260 	mov	a,#0xc0
      0009CF F0               [24] 2261 	movx	@dptr,a
      0009D0 90 00 00         [24] 2262 	mov	dptr,#0x0000
      0009D3 12r00rAF         [24] 2263 	lcall	_enc_control_write
                                   2264 ;	enc.c:319: enc_control_write(0, ENC_ECON1, 0X04); // reception enable bit
      0009D6 90r00r02         [24] 2265 	mov	dptr,#_enc_control_write_PARM_2
      0009D9 74 1F            [12] 2266 	mov	a,#0x1f
      0009DB F0               [24] 2267 	movx	@dptr,a
      0009DC 90r00r03         [24] 2268 	mov	dptr,#_enc_control_write_PARM_3
      0009DF 74 04            [12] 2269 	mov	a,#0x04
      0009E1 F0               [24] 2270 	movx	@dptr,a
      0009E2 90 00 00         [24] 2271 	mov	dptr,#0x0000
      0009E5 12r00rAF         [24] 2272 	lcall	_enc_control_write
                                   2273 ;	enc.c:320: uint8_t rev = enc_eth_read(ENC_EREVID,3);
      0009E8 90r00r1F         [24] 2274 	mov	dptr,#_enc_eth_read_PARM_2
      0009EB 74 03            [12] 2275 	mov	a,#0x03
      0009ED F0               [24] 2276 	movx	@dptr,a
      0009EE 75 82 12         [24] 2277 	mov	dpl, #0x12
      0009F1 12r06rA6         [24] 2278 	lcall	_enc_eth_read
                                   2279 ;	enc.c:325: printf("\nENC28J60 Initialization Complete.\n");
      0009F4 74rA9            [12] 2280 	mov	a,#___str_11
      0009F6 C0 E0            [24] 2281 	push	acc
      0009F8 74s01            [12] 2282 	mov	a,#(___str_11 >> 8)
      0009FA C0 E0            [24] 2283 	push	acc
      0009FC 74 80            [12] 2284 	mov	a,#0x80
      0009FE C0 E0            [24] 2285 	push	acc
      000A00 12r00r00         [24] 2286 	lcall	_printf
      000A03 15 81            [12] 2287 	dec	sp
      000A05 15 81            [12] 2288 	dec	sp
      000A07 15 81            [12] 2289 	dec	sp
      000A09 D0 02            [24] 2290 	pop	ar2
      000A0B D0 03            [24] 2291 	pop	ar3
      000A0D D0 04            [24] 2292 	pop	ar4
      000A0F D0 05            [24] 2293 	pop	ar5
      000A11 D0 06            [24] 2294 	pop	ar6
      000A13 D0 07            [24] 2295 	pop	ar7
                                   2296 ;	enc.c:327: mac[2], mac[3], mac[4], mac[5]);
      000A15 85*00 82         [24] 2297 	mov	dpl,_enc_init_sloc0_1_0
      000A18 85*01 83         [24] 2298 	mov	dph,(_enc_init_sloc0_1_0 + 1)
      000A1B 85*02 F0         [24] 2299 	mov	b,(_enc_init_sloc0_1_0 + 2)
      000A1E 12r00r00         [24] 2300 	lcall	__gptrget
      000A21 F9               [12] 2301 	mov	r1,a
      000A22 89*00            [24] 2302 	mov	_enc_init_sloc0_1_0,r1
      000A24 75*01 00         [24] 2303 	mov	(_enc_init_sloc0_1_0 + 1),#0x00
      000A27 85*03 82         [24] 2304 	mov	dpl,_enc_init_sloc1_1_0
      000A2A 85*04 83         [24] 2305 	mov	dph,(_enc_init_sloc1_1_0 + 1)
      000A2D 85*05 F0         [24] 2306 	mov	b,(_enc_init_sloc1_1_0 + 2)
      000A30 12r00r00         [24] 2307 	lcall	__gptrget
      000A33 F9               [12] 2308 	mov	r1,a
      000A34 89*03            [24] 2309 	mov	_enc_init_sloc1_1_0,r1
      000A36 75*04 00         [24] 2310 	mov	(_enc_init_sloc1_1_0 + 1),#0x00
      000A39 85*06 82         [24] 2311 	mov	dpl,_enc_init_sloc2_1_0
      000A3C 85*07 83         [24] 2312 	mov	dph,(_enc_init_sloc2_1_0 + 1)
      000A3F 85*08 F0         [24] 2313 	mov	b,(_enc_init_sloc2_1_0 + 2)
      000A42 12r00r00         [24] 2314 	lcall	__gptrget
      000A45 F9               [12] 2315 	mov	r1,a
      000A46 89*06            [24] 2316 	mov	_enc_init_sloc2_1_0,r1
      000A48 75*07 00         [24] 2317 	mov	(_enc_init_sloc2_1_0 + 1),#0x00
      000A4B 85*09 82         [24] 2318 	mov	dpl,_enc_init_sloc3_1_0
      000A4E 85*0A 83         [24] 2319 	mov	dph,(_enc_init_sloc3_1_0 + 1)
      000A51 85*0B F0         [24] 2320 	mov	b,(_enc_init_sloc3_1_0 + 2)
      000A54 12r00r00         [24] 2321 	lcall	__gptrget
      000A57 F8               [12] 2322 	mov	r0,a
      000A58 79 00            [12] 2323 	mov	r1,#0x00
                                   2324 ;	enc.c:326: printf("MAC Address: %02X:%02X:%02X:%02X:%02X:%02X\n", mac[0], mac[1],
      000A5A 8A 82            [24] 2325 	mov	dpl,r2
      000A5C 8B 83            [24] 2326 	mov	dph,r3
      000A5E 8C F0            [24] 2327 	mov	b,r4
      000A60 12r00r00         [24] 2328 	lcall	__gptrget
      000A63 FA               [12] 2329 	mov	r2,a
      000A64 7C 00            [12] 2330 	mov	r4,#0x00
      000A66 8D 82            [24] 2331 	mov	dpl,r5
      000A68 8E 83            [24] 2332 	mov	dph,r6
      000A6A 8F F0            [24] 2333 	mov	b,r7
      000A6C 12r00r00         [24] 2334 	lcall	__gptrget
      000A6F FD               [12] 2335 	mov	r5,a
      000A70 7F 00            [12] 2336 	mov	r7,#0x00
      000A72 C0*00            [24] 2337 	push	_enc_init_sloc0_1_0
      000A74 C0*01            [24] 2338 	push	(_enc_init_sloc0_1_0 + 1)
      000A76 C0*03            [24] 2339 	push	_enc_init_sloc1_1_0
      000A78 C0*04            [24] 2340 	push	(_enc_init_sloc1_1_0 + 1)
      000A7A C0*06            [24] 2341 	push	_enc_init_sloc2_1_0
      000A7C C0*07            [24] 2342 	push	(_enc_init_sloc2_1_0 + 1)
      000A7E C0 00            [24] 2343 	push	ar0
      000A80 C0 01            [24] 2344 	push	ar1
      000A82 C0 02            [24] 2345 	push	ar2
      000A84 C0 04            [24] 2346 	push	ar4
      000A86 C0 05            [24] 2347 	push	ar5
      000A88 C0 07            [24] 2348 	push	ar7
      000A8A 74rCD            [12] 2349 	mov	a,#___str_12
      000A8C C0 E0            [24] 2350 	push	acc
      000A8E 74s01            [12] 2351 	mov	a,#(___str_12 >> 8)
      000A90 C0 E0            [24] 2352 	push	acc
      000A92 74 80            [12] 2353 	mov	a,#0x80
      000A94 C0 E0            [24] 2354 	push	acc
      000A96 12r00r00         [24] 2355 	lcall	_printf
      000A99 E5 81            [12] 2356 	mov	a,sp
      000A9B 24 F1            [12] 2357 	add	a,#0xf1
      000A9D F5 81            [12] 2358 	mov	sp,a
                                   2359 ;	enc.c:328: }
      000A9F 22               [24] 2360 	ret
                                   2361 ;------------------------------------------------------------
                                   2362 ;Allocation info for local variables in function 'enc_bit_set'
                                   2363 ;------------------------------------------------------------
                                   2364 ;mask                      Allocated with name '_enc_bit_set_PARM_2'
                                   2365 ;addr                      Allocated with name '_enc_bit_set_addr_10000_139'
                                   2366 ;opcode                    Allocated with name '_enc_bit_set_opcode_10000_140'
                                   2367 ;------------------------------------------------------------
                                   2368 ;	enc.c:330: void enc_bit_set(uint8_t addr, uint8_t mask) {
                                   2369 ;	-----------------------------------------
                                   2370 ;	 function enc_bit_set
                                   2371 ;	-----------------------------------------
      000AA0                       2372 _enc_bit_set:
      000AA0 E5 82            [12] 2373 	mov	a,dpl
      000AA2 90r00r25         [24] 2374 	mov	dptr,#_enc_bit_set_addr_10000_139
      000AA5 F0               [24] 2375 	movx	@dptr,a
                                   2376 ;	enc.c:331: uint8_t opcode = BIT_FIELD_SET_OPCODE | addr; // BFS opcode
      000AA6 E0               [24] 2377 	movx	a,@dptr
      000AA7 44 80            [12] 2378 	orl	a,#0x80
      000AA9 FF               [12] 2379 	mov	r7,a
                                   2380 ;	enc.c:332: CS_LOW;   // Pull CS Low
                                   2381 ;	assignBit
      000AAA C2 91            [12] 2382 	clr	_P1_1
                                   2383 ;	enc.c:333: SPI_WriteByte(opcode);
      000AAC 8F 82            [24] 2384 	mov	dpl, r7
      000AAE 12r00r00         [24] 2385 	lcall	_SPI_WriteByte
                                   2386 ;	enc.c:334: SPI_WriteByte(mask);          // Set the specified bits
      000AB1 90r00r24         [24] 2387 	mov	dptr,#_enc_bit_set_PARM_2
      000AB4 E0               [24] 2388 	movx	a,@dptr
      000AB5 F5 82            [12] 2389 	mov	dpl,a
      000AB7 12r00r00         [24] 2390 	lcall	_SPI_WriteByte
                                   2391 ;	enc.c:335: CS_HIGH;    // Pull CS High
                                   2392 ;	assignBit
      000ABA D2 91            [12] 2393 	setb	_P1_1
                                   2394 ;	enc.c:336: }
      000ABC 22               [24] 2395 	ret
                                   2396 ;------------------------------------------------------------
                                   2397 ;Allocation info for local variables in function 'enc_bit_clear'
                                   2398 ;------------------------------------------------------------
                                   2399 ;mask                      Allocated with name '_enc_bit_clear_PARM_2'
                                   2400 ;addr                      Allocated with name '_enc_bit_clear_addr_10000_141'
                                   2401 ;opcode                    Allocated with name '_enc_bit_clear_opcode_10000_142'
                                   2402 ;------------------------------------------------------------
                                   2403 ;	enc.c:338: void enc_bit_clear(uint8_t addr, uint8_t mask) {
                                   2404 ;	-----------------------------------------
                                   2405 ;	 function enc_bit_clear
                                   2406 ;	-----------------------------------------
      000ABD                       2407 _enc_bit_clear:
      000ABD E5 82            [12] 2408 	mov	a,dpl
      000ABF 90r00r27         [24] 2409 	mov	dptr,#_enc_bit_clear_addr_10000_141
      000AC2 F0               [24] 2410 	movx	@dptr,a
                                   2411 ;	enc.c:339: uint8_t opcode = BIT_FIELD_CLEAR_OPCODE | addr; // BFC opcode
      000AC3 E0               [24] 2412 	movx	a,@dptr
      000AC4 44 A0            [12] 2413 	orl	a,#0xa0
      000AC6 FF               [12] 2414 	mov	r7,a
                                   2415 ;	enc.c:340: CS_LOW;  // Pull CS Low
                                   2416 ;	assignBit
      000AC7 C2 91            [12] 2417 	clr	_P1_1
                                   2418 ;	enc.c:341: SPI_WriteByte(opcode);
      000AC9 8F 82            [24] 2419 	mov	dpl, r7
      000ACB 12r00r00         [24] 2420 	lcall	_SPI_WriteByte
                                   2421 ;	enc.c:342: SPI_WriteByte(mask);          // Clear the specified bits
      000ACE 90r00r26         [24] 2422 	mov	dptr,#_enc_bit_clear_PARM_2
      000AD1 E0               [24] 2423 	movx	a,@dptr
      000AD2 F5 82            [12] 2424 	mov	dpl,a
      000AD4 12r00r00         [24] 2425 	lcall	_SPI_WriteByte
                                   2426 ;	enc.c:343: CS_HIGH;    // Pull CS High
                                   2427 ;	assignBit
      000AD7 D2 91            [12] 2428 	setb	_P1_1
                                   2429 ;	enc.c:344: }
      000AD9 22               [24] 2430 	ret
                                   2431 	.area CSEG    (CODE)
                                   2432 	.area CONST   (CODE)
                                   2433 	.area CONST   (CODE)
      000000                       2434 ___str_0:
      000000 77 72 6F 6E 67 20 62  2435 	.ascii "wrong bank"
             61 6E 6B
      00000A 00                    2436 	.db 0x00
                                   2437 	.area CSEG    (CODE)
                                   2438 	.area CONST   (CODE)
      00000B                       2439 ___str_1:
      00000B 0A                    2440 	.db 0x0a
      00000C 49 6E 76 61 6C 69 64  2441 	.ascii "Invalid Buffer Range: Start 0x%04X, End 0x%04X"
             20 42 75 66 66 65 72
             20 52 61 6E 67 65 3A
             20 53 74 61 72 74 20
             30 78 25 30 34 58 2C
             20 45 6E 64 20 30 78
             25 30 34 58
      00003A 0A                    2442 	.db 0x0a
      00003B 00                    2443 	.db 0x00
                                   2444 	.area CSEG    (CODE)
                                   2445 	.area CONST   (CODE)
      00003C                       2446 ___str_2:
      00003C 0A                    2447 	.db 0x0a
      00003D 42 75 66 66 65 72 20  2448 	.ascii "Buffer Initialized: Start 0x%04X, End 0x%04X"
             49 6E 69 74 69 61 6C
             69 7A 65 64 3A 20 53
             74 61 72 74 20 30 78
             25 30 34 58 2C 20 45
             6E 64 20 30 78 25 30
             34 58
      000069 0A                    2449 	.db 0x0a
      00006A 00                    2450 	.db 0x00
                                   2451 	.area CSEG    (CODE)
                                   2452 	.area CONST   (CODE)
      00006B                       2453 ___str_3:
      00006B 0A                    2454 	.db 0x0a
      00006C 0D                    2455 	.db 0x0d
      00006D 49 6E 76 61 6C 69 64  2456 	.ascii "Invalid number of bytes: %d"
             20 6E 75 6D 62 65 72
             20 6F 66 20 62 79 74
             65 73 3A 20 25 64
      000088 0A                    2457 	.db 0x0a
      000089 0D                    2458 	.db 0x0d
      00008A 00                    2459 	.db 0x00
                                   2460 	.area CSEG    (CODE)
                                   2461 	.area CONST   (CODE)
      00008B                       2462 ___str_4:
      00008B 0A                    2463 	.db 0x0a
      00008C 0D                    2464 	.db 0x0d
      00008D 49 6E 76 61 6C 69 64  2465 	.ascii "Invalid address: %04X"
             20 61 64 64 72 65 73
             73 3A 20 25 30 34 58
      0000A2 0A                    2466 	.db 0x0a
      0000A3 0D                    2467 	.db 0x0d
      0000A4 00                    2468 	.db 0x00
                                   2469 	.area CSEG    (CODE)
                                   2470 	.area CONST   (CODE)
      0000A5                       2471 ___str_5:
      0000A5 0A                    2472 	.db 0x0a
      0000A6 49 6E 76 61 6C 69 64  2473 	.ascii "Invalid TX Address: Start 0x%04X, Size %d"
             20 54 58 20 41 64 64
             72 65 73 73 3A 20 53
             74 61 72 74 20 30 78
             25 30 34 58 2C 20 53
             69 7A 65 20 25 64
      0000CF 0A                    2474 	.db 0x0a
      0000D0 00                    2475 	.db 0x00
                                   2476 	.area CSEG    (CODE)
                                   2477 	.area CONST   (CODE)
      0000D1                       2478 ___str_6:
      0000D1 0A                    2479 	.db 0x0a
      0000D2 49 6E 76 61 6C 69 64  2480 	.ascii "Invalid RX Address: Start 0x%04X, Size %d"
             20 52 58 20 41 64 64
             72 65 73 73 3A 20 53
             74 61 72 74 20 30 78
             25 30 34 58 2C 20 53
             69 7A 65 20 25 64
      0000FB 0A                    2481 	.db 0x0a
      0000FC 00                    2482 	.db 0x00
                                   2483 	.area CSEG    (CODE)
                                   2484 	.area CONST   (CODE)
      0000FD                       2485 ___str_7:
      0000FD 0A                    2486 	.db 0x0a
      0000FE 49 6E 76 61 6C 69 64  2487 	.ascii "Invalid address: MAC register address range [0, 0x1F]"
             20 61 64 64 72 65 73
             73 3A 20 4D 41 43 20
             72 65 67 69 73 74 65
             72 20 61 64 64 72 65
             73 73 20 72 61 6E 67
             65 20 5B 30 2C 20 30
             78 31 46 5D
      000133 0A                    2488 	.db 0x0a
      000134 00                    2489 	.db 0x00
                                   2490 	.area CSEG    (CODE)
                                   2491 	.area CONST   (CODE)
      000135                       2492 ___str_8:
      000135 52 65 61 64 3A 20 41  2493 	.ascii "Read: Address 0x%02X, Data 0x%02X"
             64 64 72 65 73 73 20
             30 78 25 30 32 58 2C
             20 44 61 74 61 20 30
             78 25 30 32 58
      000156 0A                    2494 	.db 0x0a
      000157 00                    2495 	.db 0x00
                                   2496 	.area CSEG    (CODE)
                                   2497 	.area CONST   (CODE)
      000158                       2498 ___str_9:
      000158 50 48 59 20 52 65 61  2499 	.ascii "PHY Read: Address 0x%02X, Data 0x%04X"
             64 3A 20 41 64 64 72
             65 73 73 20 30 78 25
             30 32 58 2C 20 44 61
             74 61 20 30 78 25 30
             34 58
      00017D 0A                    2500 	.db 0x0a
      00017E 0D                    2501 	.db 0x0d
      00017F 00                    2502 	.db 0x00
                                   2503 	.area CSEG    (CODE)
                                   2504 	.area CONST   (CODE)
      000180                       2505 ___str_10:
      000180 50 48 59 20 57 72 69  2506 	.ascii "PHY Write: Address 0x%02X, Data 0x%04X"
             74 65 3A 20 41 64 64
             72 65 73 73 20 30 78
             25 30 32 58 2C 20 44
             61 74 61 20 30 78 25
             30 34 58
      0001A6 0A                    2507 	.db 0x0a
      0001A7 0D                    2508 	.db 0x0d
      0001A8 00                    2509 	.db 0x00
                                   2510 	.area CSEG    (CODE)
                                   2511 	.area CONST   (CODE)
      0001A9                       2512 ___str_11:
      0001A9 0A                    2513 	.db 0x0a
      0001AA 45 4E 43 32 38 4A 36  2514 	.ascii "ENC28J60 Initialization Complete."
             30 20 49 6E 69 74 69
             61 6C 69 7A 61 74 69
             6F 6E 20 43 6F 6D 70
             6C 65 74 65 2E
      0001CB 0A                    2515 	.db 0x0a
      0001CC 00                    2516 	.db 0x00
                                   2517 	.area CSEG    (CODE)
                                   2518 	.area CONST   (CODE)
      0001CD                       2519 ___str_12:
      0001CD 4D 41 43 20 41 64 64  2520 	.ascii "MAC Address: %02X:%02X:%02X:%02X:%02X:%02X"
             72 65 73 73 3A 20 25
             30 32 58 3A 25 30 32
             58 3A 25 30 32 58 3A
             25 30 32 58 3A 25 30
             32 58 3A 25 30 32 58
      0001F7 0A                    2521 	.db 0x0a
      0001F8 00                    2522 	.db 0x00
                                   2523 	.area CSEG    (CODE)
                                   2524 	.area XINIT   (CODE)
                                   2525 	.area CABS    (ABS,CODE)
