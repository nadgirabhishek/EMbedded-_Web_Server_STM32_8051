
Project_ESD_F2024.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d04  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bb8  08003dc4  08003dc4  00004dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800497c  0800497c  0000606c  2**0
                  CONTENTS
  4 .ARM          00000000  0800497c  0800497c  0000606c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800497c  0800497c  0000606c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800497c  0800497c  0000597c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004980  08004980  00005980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08004984  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000878  2000006c  080049f0  0000606c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008e4  080049f0  000068e4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000606c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004541  00000000  00000000  00006094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001648  00000000  00000000  0000a5d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000468  00000000  00000000  0000bc20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000341  00000000  00000000  0000c088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000162db  00000000  00000000  0000c3c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007da4  00000000  00000000  000226a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00069da3  00000000  00000000  0002a448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  000941eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000162c  00000000  00000000  00094274  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  000958a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000006c 	.word	0x2000006c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003dac 	.word	0x08003dac

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000070 	.word	0x20000070
 8000104:	08003dac 	.word	0x08003dac

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <delay_ms>:
 *   None
 *
 * Returns:
 *   None
 */
void delay_ms(uint16_t ms) {
 8000244:	b580      	push	{r7, lr}
 8000246:	b084      	sub	sp, #16
 8000248:	af00      	add	r7, sp, #0
 800024a:	0002      	movs	r2, r0
 800024c:	1dbb      	adds	r3, r7, #6
 800024e:	801a      	strh	r2, [r3, #0]
	for (volatile uint32_t i = 0; i < ms * 1000; i++) {
 8000250:	2300      	movs	r3, #0
 8000252:	60fb      	str	r3, [r7, #12]
 8000254:	e002      	b.n	800025c <delay_ms+0x18>
 8000256:	68fb      	ldr	r3, [r7, #12]
 8000258:	3301      	adds	r3, #1
 800025a:	60fb      	str	r3, [r7, #12]
 800025c:	1dbb      	adds	r3, r7, #6
 800025e:	881a      	ldrh	r2, [r3, #0]
 8000260:	0013      	movs	r3, r2
 8000262:	015b      	lsls	r3, r3, #5
 8000264:	1a9b      	subs	r3, r3, r2
 8000266:	009b      	lsls	r3, r3, #2
 8000268:	189b      	adds	r3, r3, r2
 800026a:	00db      	lsls	r3, r3, #3
 800026c:	001a      	movs	r2, r3
 800026e:	68fb      	ldr	r3, [r7, #12]
 8000270:	429a      	cmp	r2, r3
 8000272:	d8f0      	bhi.n	8000256 <delay_ms+0x12>
		// Simple loop for delay; adjust the multiplier based on clock speed
	}
}
 8000274:	46c0      	nop			@ (mov r8, r8)
 8000276:	46c0      	nop			@ (mov r8, r8)
 8000278:	46bd      	mov	sp, r7
 800027a:	b004      	add	sp, #16
 800027c:	bd80      	pop	{r7, pc}

0800027e <enc28j60_start_transmission>:
 *   None
 *
 * Returns:
 *   None
 */
void enc28j60_start_transmission(void) {
 800027e:	b590      	push	{r4, r7, lr}
 8000280:	b083      	sub	sp, #12
 8000282:	af00      	add	r7, sp, #0
	uint8_t econ1 = enc_mac_read(ENC_ECON1, Bank0); // Read ECON1
 8000284:	1dfc      	adds	r4, r7, #7
 8000286:	2100      	movs	r1, #0
 8000288:	201f      	movs	r0, #31
 800028a:	f000 fbd5 	bl	8000a38 <enc_mac_read>
 800028e:	0003      	movs	r3, r0
 8000290:	7023      	strb	r3, [r4, #0]
	econ1 |= 0x08; // Set TXRTS (bit 3)
 8000292:	1dfb      	adds	r3, r7, #7
 8000294:	1dfa      	adds	r2, r7, #7
 8000296:	7812      	ldrb	r2, [r2, #0]
 8000298:	2108      	movs	r1, #8
 800029a:	430a      	orrs	r2, r1
 800029c:	701a      	strb	r2, [r3, #0]
	enc_control_write(Bank0, ENC_ECON1, econ1); // Write back to ECON1
 800029e:	1dfb      	adds	r3, r7, #7
 80002a0:	781b      	ldrb	r3, [r3, #0]
 80002a2:	001a      	movs	r2, r3
 80002a4:	211f      	movs	r1, #31
 80002a6:	2000      	movs	r0, #0
 80002a8:	f000 f9ee 	bl	8000688 <enc_control_write>
}
 80002ac:	46c0      	nop			@ (mov r8, r8)
 80002ae:	46bd      	mov	sp, r7
 80002b0:	b003      	add	sp, #12
 80002b2:	bd90      	pop	{r4, r7, pc}

080002b4 <enc28j60_set_transmit_pointers>:
 *
 * Returns:
 *   None
 */
void enc28j60_set_transmit_pointers(uint16_t start_address,
		uint16_t end_address) {
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b082      	sub	sp, #8
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	0002      	movs	r2, r0
 80002bc:	1dbb      	adds	r3, r7, #6
 80002be:	801a      	strh	r2, [r3, #0]
 80002c0:	1d3b      	adds	r3, r7, #4
 80002c2:	1c0a      	adds	r2, r1, #0
 80002c4:	801a      	strh	r2, [r3, #0]
	// Write to ETXST (Transmit Start Pointer)
	enc_control_write(Bank0, ENC_ETXSTL, (uint8_t) (start_address & 0xFF)); // Low byte
 80002c6:	1dbb      	adds	r3, r7, #6
 80002c8:	881b      	ldrh	r3, [r3, #0]
 80002ca:	b2db      	uxtb	r3, r3
 80002cc:	001a      	movs	r2, r3
 80002ce:	2104      	movs	r1, #4
 80002d0:	2000      	movs	r0, #0
 80002d2:	f000 f9d9 	bl	8000688 <enc_control_write>
	enc_control_write(Bank0, ENC_ETXSTH,
 80002d6:	1dbb      	adds	r3, r7, #6
 80002d8:	881b      	ldrh	r3, [r3, #0]
 80002da:	0a1b      	lsrs	r3, r3, #8
 80002dc:	b29b      	uxth	r3, r3
 80002de:	b2db      	uxtb	r3, r3
 80002e0:	001a      	movs	r2, r3
 80002e2:	2105      	movs	r1, #5
 80002e4:	2000      	movs	r0, #0
 80002e6:	f000 f9cf 	bl	8000688 <enc_control_write>
			(uint8_t) ((start_address >> 8) & 0xFF)); // High byte

	// Write to ETXND (Transmit End Pointer)
	enc_control_write(Bank0, ENC_ETXNDL, (uint8_t) (end_address & 0xFF)); // Low byte
 80002ea:	1d3b      	adds	r3, r7, #4
 80002ec:	881b      	ldrh	r3, [r3, #0]
 80002ee:	b2db      	uxtb	r3, r3
 80002f0:	001a      	movs	r2, r3
 80002f2:	2106      	movs	r1, #6
 80002f4:	2000      	movs	r0, #0
 80002f6:	f000 f9c7 	bl	8000688 <enc_control_write>
	enc_control_write(Bank0, ENC_ETXNDH, (uint8_t) ((end_address >> 8) & 0xFF)); // High byte
 80002fa:	1d3b      	adds	r3, r7, #4
 80002fc:	881b      	ldrh	r3, [r3, #0]
 80002fe:	0a1b      	lsrs	r3, r3, #8
 8000300:	b29b      	uxth	r3, r3
 8000302:	b2db      	uxtb	r3, r3
 8000304:	001a      	movs	r2, r3
 8000306:	2107      	movs	r1, #7
 8000308:	2000      	movs	r0, #0
 800030a:	f000 f9bd 	bl	8000688 <enc_control_write>
}
 800030e:	46c0      	nop			@ (mov r8, r8)
 8000310:	46bd      	mov	sp, r7
 8000312:	b002      	add	sp, #8
 8000314:	bd80      	pop	{r7, pc}

08000316 <wait_for_transmission_complete>:
 *   timeout to avoid program stuck
 *
 * Returns:
 *   trasnmission complet or not
 */
bool wait_for_transmission_complete(uint16_t timeout_ms) {
 8000316:	b5b0      	push	{r4, r5, r7, lr}
 8000318:	b084      	sub	sp, #16
 800031a:	af00      	add	r7, sp, #0
 800031c:	0002      	movs	r2, r0
 800031e:	1dbb      	adds	r3, r7, #6
 8000320:	801a      	strh	r2, [r3, #0]
	uint16_t elapsed = 0;
 8000322:	230e      	movs	r3, #14
 8000324:	18fb      	adds	r3, r7, r3
 8000326:	2200      	movs	r2, #0
 8000328:	801a      	strh	r2, [r3, #0]

	while (elapsed < timeout_ms) {
 800032a:	e017      	b.n	800035c <wait_for_transmission_complete+0x46>
		uint8_t econ1 = enc_mac_read(ENC_ECON1, Bank0); // Read ECON1
 800032c:	250d      	movs	r5, #13
 800032e:	197c      	adds	r4, r7, r5
 8000330:	2100      	movs	r1, #0
 8000332:	201f      	movs	r0, #31
 8000334:	f000 fb80 	bl	8000a38 <enc_mac_read>
 8000338:	0003      	movs	r3, r0
 800033a:	7023      	strb	r3, [r4, #0]
		if (!(econ1 & (1 << 3))) { // TXRTS (bit 3) cleared means transmission complete
 800033c:	197b      	adds	r3, r7, r5
 800033e:	781b      	ldrb	r3, [r3, #0]
 8000340:	2208      	movs	r2, #8
 8000342:	4013      	ands	r3, r2
 8000344:	d101      	bne.n	800034a <wait_for_transmission_complete+0x34>
			return true;  // Transmission completed
 8000346:	2301      	movs	r3, #1
 8000348:	e010      	b.n	800036c <wait_for_transmission_complete+0x56>
		}

		delay_ms(1);  // Wait 1 ms
 800034a:	2001      	movs	r0, #1
 800034c:	f7ff ff7a 	bl	8000244 <delay_ms>
		elapsed++;
 8000350:	210e      	movs	r1, #14
 8000352:	187b      	adds	r3, r7, r1
 8000354:	881a      	ldrh	r2, [r3, #0]
 8000356:	187b      	adds	r3, r7, r1
 8000358:	3201      	adds	r2, #1
 800035a:	801a      	strh	r2, [r3, #0]
	while (elapsed < timeout_ms) {
 800035c:	230e      	movs	r3, #14
 800035e:	18fa      	adds	r2, r7, r3
 8000360:	1dbb      	adds	r3, r7, #6
 8000362:	8812      	ldrh	r2, [r2, #0]
 8000364:	881b      	ldrh	r3, [r3, #0]
 8000366:	429a      	cmp	r2, r3
 8000368:	d3e0      	bcc.n	800032c <wait_for_transmission_complete+0x16>
	}

	return false;  // Timed out
 800036a:	2300      	movs	r3, #0
}
 800036c:	0018      	movs	r0, r3
 800036e:	46bd      	mov	sp, r7
 8000370:	b004      	add	sp, #16
 8000372:	bdb0      	pop	{r4, r5, r7, pc}

08000374 <enc28j60_transmission_successful>:
 *   None
 *
 * Returns:
 *   None
 */
bool enc28j60_transmission_successful() {
 8000374:	b590      	push	{r4, r7, lr}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0
	uint8_t estat = enc_mac_read(ENC_ESTAT, Bank0); // Read ESTAT
 800037a:	1dfc      	adds	r4, r7, #7
 800037c:	2100      	movs	r1, #0
 800037e:	201d      	movs	r0, #29
 8000380:	f000 fb5a 	bl	8000a38 <enc_mac_read>
 8000384:	0003      	movs	r3, r0
 8000386:	7023      	strb	r3, [r4, #0]
	return !(estat & 0x02); // Check if TXABRT (bit 1) is not set
 8000388:	1dfb      	adds	r3, r7, #7
 800038a:	781b      	ldrb	r3, [r3, #0]
 800038c:	2202      	movs	r2, #2
 800038e:	4013      	ands	r3, r2
 8000390:	425a      	negs	r2, r3
 8000392:	4153      	adcs	r3, r2
 8000394:	b2db      	uxtb	r3, r3
}
 8000396:	0018      	movs	r0, r3
 8000398:	46bd      	mov	sp, r7
 800039a:	b003      	add	sp, #12
 800039c:	bd90      	pop	{r4, r7, pc}

0800039e <cbfifo_init>:


/*
 * Initialize the FIFO structure.
 */
void cbfifo_init(cbfifo_t *fifo) {
 800039e:	b580      	push	{r7, lr}
 80003a0:	b082      	sub	sp, #8
 80003a2:	af00      	add	r7, sp, #0
 80003a4:	6078      	str	r0, [r7, #4]
    if (fifo != NULL) {
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d00b      	beq.n	80003c4 <cbfifo_init+0x26>
        fifo->write = 0;
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	2280      	movs	r2, #128	@ 0x80
 80003b0:	2100      	movs	r1, #0
 80003b2:	5099      	str	r1, [r3, r2]
        fifo->read = 0;
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	2284      	movs	r2, #132	@ 0x84
 80003b8:	2100      	movs	r1, #0
 80003ba:	5099      	str	r1, [r3, r2]
        fifo->length = 0;
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	2288      	movs	r2, #136	@ 0x88
 80003c0:	2100      	movs	r1, #0
 80003c2:	5099      	str	r1, [r3, r2]
    }
}
 80003c4:	46c0      	nop			@ (mov r8, r8)
 80003c6:	46bd      	mov	sp, r7
 80003c8:	b002      	add	sp, #8
 80003ca:	bd80      	pop	{r7, pc}

080003cc <cbfifo_enqueue>:
 *
 * Returns:
 *   The number of bytes actually enqueued, which could be 0.
 *   In case of an error, returns (size_t) -1.
 */
size_t cbfifo_enqueue(cbfifo_t *fifo, void *buf, size_t nbyte) {
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b088      	sub	sp, #32
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	60f8      	str	r0, [r7, #12]
 80003d4:	60b9      	str	r1, [r7, #8]
 80003d6:	607a      	str	r2, [r7, #4]
    if (fifo == NULL || buf == NULL) {
 80003d8:	68fb      	ldr	r3, [r7, #12]
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d002      	beq.n	80003e4 <cbfifo_enqueue+0x18>
 80003de:	68bb      	ldr	r3, [r7, #8]
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d102      	bne.n	80003ea <cbfifo_enqueue+0x1e>
        return FIFO_ERROR;
 80003e4:	2301      	movs	r3, #1
 80003e6:	425b      	negs	r3, r3
 80003e8:	e03b      	b.n	8000462 <cbfifo_enqueue+0x96>
    }
    if (nbyte == 0) {
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d101      	bne.n	80003f4 <cbfifo_enqueue+0x28>
        return 0;
 80003f0:	2300      	movs	r3, #0
 80003f2:	e036      	b.n	8000462 <cbfifo_enqueue+0x96>
    }
    size_t blank = (MAX_FIFO_SIZE - (fifo->length));
 80003f4:	68fb      	ldr	r3, [r7, #12]
 80003f6:	2288      	movs	r2, #136	@ 0x88
 80003f8:	589b      	ldr	r3, [r3, r2]
 80003fa:	2280      	movs	r2, #128	@ 0x80
 80003fc:	1ad3      	subs	r3, r2, r3
 80003fe:	61bb      	str	r3, [r7, #24]
    if (blank == 0) {
 8000400:	69bb      	ldr	r3, [r7, #24]
 8000402:	2b00      	cmp	r3, #0
 8000404:	d101      	bne.n	800040a <cbfifo_enqueue+0x3e>
        return 0;
 8000406:	2300      	movs	r3, #0
 8000408:	e02b      	b.n	8000462 <cbfifo_enqueue+0x96>
    }
    size_t endq = (nbyte <= blank) ? nbyte : blank;
 800040a:	69ba      	ldr	r2, [r7, #24]
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	4293      	cmp	r3, r2
 8000410:	d900      	bls.n	8000414 <cbfifo_enqueue+0x48>
 8000412:	0013      	movs	r3, r2
 8000414:	617b      	str	r3, [r7, #20]
    uint8_t *temp = (uint8_t*)buf;
 8000416:	68bb      	ldr	r3, [r7, #8]
 8000418:	613b      	str	r3, [r7, #16]

    for (size_t i = 0; i < endq; i++) {
 800041a:	2300      	movs	r3, #0
 800041c:	61fb      	str	r3, [r7, #28]
 800041e:	e01b      	b.n	8000458 <cbfifo_enqueue+0x8c>
        fifo->buffer[fifo->write] = temp[i];
 8000420:	693a      	ldr	r2, [r7, #16]
 8000422:	69fb      	ldr	r3, [r7, #28]
 8000424:	18d2      	adds	r2, r2, r3
 8000426:	68fb      	ldr	r3, [r7, #12]
 8000428:	2180      	movs	r1, #128	@ 0x80
 800042a:	585b      	ldr	r3, [r3, r1]
 800042c:	7811      	ldrb	r1, [r2, #0]
 800042e:	68fa      	ldr	r2, [r7, #12]
 8000430:	54d1      	strb	r1, [r2, r3]
        fifo->length++;
 8000432:	68fb      	ldr	r3, [r7, #12]
 8000434:	2288      	movs	r2, #136	@ 0x88
 8000436:	589b      	ldr	r3, [r3, r2]
 8000438:	1c5a      	adds	r2, r3, #1
 800043a:	68fb      	ldr	r3, [r7, #12]
 800043c:	2188      	movs	r1, #136	@ 0x88
 800043e:	505a      	str	r2, [r3, r1]
        fifo->write = ((fifo->write + 1) & (MAX_FIFO_SIZE-1)); // Increment write pointer with wrap-around
 8000440:	68fb      	ldr	r3, [r7, #12]
 8000442:	2280      	movs	r2, #128	@ 0x80
 8000444:	589b      	ldr	r3, [r3, r2]
 8000446:	3301      	adds	r3, #1
 8000448:	227f      	movs	r2, #127	@ 0x7f
 800044a:	401a      	ands	r2, r3
 800044c:	68fb      	ldr	r3, [r7, #12]
 800044e:	2180      	movs	r1, #128	@ 0x80
 8000450:	505a      	str	r2, [r3, r1]
    for (size_t i = 0; i < endq; i++) {
 8000452:	69fb      	ldr	r3, [r7, #28]
 8000454:	3301      	adds	r3, #1
 8000456:	61fb      	str	r3, [r7, #28]
 8000458:	69fa      	ldr	r2, [r7, #28]
 800045a:	697b      	ldr	r3, [r7, #20]
 800045c:	429a      	cmp	r2, r3
 800045e:	d3df      	bcc.n	8000420 <cbfifo_enqueue+0x54>
    }
    return endq;
 8000460:	697b      	ldr	r3, [r7, #20]
}
 8000462:	0018      	movs	r0, r3
 8000464:	46bd      	mov	sp, r7
 8000466:	b008      	add	sp, #32
 8000468:	bd80      	pop	{r7, pc}

0800046a <cbfifo_dequeue>:
 *   nbyte   Bytes of data requested
 *
 * Returns:
 *   The number of bytes actually removed.
 */
size_t cbfifo_dequeue(cbfifo_t *fifo, void *buf, size_t nbyte) {
 800046a:	b580      	push	{r7, lr}
 800046c:	b088      	sub	sp, #32
 800046e:	af00      	add	r7, sp, #0
 8000470:	60f8      	str	r0, [r7, #12]
 8000472:	60b9      	str	r1, [r7, #8]
 8000474:	607a      	str	r2, [r7, #4]
    if (fifo == NULL || buf == NULL || nbyte == 0 || fifo->length == 0) {
 8000476:	68fb      	ldr	r3, [r7, #12]
 8000478:	2b00      	cmp	r3, #0
 800047a:	d00a      	beq.n	8000492 <cbfifo_dequeue+0x28>
 800047c:	68bb      	ldr	r3, [r7, #8]
 800047e:	2b00      	cmp	r3, #0
 8000480:	d007      	beq.n	8000492 <cbfifo_dequeue+0x28>
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	2b00      	cmp	r3, #0
 8000486:	d004      	beq.n	8000492 <cbfifo_dequeue+0x28>
 8000488:	68fb      	ldr	r3, [r7, #12]
 800048a:	2288      	movs	r2, #136	@ 0x88
 800048c:	589b      	ldr	r3, [r3, r2]
 800048e:	2b00      	cmp	r3, #0
 8000490:	d101      	bne.n	8000496 <cbfifo_dequeue+0x2c>
        return 0;
 8000492:	2300      	movs	r3, #0
 8000494:	e02d      	b.n	80004f2 <cbfifo_dequeue+0x88>
    }
    size_t endq = (nbyte <= fifo->length) ? nbyte : fifo->length;
 8000496:	68fb      	ldr	r3, [r7, #12]
 8000498:	2288      	movs	r2, #136	@ 0x88
 800049a:	589a      	ldr	r2, [r3, r2]
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	4293      	cmp	r3, r2
 80004a0:	d900      	bls.n	80004a4 <cbfifo_dequeue+0x3a>
 80004a2:	0013      	movs	r3, r2
 80004a4:	61bb      	str	r3, [r7, #24]
    uint8_t *temp = (uint8_t*)buf;
 80004a6:	68bb      	ldr	r3, [r7, #8]
 80004a8:	617b      	str	r3, [r7, #20]

    for (size_t i = 0; i < endq; i++) {
 80004aa:	2300      	movs	r3, #0
 80004ac:	61fb      	str	r3, [r7, #28]
 80004ae:	e01b      	b.n	80004e8 <cbfifo_dequeue+0x7e>
        temp[i] = fifo->buffer[fifo->read];
 80004b0:	68fb      	ldr	r3, [r7, #12]
 80004b2:	2284      	movs	r2, #132	@ 0x84
 80004b4:	589a      	ldr	r2, [r3, r2]
 80004b6:	6979      	ldr	r1, [r7, #20]
 80004b8:	69fb      	ldr	r3, [r7, #28]
 80004ba:	18cb      	adds	r3, r1, r3
 80004bc:	68f9      	ldr	r1, [r7, #12]
 80004be:	5c8a      	ldrb	r2, [r1, r2]
 80004c0:	701a      	strb	r2, [r3, #0]
        fifo->length--;
 80004c2:	68fb      	ldr	r3, [r7, #12]
 80004c4:	2288      	movs	r2, #136	@ 0x88
 80004c6:	589b      	ldr	r3, [r3, r2]
 80004c8:	1e5a      	subs	r2, r3, #1
 80004ca:	68fb      	ldr	r3, [r7, #12]
 80004cc:	2188      	movs	r1, #136	@ 0x88
 80004ce:	505a      	str	r2, [r3, r1]
        fifo->read = ((fifo->read + 1) & (MAX_FIFO_SIZE-1)); // Increment read pointer with wrap-around
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	2284      	movs	r2, #132	@ 0x84
 80004d4:	589b      	ldr	r3, [r3, r2]
 80004d6:	3301      	adds	r3, #1
 80004d8:	227f      	movs	r2, #127	@ 0x7f
 80004da:	401a      	ands	r2, r3
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	2184      	movs	r1, #132	@ 0x84
 80004e0:	505a      	str	r2, [r3, r1]
    for (size_t i = 0; i < endq; i++) {
 80004e2:	69fb      	ldr	r3, [r7, #28]
 80004e4:	3301      	adds	r3, #1
 80004e6:	61fb      	str	r3, [r7, #28]
 80004e8:	69fa      	ldr	r2, [r7, #28]
 80004ea:	69bb      	ldr	r3, [r7, #24]
 80004ec:	429a      	cmp	r2, r3
 80004ee:	d3df      	bcc.n	80004b0 <cbfifo_dequeue+0x46>
    }
    return endq;
 80004f0:	69bb      	ldr	r3, [r7, #24]
}
 80004f2:	0018      	movs	r0, r3
 80004f4:	46bd      	mov	sp, r7
 80004f6:	b008      	add	sp, #32
 80004f8:	bd80      	pop	{r7, pc}

080004fa <cbfifo_length>:
 *   fifo    Pointer to the FIFO structure
 *
 * Returns:
 *   Number of bytes currently available to be dequeued from the FIFO.
 */
size_t cbfifo_length(cbfifo_t *fifo) {
 80004fa:	b580      	push	{r7, lr}
 80004fc:	b082      	sub	sp, #8
 80004fe:	af00      	add	r7, sp, #0
 8000500:	6078      	str	r0, [r7, #4]
    return (fifo != NULL) ? fifo->length : 0; // Return length or 0 if fifo is NULL
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	2b00      	cmp	r3, #0
 8000506:	d003      	beq.n	8000510 <cbfifo_length+0x16>
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	2288      	movs	r2, #136	@ 0x88
 800050c:	589b      	ldr	r3, [r3, r2]
 800050e:	e000      	b.n	8000512 <cbfifo_length+0x18>
 8000510:	2300      	movs	r3, #0
}
 8000512:	0018      	movs	r0, r3
 8000514:	46bd      	mov	sp, r7
 8000516:	b002      	add	sp, #8
 8000518:	bd80      	pop	{r7, pc}
	...

0800051c <enc_set_autoinc>:
 *   None
 *
 * Returns:
 *   None
 */
void enc_set_autoinc(void) {
 800051c:	b590      	push	{r4, r7, lr}
 800051e:	b083      	sub	sp, #12
 8000520:	af00      	add	r7, sp, #0
	GPIOB->ODR &= ~SPI2_CS_PIN;
 8000522:	4b1a      	ldr	r3, [pc, #104]	@ (800058c <enc_set_autoinc+0x70>)
 8000524:	695a      	ldr	r2, [r3, #20]
 8000526:	4b19      	ldr	r3, [pc, #100]	@ (800058c <enc_set_autoinc+0x70>)
 8000528:	4919      	ldr	r1, [pc, #100]	@ (8000590 <enc_set_autoinc+0x74>)
 800052a:	400a      	ands	r2, r1
 800052c:	615a      	str	r2, [r3, #20]
	SPI_WriteByte(ENC_ECON2);
 800052e:	201e      	movs	r0, #30
 8000530:	f000 ff4a 	bl	80013c8 <SPI_WriteByte>
	uint8_t data = SPI_ReadByte(); // Read the data from the SPI slave
 8000534:	1dfc      	adds	r4, r7, #7
 8000536:	f000 ff9d 	bl	8001474 <SPI_ReadByte>
 800053a:	0003      	movs	r3, r0
 800053c:	7023      	strb	r3, [r4, #0]
	GPIOB->ODR |= SPI2_CS_PIN;
 800053e:	4b13      	ldr	r3, [pc, #76]	@ (800058c <enc_set_autoinc+0x70>)
 8000540:	695a      	ldr	r2, [r3, #20]
 8000542:	4b12      	ldr	r3, [pc, #72]	@ (800058c <enc_set_autoinc+0x70>)
 8000544:	2180      	movs	r1, #128	@ 0x80
 8000546:	0149      	lsls	r1, r1, #5
 8000548:	430a      	orrs	r2, r1
 800054a:	615a      	str	r2, [r3, #20]
	data |= (1 << 7); // Set bit 7 of the data to 1
 800054c:	1dfb      	adds	r3, r7, #7
 800054e:	1dfa      	adds	r2, r7, #7
 8000550:	7812      	ldrb	r2, [r2, #0]
 8000552:	2180      	movs	r1, #128	@ 0x80
 8000554:	4249      	negs	r1, r1
 8000556:	430a      	orrs	r2, r1
 8000558:	701a      	strb	r2, [r3, #0]
	GPIOB->ODR &= ~SPI2_CS_PIN;
 800055a:	4b0c      	ldr	r3, [pc, #48]	@ (800058c <enc_set_autoinc+0x70>)
 800055c:	695a      	ldr	r2, [r3, #20]
 800055e:	4b0b      	ldr	r3, [pc, #44]	@ (800058c <enc_set_autoinc+0x70>)
 8000560:	490b      	ldr	r1, [pc, #44]	@ (8000590 <enc_set_autoinc+0x74>)
 8000562:	400a      	ands	r2, r1
 8000564:	615a      	str	r2, [r3, #20]
	SPI_WriteByte(SPI_WRITE_ECON2);      // Write ECON2 address
 8000566:	205e      	movs	r0, #94	@ 0x5e
 8000568:	f000 ff2e 	bl	80013c8 <SPI_WriteByte>
	SPI_WriteByte(data);      // Write the modified data with MSB set
 800056c:	1dfb      	adds	r3, r7, #7
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	0018      	movs	r0, r3
 8000572:	f000 ff29 	bl	80013c8 <SPI_WriteByte>
	GPIOB->ODR |= SPI2_CS_PIN;
 8000576:	4b05      	ldr	r3, [pc, #20]	@ (800058c <enc_set_autoinc+0x70>)
 8000578:	695a      	ldr	r2, [r3, #20]
 800057a:	4b04      	ldr	r3, [pc, #16]	@ (800058c <enc_set_autoinc+0x70>)
 800057c:	2180      	movs	r1, #128	@ 0x80
 800057e:	0149      	lsls	r1, r1, #5
 8000580:	430a      	orrs	r2, r1
 8000582:	615a      	str	r2, [r3, #20]
}
 8000584:	46c0      	nop			@ (mov r8, r8)
 8000586:	46bd      	mov	sp, r7
 8000588:	b003      	add	sp, #12
 800058a:	bd90      	pop	{r4, r7, pc}
 800058c:	48000400 	.word	0x48000400
 8000590:	ffffefff 	.word	0xffffefff

08000594 <enc_select_reg_bank>:
 * Parameters:
 *   Bank : Bank NUmber
 * Returns:
 *   None
 */
void enc_select_reg_bank(uint8_t bank) {
 8000594:	b5b0      	push	{r4, r5, r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
 800059a:	0002      	movs	r2, r0
 800059c:	1dfb      	adds	r3, r7, #7
 800059e:	701a      	strb	r2, [r3, #0]
	GPIOB->ODR &= ~SPI2_CS_PIN;
 80005a0:	4b36      	ldr	r3, [pc, #216]	@ (800067c <enc_select_reg_bank+0xe8>)
 80005a2:	695a      	ldr	r2, [r3, #20]
 80005a4:	4b35      	ldr	r3, [pc, #212]	@ (800067c <enc_select_reg_bank+0xe8>)
 80005a6:	4936      	ldr	r1, [pc, #216]	@ (8000680 <enc_select_reg_bank+0xec>)
 80005a8:	400a      	ands	r2, r1
 80005aa:	615a      	str	r2, [r3, #20]
	SPI_WriteByte(ENC_ECON1); // Send the address
 80005ac:	201f      	movs	r0, #31
 80005ae:	f000 ff0b 	bl	80013c8 <SPI_WriteByte>
	uint8_t data = SPI_ReadByte(); // Read the data
 80005b2:	250f      	movs	r5, #15
 80005b4:	197c      	adds	r4, r7, r5
 80005b6:	f000 ff5d 	bl	8001474 <SPI_ReadByte>
 80005ba:	0003      	movs	r3, r0
 80005bc:	7023      	strb	r3, [r4, #0]
	GPIOB->ODR |= SPI2_CS_PIN;
 80005be:	4b2f      	ldr	r3, [pc, #188]	@ (800067c <enc_select_reg_bank+0xe8>)
 80005c0:	695a      	ldr	r2, [r3, #20]
 80005c2:	4b2e      	ldr	r3, [pc, #184]	@ (800067c <enc_select_reg_bank+0xe8>)
 80005c4:	2180      	movs	r1, #128	@ 0x80
 80005c6:	0149      	lsls	r1, r1, #5
 80005c8:	430a      	orrs	r2, r1
 80005ca:	615a      	str	r2, [r3, #20]

	// Modify the last two bits of 'data' based on 'bank'
	data &= ~0x03; // Clear the last two bits
 80005cc:	197b      	adds	r3, r7, r5
 80005ce:	197a      	adds	r2, r7, r5
 80005d0:	7812      	ldrb	r2, [r2, #0]
 80005d2:	2103      	movs	r1, #3
 80005d4:	438a      	bics	r2, r1
 80005d6:	701a      	strb	r2, [r3, #0]
	switch (bank) {
 80005d8:	1dfb      	adds	r3, r7, #7
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	2b03      	cmp	r3, #3
 80005de:	d01e      	beq.n	800061e <enc_select_reg_bank+0x8a>
 80005e0:	dc25      	bgt.n	800062e <enc_select_reg_bank+0x9a>
 80005e2:	2b02      	cmp	r3, #2
 80005e4:	d013      	beq.n	800060e <enc_select_reg_bank+0x7a>
 80005e6:	dc22      	bgt.n	800062e <enc_select_reg_bank+0x9a>
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d002      	beq.n	80005f2 <enc_select_reg_bank+0x5e>
 80005ec:	2b01      	cmp	r3, #1
 80005ee:	d006      	beq.n	80005fe <enc_select_reg_bank+0x6a>
 80005f0:	e01d      	b.n	800062e <enc_select_reg_bank+0x9a>
	case 0:
		data |= 0x00; // Last two bits: 00
 80005f2:	220f      	movs	r2, #15
 80005f4:	18bb      	adds	r3, r7, r2
 80005f6:	18ba      	adds	r2, r7, r2
 80005f8:	7812      	ldrb	r2, [r2, #0]
 80005fa:	701a      	strb	r2, [r3, #0]
		break;
 80005fc:	e01b      	b.n	8000636 <enc_select_reg_bank+0xa2>
	case 1:
		data |= 0x01; // Last two bits: 01
 80005fe:	220f      	movs	r2, #15
 8000600:	18bb      	adds	r3, r7, r2
 8000602:	18ba      	adds	r2, r7, r2
 8000604:	7812      	ldrb	r2, [r2, #0]
 8000606:	2101      	movs	r1, #1
 8000608:	430a      	orrs	r2, r1
 800060a:	701a      	strb	r2, [r3, #0]
		break;
 800060c:	e013      	b.n	8000636 <enc_select_reg_bank+0xa2>
	case 2:
		data |= 0x02; // Last two bits: 10
 800060e:	220f      	movs	r2, #15
 8000610:	18bb      	adds	r3, r7, r2
 8000612:	18ba      	adds	r2, r7, r2
 8000614:	7812      	ldrb	r2, [r2, #0]
 8000616:	2102      	movs	r1, #2
 8000618:	430a      	orrs	r2, r1
 800061a:	701a      	strb	r2, [r3, #0]
		break;
 800061c:	e00b      	b.n	8000636 <enc_select_reg_bank+0xa2>
	case 3:
		data |= 0x03; // Last two bits: 11
 800061e:	220f      	movs	r2, #15
 8000620:	18bb      	adds	r3, r7, r2
 8000622:	18ba      	adds	r2, r7, r2
 8000624:	7812      	ldrb	r2, [r2, #0]
 8000626:	2103      	movs	r1, #3
 8000628:	430a      	orrs	r2, r1
 800062a:	701a      	strb	r2, [r3, #0]
		break;
 800062c:	e003      	b.n	8000636 <enc_select_reg_bank+0xa2>
	default:
		printf("wrong bank");
 800062e:	4b15      	ldr	r3, [pc, #84]	@ (8000684 <enc_select_reg_bank+0xf0>)
 8000630:	0018      	movs	r0, r3
 8000632:	f002 fad5 	bl	8002be0 <iprintf>
	}

	for (int i = 0; i < 16; i++)
 8000636:	2300      	movs	r3, #0
 8000638:	60bb      	str	r3, [r7, #8]
 800063a:	e002      	b.n	8000642 <enc_select_reg_bank+0xae>
 800063c:	68bb      	ldr	r3, [r7, #8]
 800063e:	3301      	adds	r3, #1
 8000640:	60bb      	str	r3, [r7, #8]
 8000642:	68bb      	ldr	r3, [r7, #8]
 8000644:	2b0f      	cmp	r3, #15
 8000646:	ddf9      	ble.n	800063c <enc_select_reg_bank+0xa8>
		; // Delay

	GPIOB->ODR &= ~SPI2_CS_PIN;
 8000648:	4b0c      	ldr	r3, [pc, #48]	@ (800067c <enc_select_reg_bank+0xe8>)
 800064a:	695a      	ldr	r2, [r3, #20]
 800064c:	4b0b      	ldr	r3, [pc, #44]	@ (800067c <enc_select_reg_bank+0xe8>)
 800064e:	490c      	ldr	r1, [pc, #48]	@ (8000680 <enc_select_reg_bank+0xec>)
 8000650:	400a      	ands	r2, r1
 8000652:	615a      	str	r2, [r3, #20]
	SPI_WriteByte(SPI_WRITE_ECON1);
 8000654:	205f      	movs	r0, #95	@ 0x5f
 8000656:	f000 feb7 	bl	80013c8 <SPI_WriteByte>
	SPI_WriteByte(data); // Send the modified data
 800065a:	230f      	movs	r3, #15
 800065c:	18fb      	adds	r3, r7, r3
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	0018      	movs	r0, r3
 8000662:	f000 feb1 	bl	80013c8 <SPI_WriteByte>
	GPIOB->ODR |= SPI2_CS_PIN;
 8000666:	4b05      	ldr	r3, [pc, #20]	@ (800067c <enc_select_reg_bank+0xe8>)
 8000668:	695a      	ldr	r2, [r3, #20]
 800066a:	4b04      	ldr	r3, [pc, #16]	@ (800067c <enc_select_reg_bank+0xe8>)
 800066c:	2180      	movs	r1, #128	@ 0x80
 800066e:	0149      	lsls	r1, r1, #5
 8000670:	430a      	orrs	r2, r1
 8000672:	615a      	str	r2, [r3, #20]
}
 8000674:	46c0      	nop			@ (mov r8, r8)
 8000676:	46bd      	mov	sp, r7
 8000678:	b004      	add	sp, #16
 800067a:	bdb0      	pop	{r4, r5, r7, pc}
 800067c:	48000400 	.word	0x48000400
 8000680:	ffffefff 	.word	0xffffefff
 8000684:	08003dc4 	.word	0x08003dc4

08000688 <enc_control_write>:
 *   Data   Byte of data
 *
 * Returns:
 *   None
 */
void enc_control_write(int reg_bank, uint8_t addr, uint8_t data) {
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	0008      	movs	r0, r1
 8000692:	0011      	movs	r1, r2
 8000694:	1cfb      	adds	r3, r7, #3
 8000696:	1c02      	adds	r2, r0, #0
 8000698:	701a      	strb	r2, [r3, #0]
 800069a:	1cbb      	adds	r3, r7, #2
 800069c:	1c0a      	adds	r2, r1, #0
 800069e:	701a      	strb	r2, [r3, #0]
	uint8_t opcode = ENC_CONTROL_WRITE_OPCODE;
 80006a0:	200f      	movs	r0, #15
 80006a2:	183b      	adds	r3, r7, r0
 80006a4:	2240      	movs	r2, #64	@ 0x40
 80006a6:	701a      	strb	r2, [r3, #0]
	addr = addr + opcode;
 80006a8:	1cfb      	adds	r3, r7, #3
 80006aa:	1cf9      	adds	r1, r7, #3
 80006ac:	183a      	adds	r2, r7, r0
 80006ae:	7809      	ldrb	r1, [r1, #0]
 80006b0:	7812      	ldrb	r2, [r2, #0]
 80006b2:	188a      	adds	r2, r1, r2
 80006b4:	701a      	strb	r2, [r3, #0]
	enc_select_reg_bank(reg_bank);
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	0018      	movs	r0, r3
 80006bc:	f7ff ff6a 	bl	8000594 <enc_select_reg_bank>
	GPIOB->ODR &= ~SPI2_CS_PIN;
 80006c0:	4b0d      	ldr	r3, [pc, #52]	@ (80006f8 <enc_control_write+0x70>)
 80006c2:	695a      	ldr	r2, [r3, #20]
 80006c4:	4b0c      	ldr	r3, [pc, #48]	@ (80006f8 <enc_control_write+0x70>)
 80006c6:	490d      	ldr	r1, [pc, #52]	@ (80006fc <enc_control_write+0x74>)
 80006c8:	400a      	ands	r2, r1
 80006ca:	615a      	str	r2, [r3, #20]
	SPI_WriteByte(addr);
 80006cc:	1cfb      	adds	r3, r7, #3
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	0018      	movs	r0, r3
 80006d2:	f000 fe79 	bl	80013c8 <SPI_WriteByte>
	SPI_WriteByte(data);
 80006d6:	1cbb      	adds	r3, r7, #2
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	0018      	movs	r0, r3
 80006dc:	f000 fe74 	bl	80013c8 <SPI_WriteByte>
	GPIOB->ODR |= SPI2_CS_PIN;
 80006e0:	4b05      	ldr	r3, [pc, #20]	@ (80006f8 <enc_control_write+0x70>)
 80006e2:	695a      	ldr	r2, [r3, #20]
 80006e4:	4b04      	ldr	r3, [pc, #16]	@ (80006f8 <enc_control_write+0x70>)
 80006e6:	2180      	movs	r1, #128	@ 0x80
 80006e8:	0149      	lsls	r1, r1, #5
 80006ea:	430a      	orrs	r2, r1
 80006ec:	615a      	str	r2, [r3, #20]
}
 80006ee:	46c0      	nop			@ (mov r8, r8)
 80006f0:	46bd      	mov	sp, r7
 80006f2:	b004      	add	sp, #16
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	46c0      	nop			@ (mov r8, r8)
 80006f8:	48000400 	.word	0x48000400
 80006fc:	ffffefff 	.word	0xffffefff

08000700 <enc_buffer_init>:
 *   End Address of Receive Buffer
 *
 * Returns:
 *  None
 */
void enc_buffer_init(uint16_t start_address, uint16_t end_address) {
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	0002      	movs	r2, r0
 8000708:	1dbb      	adds	r3, r7, #6
 800070a:	801a      	strh	r2, [r3, #0]
 800070c:	1d3b      	adds	r3, r7, #4
 800070e:	1c0a      	adds	r2, r1, #0
 8000710:	801a      	strh	r2, [r3, #0]

	if (start_address > 0x1FFF || end_address > 0x1FFF) {
 8000712:	1dbb      	adds	r3, r7, #6
 8000714:	881a      	ldrh	r2, [r3, #0]
 8000716:	2380      	movs	r3, #128	@ 0x80
 8000718:	019b      	lsls	r3, r3, #6
 800071a:	429a      	cmp	r2, r3
 800071c:	d205      	bcs.n	800072a <enc_buffer_init+0x2a>
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	881a      	ldrh	r2, [r3, #0]
 8000722:	2380      	movs	r3, #128	@ 0x80
 8000724:	019b      	lsls	r3, r3, #6
 8000726:	429a      	cmp	r2, r3
 8000728:	d308      	bcc.n	800073c <enc_buffer_init+0x3c>
		printf("\nInvalid Buffer Range: Start 0x%04X, End 0x%04X\n",
 800072a:	1dbb      	adds	r3, r7, #6
 800072c:	8819      	ldrh	r1, [r3, #0]
 800072e:	1d3b      	adds	r3, r7, #4
 8000730:	881a      	ldrh	r2, [r3, #0]
 8000732:	4b2f      	ldr	r3, [pc, #188]	@ (80007f0 <enc_buffer_init+0xf0>)
 8000734:	0018      	movs	r0, r3
 8000736:	f002 fa53 	bl	8002be0 <iprintf>
				start_address, end_address);
		return;
 800073a:	e055      	b.n	80007e8 <enc_buffer_init+0xe8>
	}

	start_address &= ~1;  // Align to even address
 800073c:	1dbb      	adds	r3, r7, #6
 800073e:	1dba      	adds	r2, r7, #6
 8000740:	8812      	ldrh	r2, [r2, #0]
 8000742:	2101      	movs	r1, #1
 8000744:	438a      	bics	r2, r1
 8000746:	801a      	strh	r2, [r3, #0]

	enc_control_write(Bank0, ENC_ERDPTL, (uint8_t) (start_address & 0xFF)); // ERDPTL
 8000748:	1dbb      	adds	r3, r7, #6
 800074a:	881b      	ldrh	r3, [r3, #0]
 800074c:	b2db      	uxtb	r3, r3
 800074e:	001a      	movs	r2, r3
 8000750:	2100      	movs	r1, #0
 8000752:	2000      	movs	r0, #0
 8000754:	f7ff ff98 	bl	8000688 <enc_control_write>
	enc_control_write(Bank0, ENC_ERDPTH, (uint8_t) (start_address >> 8)); // ERDPTH
 8000758:	1dbb      	adds	r3, r7, #6
 800075a:	881b      	ldrh	r3, [r3, #0]
 800075c:	0a1b      	lsrs	r3, r3, #8
 800075e:	b29b      	uxth	r3, r3
 8000760:	b2db      	uxtb	r3, r3
 8000762:	001a      	movs	r2, r3
 8000764:	2101      	movs	r1, #1
 8000766:	2000      	movs	r0, #0
 8000768:	f7ff ff8e 	bl	8000688 <enc_control_write>
	enc_control_write(Bank0, ENC_ERXSTL, (uint8_t) (start_address & 0xFF)); // ERXSTL
 800076c:	1dbb      	adds	r3, r7, #6
 800076e:	881b      	ldrh	r3, [r3, #0]
 8000770:	b2db      	uxtb	r3, r3
 8000772:	001a      	movs	r2, r3
 8000774:	2108      	movs	r1, #8
 8000776:	2000      	movs	r0, #0
 8000778:	f7ff ff86 	bl	8000688 <enc_control_write>
	enc_control_write(Bank0, ENC_ERXSTH, (uint8_t) (start_address >> 8)); // ERXSTH
 800077c:	1dbb      	adds	r3, r7, #6
 800077e:	881b      	ldrh	r3, [r3, #0]
 8000780:	0a1b      	lsrs	r3, r3, #8
 8000782:	b29b      	uxth	r3, r3
 8000784:	b2db      	uxtb	r3, r3
 8000786:	001a      	movs	r2, r3
 8000788:	2109      	movs	r1, #9
 800078a:	2000      	movs	r0, #0
 800078c:	f7ff ff7c 	bl	8000688 <enc_control_write>
	enc_control_write(Bank0, ENC_ERXNDL, (uint8_t) (end_address & 0xFF)); // ERXNDL
 8000790:	1d3b      	adds	r3, r7, #4
 8000792:	881b      	ldrh	r3, [r3, #0]
 8000794:	b2db      	uxtb	r3, r3
 8000796:	001a      	movs	r2, r3
 8000798:	210a      	movs	r1, #10
 800079a:	2000      	movs	r0, #0
 800079c:	f7ff ff74 	bl	8000688 <enc_control_write>
	enc_control_write(Bank0, ENC_ERXNDH, (uint8_t) (end_address >> 8)); // ERXNDH
 80007a0:	1d3b      	adds	r3, r7, #4
 80007a2:	881b      	ldrh	r3, [r3, #0]
 80007a4:	0a1b      	lsrs	r3, r3, #8
 80007a6:	b29b      	uxth	r3, r3
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	001a      	movs	r2, r3
 80007ac:	210b      	movs	r1, #11
 80007ae:	2000      	movs	r0, #0
 80007b0:	f7ff ff6a 	bl	8000688 <enc_control_write>
	enc_control_write(Bank0, ENC_ERXRDPTL, (uint8_t) (start_address & 0xFF)); // ERXRDPTL
 80007b4:	1dbb      	adds	r3, r7, #6
 80007b6:	881b      	ldrh	r3, [r3, #0]
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	001a      	movs	r2, r3
 80007bc:	210c      	movs	r1, #12
 80007be:	2000      	movs	r0, #0
 80007c0:	f7ff ff62 	bl	8000688 <enc_control_write>
	enc_control_write(Bank0, ENC_ERXRDPTH, (uint8_t) (start_address >> 8)); // ERXRDPTH
 80007c4:	1dbb      	adds	r3, r7, #6
 80007c6:	881b      	ldrh	r3, [r3, #0]
 80007c8:	0a1b      	lsrs	r3, r3, #8
 80007ca:	b29b      	uxth	r3, r3
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	001a      	movs	r2, r3
 80007d0:	210d      	movs	r1, #13
 80007d2:	2000      	movs	r0, #0
 80007d4:	f7ff ff58 	bl	8000688 <enc_control_write>
	printf("\nBuffer Initialized: Start 0x%04X, End 0x%04X\n", start_address,
 80007d8:	1dbb      	adds	r3, r7, #6
 80007da:	8819      	ldrh	r1, [r3, #0]
 80007dc:	1d3b      	adds	r3, r7, #4
 80007de:	881a      	ldrh	r2, [r3, #0]
 80007e0:	4b04      	ldr	r3, [pc, #16]	@ (80007f4 <enc_buffer_init+0xf4>)
 80007e2:	0018      	movs	r0, r3
 80007e4:	f002 f9fc 	bl	8002be0 <iprintf>
			end_address);
}
 80007e8:	46bd      	mov	sp, r7
 80007ea:	b002      	add	sp, #8
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	46c0      	nop			@ (mov r8, r8)
 80007f0:	08003dd0 	.word	0x08003dd0
 80007f4:	08003e04 	.word	0x08003e04

080007f8 <enc_buffer_write>:
 *  Pointer to data
 *
 * Returns:
 *   None
 */
void enc_buffer_write(int num_bytes, uint16_t start_address, uint8_t *data_ptr) {
 80007f8:	b590      	push	{r4, r7, lr}
 80007fa:	b087      	sub	sp, #28
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	60f8      	str	r0, [r7, #12]
 8000800:	607a      	str	r2, [r7, #4]
 8000802:	230a      	movs	r3, #10
 8000804:	18fb      	adds	r3, r7, r3
 8000806:	1c0a      	adds	r2, r1, #0
 8000808:	801a      	strh	r2, [r3, #0]
	if (num_bytes < 1) {
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	2b00      	cmp	r3, #0
 800080e:	dc06      	bgt.n	800081e <enc_buffer_write+0x26>
		printf("\n\rInvalid number of bytes: %d\n\r", num_bytes);
 8000810:	68fa      	ldr	r2, [r7, #12]
 8000812:	4b3c      	ldr	r3, [pc, #240]	@ (8000904 <enc_buffer_write+0x10c>)
 8000814:	0011      	movs	r1, r2
 8000816:	0018      	movs	r0, r3
 8000818:	f002 f9e2 	bl	8002be0 <iprintf>
		return;
 800081c:	e06e      	b.n	80008fc <enc_buffer_write+0x104>
	}
	if (start_address > 0x1FFF) {
 800081e:	210a      	movs	r1, #10
 8000820:	187b      	adds	r3, r7, r1
 8000822:	881a      	ldrh	r2, [r3, #0]
 8000824:	2380      	movs	r3, #128	@ 0x80
 8000826:	019b      	lsls	r3, r3, #6
 8000828:	429a      	cmp	r2, r3
 800082a:	d307      	bcc.n	800083c <enc_buffer_write+0x44>
		printf("\n\rInvalid address: %04X\n\r", start_address);
 800082c:	187b      	adds	r3, r7, r1
 800082e:	881a      	ldrh	r2, [r3, #0]
 8000830:	4b35      	ldr	r3, [pc, #212]	@ (8000908 <enc_buffer_write+0x110>)
 8000832:	0011      	movs	r1, r2
 8000834:	0018      	movs	r0, r3
 8000836:	f002 f9d3 	bl	8002be0 <iprintf>
		return;
 800083a:	e05f      	b.n	80008fc <enc_buffer_write+0x104>
	}
	if (start_address < TX_BUFFER_START
 800083c:	210a      	movs	r1, #10
 800083e:	187b      	adds	r3, r7, r1
 8000840:	881a      	ldrh	r2, [r3, #0]
 8000842:	23e0      	movs	r3, #224	@ 0xe0
 8000844:	015b      	lsls	r3, r3, #5
 8000846:	429a      	cmp	r2, r3
 8000848:	d307      	bcc.n	800085a <enc_buffer_write+0x62>
			|| (start_address + num_bytes) > TX_BUFFER_END) {
 800084a:	187b      	adds	r3, r7, r1
 800084c:	881a      	ldrh	r2, [r3, #0]
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	18d2      	adds	r2, r2, r3
 8000852:	2380      	movs	r3, #128	@ 0x80
 8000854:	019b      	lsls	r3, r3, #6
 8000856:	429a      	cmp	r2, r3
 8000858:	db08      	blt.n	800086c <enc_buffer_write+0x74>
		printf("\nInvalid TX Address: Start 0x%04X, Size %d\n", start_address,
 800085a:	230a      	movs	r3, #10
 800085c:	18fb      	adds	r3, r7, r3
 800085e:	8819      	ldrh	r1, [r3, #0]
 8000860:	68fa      	ldr	r2, [r7, #12]
 8000862:	4b2a      	ldr	r3, [pc, #168]	@ (800090c <enc_buffer_write+0x114>)
 8000864:	0018      	movs	r0, r3
 8000866:	f002 f9bb 	bl	8002be0 <iprintf>
				num_bytes);
		return;
 800086a:	e047      	b.n	80008fc <enc_buffer_write+0x104>
	}
	//buffer_init(0000,start_address-2);
	if (num_bytes > 1) {
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	2b01      	cmp	r3, #1
 8000870:	dd01      	ble.n	8000876 <enc_buffer_write+0x7e>
		enc_set_autoinc();
 8000872:	f7ff fe53 	bl	800051c <enc_set_autoinc>
	}
	uint8_t higher_byte = (uint8_t) ((start_address >> 8) & 0xFF);
 8000876:	210a      	movs	r1, #10
 8000878:	187b      	adds	r3, r7, r1
 800087a:	881b      	ldrh	r3, [r3, #0]
 800087c:	0a1b      	lsrs	r3, r3, #8
 800087e:	b29a      	uxth	r2, r3
 8000880:	2013      	movs	r0, #19
 8000882:	183b      	adds	r3, r7, r0
 8000884:	701a      	strb	r2, [r3, #0]
	uint8_t lower_byte = (uint8_t) (start_address & 0xFF);
 8000886:	2412      	movs	r4, #18
 8000888:	193b      	adds	r3, r7, r4
 800088a:	187a      	adds	r2, r7, r1
 800088c:	8812      	ldrh	r2, [r2, #0]
 800088e:	701a      	strb	r2, [r3, #0]

	enc_control_write(Bank0, ENC_EWRPTH, higher_byte); // High byte
 8000890:	183b      	adds	r3, r7, r0
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	001a      	movs	r2, r3
 8000896:	2103      	movs	r1, #3
 8000898:	2000      	movs	r0, #0
 800089a:	f7ff fef5 	bl	8000688 <enc_control_write>
	enc_control_write(Bank0, ENC_EWRPTL, lower_byte); //
 800089e:	193b      	adds	r3, r7, r4
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	001a      	movs	r2, r3
 80008a4:	2102      	movs	r1, #2
 80008a6:	2000      	movs	r0, #0
 80008a8:	f7ff feee 	bl	8000688 <enc_control_write>

	uint8_t opcode = ENC_WRITE_BUFFER_OPCODE; // Write buffer memory command
 80008ac:	2011      	movs	r0, #17
 80008ae:	183b      	adds	r3, r7, r0
 80008b0:	227a      	movs	r2, #122	@ 0x7a
 80008b2:	701a      	strb	r2, [r3, #0]
	GPIOB->ODR &= ~SPI2_CS_PIN; // Pull CS Low
 80008b4:	4b16      	ldr	r3, [pc, #88]	@ (8000910 <enc_buffer_write+0x118>)
 80008b6:	695a      	ldr	r2, [r3, #20]
 80008b8:	4b15      	ldr	r3, [pc, #84]	@ (8000910 <enc_buffer_write+0x118>)
 80008ba:	4916      	ldr	r1, [pc, #88]	@ (8000914 <enc_buffer_write+0x11c>)
 80008bc:	400a      	ands	r2, r1
 80008be:	615a      	str	r2, [r3, #20]
	SPI_WriteByte(opcode);
 80008c0:	183b      	adds	r3, r7, r0
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	0018      	movs	r0, r3
 80008c6:	f000 fd7f 	bl	80013c8 <SPI_WriteByte>
	//printf("Writing %d bytes to buffer starting at address 0x%04X:\n\r",
	//		num_bytes, start_address);
	for (int i = 0; i < num_bytes; i++) {
 80008ca:	2300      	movs	r3, #0
 80008cc:	617b      	str	r3, [r7, #20]
 80008ce:	e00a      	b.n	80008e6 <enc_buffer_write+0xee>
		//printf("Byte %d: 0x%02X\n\r", i + 1, *data_ptr); // Print each byte
		SPI_WriteByte(*data_ptr); // Send data
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	0018      	movs	r0, r3
 80008d6:	f000 fd77 	bl	80013c8 <SPI_WriteByte>
		data_ptr++;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	3301      	adds	r3, #1
 80008de:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < num_bytes; i++) {
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	3301      	adds	r3, #1
 80008e4:	617b      	str	r3, [r7, #20]
 80008e6:	697a      	ldr	r2, [r7, #20]
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	429a      	cmp	r2, r3
 80008ec:	dbf0      	blt.n	80008d0 <enc_buffer_write+0xd8>
	}
	GPIOB->ODR |= SPI2_CS_PIN; // Pull CS High
 80008ee:	4b08      	ldr	r3, [pc, #32]	@ (8000910 <enc_buffer_write+0x118>)
 80008f0:	695a      	ldr	r2, [r3, #20]
 80008f2:	4b07      	ldr	r3, [pc, #28]	@ (8000910 <enc_buffer_write+0x118>)
 80008f4:	2180      	movs	r1, #128	@ 0x80
 80008f6:	0149      	lsls	r1, r1, #5
 80008f8:	430a      	orrs	r2, r1
 80008fa:	615a      	str	r2, [r3, #20]
}
 80008fc:	46bd      	mov	sp, r7
 80008fe:	b007      	add	sp, #28
 8000900:	bd90      	pop	{r4, r7, pc}
 8000902:	46c0      	nop			@ (mov r8, r8)
 8000904:	08003e34 	.word	0x08003e34
 8000908:	08003e54 	.word	0x08003e54
 800090c:	08003e70 	.word	0x08003e70
 8000910:	48000400 	.word	0x48000400
 8000914:	ffffefff 	.word	0xffffefff

08000918 <enc_buffer_read>:
 *
 * Returns:
 *   The number of bytes read.
 */
uint16_t enc_buffer_read(int num_bytes, uint16_t start_address,
		uint8_t *data_ptr) {
 8000918:	b590      	push	{r4, r7, lr}
 800091a:	b087      	sub	sp, #28
 800091c:	af00      	add	r7, sp, #0
 800091e:	60f8      	str	r0, [r7, #12]
 8000920:	607a      	str	r2, [r7, #4]
 8000922:	230a      	movs	r3, #10
 8000924:	18fb      	adds	r3, r7, r3
 8000926:	1c0a      	adds	r2, r1, #0
 8000928:	801a      	strh	r2, [r3, #0]
	if (num_bytes < 1) {
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	2b00      	cmp	r3, #0
 800092e:	dc07      	bgt.n	8000940 <enc_buffer_read+0x28>
		printf("\n\rInvalid number of bytes: %d\n\r", num_bytes);
 8000930:	68fa      	ldr	r2, [r7, #12]
 8000932:	4b3c      	ldr	r3, [pc, #240]	@ (8000a24 <enc_buffer_read+0x10c>)
 8000934:	0011      	movs	r1, r2
 8000936:	0018      	movs	r0, r3
 8000938:	f002 f952 	bl	8002be0 <iprintf>
		return 0;
 800093c:	2300      	movs	r3, #0
 800093e:	e06c      	b.n	8000a1a <enc_buffer_read+0x102>
	}
	if (start_address > 0x1FFF) {
 8000940:	210a      	movs	r1, #10
 8000942:	187b      	adds	r3, r7, r1
 8000944:	881a      	ldrh	r2, [r3, #0]
 8000946:	2380      	movs	r3, #128	@ 0x80
 8000948:	019b      	lsls	r3, r3, #6
 800094a:	429a      	cmp	r2, r3
 800094c:	d308      	bcc.n	8000960 <enc_buffer_read+0x48>
		printf("\n\rInvalid address: %04X\n\r", start_address);
 800094e:	187b      	adds	r3, r7, r1
 8000950:	881a      	ldrh	r2, [r3, #0]
 8000952:	4b35      	ldr	r3, [pc, #212]	@ (8000a28 <enc_buffer_read+0x110>)
 8000954:	0011      	movs	r1, r2
 8000956:	0018      	movs	r0, r3
 8000958:	f002 f942 	bl	8002be0 <iprintf>
		return 0;
 800095c:	2300      	movs	r3, #0
 800095e:	e05c      	b.n	8000a1a <enc_buffer_read+0x102>
	}

	if (start_address < RX_BUFFER_START
			|| (start_address + num_bytes) > RX_BUFFER_END) {
 8000960:	210a      	movs	r1, #10
 8000962:	187b      	adds	r3, r7, r1
 8000964:	881a      	ldrh	r2, [r3, #0]
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	18d2      	adds	r2, r2, r3
	if (start_address < RX_BUFFER_START
 800096a:	23e0      	movs	r3, #224	@ 0xe0
 800096c:	015b      	lsls	r3, r3, #5
 800096e:	429a      	cmp	r2, r3
 8000970:	db08      	blt.n	8000984 <enc_buffer_read+0x6c>
		printf("\nInvalid RX Address: Start 0x%04X, Size %d\n", start_address,
 8000972:	187b      	adds	r3, r7, r1
 8000974:	8819      	ldrh	r1, [r3, #0]
 8000976:	68fa      	ldr	r2, [r7, #12]
 8000978:	4b2c      	ldr	r3, [pc, #176]	@ (8000a2c <enc_buffer_read+0x114>)
 800097a:	0018      	movs	r0, r3
 800097c:	f002 f930 	bl	8002be0 <iprintf>
				num_bytes);
		return 0;
 8000980:	2300      	movs	r3, #0
 8000982:	e04a      	b.n	8000a1a <enc_buffer_read+0x102>
	}

	if (num_bytes > 1) {
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	2b01      	cmp	r3, #1
 8000988:	dd01      	ble.n	800098e <enc_buffer_read+0x76>
		enc_set_autoinc();
 800098a:	f7ff fdc7 	bl	800051c <enc_set_autoinc>
	}

	//buffer_init(start_address,start_address+num_bytes);
	uint8_t higher_byte = (uint8_t) ((start_address >> 8) & 0xFF);
 800098e:	210a      	movs	r1, #10
 8000990:	187b      	adds	r3, r7, r1
 8000992:	881b      	ldrh	r3, [r3, #0]
 8000994:	0a1b      	lsrs	r3, r3, #8
 8000996:	b29a      	uxth	r2, r3
 8000998:	2013      	movs	r0, #19
 800099a:	183b      	adds	r3, r7, r0
 800099c:	701a      	strb	r2, [r3, #0]
	uint8_t lower_byte = (uint8_t) (start_address & 0xFF);
 800099e:	2412      	movs	r4, #18
 80009a0:	193b      	adds	r3, r7, r4
 80009a2:	187a      	adds	r2, r7, r1
 80009a4:	8812      	ldrh	r2, [r2, #0]
 80009a6:	701a      	strb	r2, [r3, #0]
	enc_control_write(Bank0, ENC_ERDPTH, higher_byte); // ERDPTH
 80009a8:	183b      	adds	r3, r7, r0
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	001a      	movs	r2, r3
 80009ae:	2101      	movs	r1, #1
 80009b0:	2000      	movs	r0, #0
 80009b2:	f7ff fe69 	bl	8000688 <enc_control_write>
	enc_control_write(Bank0, ENC_ERDPTL, lower_byte); // ERDPTL
 80009b6:	193b      	adds	r3, r7, r4
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	001a      	movs	r2, r3
 80009bc:	2100      	movs	r1, #0
 80009be:	2000      	movs	r0, #0
 80009c0:	f7ff fe62 	bl	8000688 <enc_control_write>
	//printf("Reading %d bytes from buffer starting at address 0x%04X:\n\r",
	//		num_bytes, start_address);
	uint8_t opcode = ENC_READ_BUFFER_OPCODE; // Read buffer memory command
 80009c4:	2011      	movs	r0, #17
 80009c6:	183b      	adds	r3, r7, r0
 80009c8:	223a      	movs	r2, #58	@ 0x3a
 80009ca:	701a      	strb	r2, [r3, #0]
	GPIOB->ODR &= ~SPI2_CS_PIN; // Pull CS Low
 80009cc:	4b18      	ldr	r3, [pc, #96]	@ (8000a30 <enc_buffer_read+0x118>)
 80009ce:	695a      	ldr	r2, [r3, #20]
 80009d0:	4b17      	ldr	r3, [pc, #92]	@ (8000a30 <enc_buffer_read+0x118>)
 80009d2:	4918      	ldr	r1, [pc, #96]	@ (8000a34 <enc_buffer_read+0x11c>)
 80009d4:	400a      	ands	r2, r1
 80009d6:	615a      	str	r2, [r3, #20]
	SPI_WriteByte(opcode);
 80009d8:	183b      	adds	r3, r7, r0
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	0018      	movs	r0, r3
 80009de:	f000 fcf3 	bl	80013c8 <SPI_WriteByte>
	for (int i = 0; i < num_bytes; i++) {
 80009e2:	2300      	movs	r3, #0
 80009e4:	617b      	str	r3, [r7, #20]
 80009e6:	e00b      	b.n	8000a00 <enc_buffer_read+0xe8>
		*data_ptr = SPI_ReadByte(); // Read data
 80009e8:	f000 fd44 	bl	8001474 <SPI_ReadByte>
 80009ec:	0003      	movs	r3, r0
 80009ee:	001a      	movs	r2, r3
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	701a      	strb	r2, [r3, #0]
		//printf("Byte %d: 0x%02X\n\r", i + 1, *data_ptr); // Print each byte
		data_ptr++;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	3301      	adds	r3, #1
 80009f8:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < num_bytes; i++) {
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	3301      	adds	r3, #1
 80009fe:	617b      	str	r3, [r7, #20]
 8000a00:	697a      	ldr	r2, [r7, #20]
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	429a      	cmp	r2, r3
 8000a06:	dbef      	blt.n	80009e8 <enc_buffer_read+0xd0>
	}
	GPIOB->ODR |= SPI2_CS_PIN; // Pull CS High
 8000a08:	4b09      	ldr	r3, [pc, #36]	@ (8000a30 <enc_buffer_read+0x118>)
 8000a0a:	695a      	ldr	r2, [r3, #20]
 8000a0c:	4b08      	ldr	r3, [pc, #32]	@ (8000a30 <enc_buffer_read+0x118>)
 8000a0e:	2180      	movs	r1, #128	@ 0x80
 8000a10:	0149      	lsls	r1, r1, #5
 8000a12:	430a      	orrs	r2, r1
 8000a14:	615a      	str	r2, [r3, #20]
	return (uint16_t) num_bytes;
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	b29b      	uxth	r3, r3
}
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	b007      	add	sp, #28
 8000a20:	bd90      	pop	{r4, r7, pc}
 8000a22:	46c0      	nop			@ (mov r8, r8)
 8000a24:	08003e34 	.word	0x08003e34
 8000a28:	08003e54 	.word	0x08003e54
 8000a2c:	08003e9c 	.word	0x08003e9c
 8000a30:	48000400 	.word	0x48000400
 8000a34:	ffffefff 	.word	0xffffefff

08000a38 <enc_mac_read>:
 *   bank of that register
 *
 * Returns:
 *   8bit data
 */
uint8_t enc_mac_read(uint8_t addr, uint8_t bank) {
 8000a38:	b5b0      	push	{r4, r5, r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	0002      	movs	r2, r0
 8000a40:	1dfb      	adds	r3, r7, #7
 8000a42:	701a      	strb	r2, [r3, #0]
 8000a44:	1dbb      	adds	r3, r7, #6
 8000a46:	1c0a      	adds	r2, r1, #0
 8000a48:	701a      	strb	r2, [r3, #0]
	if (addr > 0x1F) {
 8000a4a:	1dfb      	adds	r3, r7, #7
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	2b1f      	cmp	r3, #31
 8000a50:	d905      	bls.n	8000a5e <enc_mac_read+0x26>
		printf("\nInvalid address: MAC register address range [0, 0x1F]\n");
 8000a52:	4b18      	ldr	r3, [pc, #96]	@ (8000ab4 <enc_mac_read+0x7c>)
 8000a54:	0018      	movs	r0, r3
 8000a56:	f002 f929 	bl	8002cac <puts>
		return 0;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	e026      	b.n	8000aac <enc_mac_read+0x74>
	}

	enc_select_reg_bank(bank);
 8000a5e:	1dbb      	adds	r3, r7, #6
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	0018      	movs	r0, r3
 8000a64:	f7ff fd96 	bl	8000594 <enc_select_reg_bank>
	// Pull CS Low
	GPIOB->ODR &= ~SPI2_CS_PIN;
 8000a68:	4b13      	ldr	r3, [pc, #76]	@ (8000ab8 <enc_mac_read+0x80>)
 8000a6a:	695a      	ldr	r2, [r3, #20]
 8000a6c:	4b12      	ldr	r3, [pc, #72]	@ (8000ab8 <enc_mac_read+0x80>)
 8000a6e:	4913      	ldr	r1, [pc, #76]	@ (8000abc <enc_mac_read+0x84>)
 8000a70:	400a      	ands	r2, r1
 8000a72:	615a      	str	r2, [r3, #20]

	// Send address and read data
	SPI_WriteByte(addr);           // Send the address
 8000a74:	1dfb      	adds	r3, r7, #7
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	0018      	movs	r0, r3
 8000a7a:	f000 fca5 	bl	80013c8 <SPI_WriteByte>
	//SPI_ReadByte();
	uint8_t data = SPI_ReadByte(); // Read the data
 8000a7e:	250f      	movs	r5, #15
 8000a80:	197c      	adds	r4, r7, r5
 8000a82:	f000 fcf7 	bl	8001474 <SPI_ReadByte>
 8000a86:	0003      	movs	r3, r0
 8000a88:	7023      	strb	r3, [r4, #0]

	// Pull CS High
	GPIOB->ODR |= SPI2_CS_PIN;
 8000a8a:	4b0b      	ldr	r3, [pc, #44]	@ (8000ab8 <enc_mac_read+0x80>)
 8000a8c:	695a      	ldr	r2, [r3, #20]
 8000a8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ab8 <enc_mac_read+0x80>)
 8000a90:	2180      	movs	r1, #128	@ 0x80
 8000a92:	0149      	lsls	r1, r1, #5
 8000a94:	430a      	orrs	r2, r1
 8000a96:	615a      	str	r2, [r3, #20]
	printf("Read: Address 0x%02X, Data 0x%02X\n", addr, data);
 8000a98:	1dfb      	adds	r3, r7, #7
 8000a9a:	7819      	ldrb	r1, [r3, #0]
 8000a9c:	197b      	adds	r3, r7, r5
 8000a9e:	781a      	ldrb	r2, [r3, #0]
 8000aa0:	4b07      	ldr	r3, [pc, #28]	@ (8000ac0 <enc_mac_read+0x88>)
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	f002 f89c 	bl	8002be0 <iprintf>

	return data;
 8000aa8:	197b      	adds	r3, r7, r5
 8000aaa:	781b      	ldrb	r3, [r3, #0]
}
 8000aac:	0018      	movs	r0, r3
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	b004      	add	sp, #16
 8000ab2:	bdb0      	pop	{r4, r5, r7, pc}
 8000ab4:	08003ec8 	.word	0x08003ec8
 8000ab8:	48000400 	.word	0x48000400
 8000abc:	ffffefff 	.word	0xffffefff
 8000ac0:	08003f00 	.word	0x08003f00

08000ac4 <enc_phy_write>:
 *   16 bit data to be written
 *
 * Returns:
 *   None
 */
void enc_phy_write(uint8_t addr, uint16_t data) {
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	0002      	movs	r2, r0
 8000acc:	1dfb      	adds	r3, r7, #7
 8000ace:	701a      	strb	r2, [r3, #0]
 8000ad0:	1d3b      	adds	r3, r7, #4
 8000ad2:	1c0a      	adds	r2, r1, #0
 8000ad4:	801a      	strh	r2, [r3, #0]
	enc_control_write(Bank2, ENC_MIREGADR, addr);
 8000ad6:	1dfb      	adds	r3, r7, #7
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	001a      	movs	r2, r3
 8000adc:	2114      	movs	r1, #20
 8000ade:	2002      	movs	r0, #2
 8000ae0:	f7ff fdd2 	bl	8000688 <enc_control_write>
	enc_control_write(Bank2, ENC_MIWRL, (uint8_t) (data & 0xFF));
 8000ae4:	1d3b      	adds	r3, r7, #4
 8000ae6:	881b      	ldrh	r3, [r3, #0]
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	001a      	movs	r2, r3
 8000aec:	2116      	movs	r1, #22
 8000aee:	2002      	movs	r0, #2
 8000af0:	f7ff fdca 	bl	8000688 <enc_control_write>
	enc_control_write(Bank2, ENC_MIWRH, (uint8_t) ((data >> 8) & 0xFF));
 8000af4:	1d3b      	adds	r3, r7, #4
 8000af6:	881b      	ldrh	r3, [r3, #0]
 8000af8:	0a1b      	lsrs	r3, r3, #8
 8000afa:	b29b      	uxth	r3, r3
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	001a      	movs	r2, r3
 8000b00:	2117      	movs	r1, #23
 8000b02:	2002      	movs	r0, #2
 8000b04:	f7ff fdc0 	bl	8000688 <enc_control_write>
	printf("PHY Write: Address 0x%02X, Data 0x%04X\n\r", addr, data);
 8000b08:	1dfb      	adds	r3, r7, #7
 8000b0a:	7819      	ldrb	r1, [r3, #0]
 8000b0c:	1d3b      	adds	r3, r7, #4
 8000b0e:	881a      	ldrh	r2, [r3, #0]
 8000b10:	4b03      	ldr	r3, [pc, #12]	@ (8000b20 <enc_phy_write+0x5c>)
 8000b12:	0018      	movs	r0, r3
 8000b14:	f002 f864 	bl	8002be0 <iprintf>
}
 8000b18:	46c0      	nop			@ (mov r8, r8)
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	b002      	add	sp, #8
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	08003f4c 	.word	0x08003f4c

08000b24 <enc_eth_read>:
 *   Bank of the register
 *
 * Returns:
 *   8 bit data
 */
uint8_t enc_eth_read(uint8_t addr, uint8_t bank) {
 8000b24:	b5b0      	push	{r4, r5, r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	0002      	movs	r2, r0
 8000b2c:	1dfb      	adds	r3, r7, #7
 8000b2e:	701a      	strb	r2, [r3, #0]
 8000b30:	1dbb      	adds	r3, r7, #6
 8000b32:	1c0a      	adds	r2, r1, #0
 8000b34:	701a      	strb	r2, [r3, #0]
	if (addr > 0x1F) {
 8000b36:	1dfb      	adds	r3, r7, #7
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	2b1f      	cmp	r3, #31
 8000b3c:	d903      	bls.n	8000b46 <enc_eth_read+0x22>
		printf("\nInvalid address: MAC register address range [0, 0x1F]\n");
 8000b3e:	4b13      	ldr	r3, [pc, #76]	@ (8000b8c <enc_eth_read+0x68>)
 8000b40:	0018      	movs	r0, r3
 8000b42:	f002 f8b3 	bl	8002cac <puts>
	}
	enc_select_reg_bank(bank);
 8000b46:	1dbb      	adds	r3, r7, #6
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	0018      	movs	r0, r3
 8000b4c:	f7ff fd22 	bl	8000594 <enc_select_reg_bank>
	// Pull CS Low
	GPIOB->ODR &= ~SPI2_CS_PIN;
 8000b50:	4b0f      	ldr	r3, [pc, #60]	@ (8000b90 <enc_eth_read+0x6c>)
 8000b52:	695a      	ldr	r2, [r3, #20]
 8000b54:	4b0e      	ldr	r3, [pc, #56]	@ (8000b90 <enc_eth_read+0x6c>)
 8000b56:	490f      	ldr	r1, [pc, #60]	@ (8000b94 <enc_eth_read+0x70>)
 8000b58:	400a      	ands	r2, r1
 8000b5a:	615a      	str	r2, [r3, #20]

	// Send address and read data
	SPI_WriteByte(addr);           // Send the address
 8000b5c:	1dfb      	adds	r3, r7, #7
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	0018      	movs	r0, r3
 8000b62:	f000 fc31 	bl	80013c8 <SPI_WriteByte>
	//SPI_ReadByte();
	uint8_t data = SPI_ReadByte(); // Read the data
 8000b66:	250f      	movs	r5, #15
 8000b68:	197c      	adds	r4, r7, r5
 8000b6a:	f000 fc83 	bl	8001474 <SPI_ReadByte>
 8000b6e:	0003      	movs	r3, r0
 8000b70:	7023      	strb	r3, [r4, #0]

	// Pull CS High
	GPIOB->ODR |= SPI2_CS_PIN;
 8000b72:	4b07      	ldr	r3, [pc, #28]	@ (8000b90 <enc_eth_read+0x6c>)
 8000b74:	695a      	ldr	r2, [r3, #20]
 8000b76:	4b06      	ldr	r3, [pc, #24]	@ (8000b90 <enc_eth_read+0x6c>)
 8000b78:	2180      	movs	r1, #128	@ 0x80
 8000b7a:	0149      	lsls	r1, r1, #5
 8000b7c:	430a      	orrs	r2, r1
 8000b7e:	615a      	str	r2, [r3, #20]

	return data;
 8000b80:	197b      	adds	r3, r7, r5
 8000b82:	781b      	ldrb	r3, [r3, #0]
}
 8000b84:	0018      	movs	r0, r3
 8000b86:	46bd      	mov	sp, r7
 8000b88:	b004      	add	sp, #16
 8000b8a:	bdb0      	pop	{r4, r5, r7, pc}
 8000b8c:	08003ec8 	.word	0x08003ec8
 8000b90:	48000400 	.word	0x48000400
 8000b94:	ffffefff 	.word	0xffffefff

08000b98 <enc_reset>:
 *   None
 *
 * Returns:
 *   None
 */
void enc_reset(void) {
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
	GPIOB->ODR &= ~SPI2_CS_PIN;
 8000b9c:	4b09      	ldr	r3, [pc, #36]	@ (8000bc4 <enc_reset+0x2c>)
 8000b9e:	695a      	ldr	r2, [r3, #20]
 8000ba0:	4b08      	ldr	r3, [pc, #32]	@ (8000bc4 <enc_reset+0x2c>)
 8000ba2:	4909      	ldr	r1, [pc, #36]	@ (8000bc8 <enc_reset+0x30>)
 8000ba4:	400a      	ands	r2, r1
 8000ba6:	615a      	str	r2, [r3, #20]

	SPI_WriteByte(SPI_WRITE_RESET);
 8000ba8:	20ff      	movs	r0, #255	@ 0xff
 8000baa:	f000 fc0d 	bl	80013c8 <SPI_WriteByte>

	GPIOB->ODR |= SPI2_CS_PIN;
 8000bae:	4b05      	ldr	r3, [pc, #20]	@ (8000bc4 <enc_reset+0x2c>)
 8000bb0:	695a      	ldr	r2, [r3, #20]
 8000bb2:	4b04      	ldr	r3, [pc, #16]	@ (8000bc4 <enc_reset+0x2c>)
 8000bb4:	2180      	movs	r1, #128	@ 0x80
 8000bb6:	0149      	lsls	r1, r1, #5
 8000bb8:	430a      	orrs	r2, r1
 8000bba:	615a      	str	r2, [r3, #20]

}
 8000bbc:	46c0      	nop			@ (mov r8, r8)
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	46c0      	nop			@ (mov r8, r8)
 8000bc4:	48000400 	.word	0x48000400
 8000bc8:	ffffefff 	.word	0xffffefff

08000bcc <enc_init>:
 *   MAc Address
 *
 * Returns:
 *   NOne
 */
void enc_init(const uint8_t *mac) {
 8000bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bce:	b08b      	sub	sp, #44	@ 0x2c
 8000bd0:	af04      	add	r7, sp, #16
 8000bd2:	6078      	str	r0, [r7, #4]
	// Perform a system reset
	enc_reset();
 8000bd4:	f7ff ffe0 	bl	8000b98 <enc_reset>

	// Wait for the ENC28J60 to stabilize (poll CLKRDY bit in ESTAT register)
	while (!(enc_mac_read(ENC_ESTAT, Bank0) & 0x01))
 8000bd8:	46c0      	nop			@ (mov r8, r8)
 8000bda:	2100      	movs	r1, #0
 8000bdc:	201d      	movs	r0, #29
 8000bde:	f7ff ff2b 	bl	8000a38 <enc_mac_read>
 8000be2:	0003      	movs	r3, r0
 8000be4:	001a      	movs	r2, r3
 8000be6:	2301      	movs	r3, #1
 8000be8:	4013      	ands	r3, r2
 8000bea:	d0f6      	beq.n	8000bda <enc_init+0xe>
		; // ESTAT.CLKRDY

	uint16_t rx_start = RX_BUFFER_START;
 8000bec:	2116      	movs	r1, #22
 8000bee:	187b      	adds	r3, r7, r1
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	801a      	strh	r2, [r3, #0]
	uint16_t rx_end = RX_BUFFER_END;
 8000bf4:	2014      	movs	r0, #20
 8000bf6:	183b      	adds	r3, r7, r0
 8000bf8:	4a7d      	ldr	r2, [pc, #500]	@ (8000df0 <enc_init+0x224>)
 8000bfa:	801a      	strh	r2, [r3, #0]
	uint16_t tx_start = TX_BUFFER_START;
 8000bfc:	2412      	movs	r4, #18
 8000bfe:	193b      	adds	r3, r7, r4
 8000c00:	22e0      	movs	r2, #224	@ 0xe0
 8000c02:	0152      	lsls	r2, r2, #5
 8000c04:	801a      	strh	r2, [r3, #0]
	uint16_t tx_end = TX_BUFFER_END;
 8000c06:	2510      	movs	r5, #16
 8000c08:	197b      	adds	r3, r7, r5
 8000c0a:	4a7a      	ldr	r2, [pc, #488]	@ (8000df4 <enc_init+0x228>)
 8000c0c:	801a      	strh	r2, [r3, #0]

	enc_buffer_init(rx_start, rx_end);
 8000c0e:	183b      	adds	r3, r7, r0
 8000c10:	881a      	ldrh	r2, [r3, #0]
 8000c12:	187b      	adds	r3, r7, r1
 8000c14:	881b      	ldrh	r3, [r3, #0]
 8000c16:	0011      	movs	r1, r2
 8000c18:	0018      	movs	r0, r3
 8000c1a:	f7ff fd71 	bl	8000700 <enc_buffer_init>
	enc_control_write(Bank0, ENC_ETXSTL, (uint8_t) (tx_start & 0xFF)); // Low byte
 8000c1e:	193b      	adds	r3, r7, r4
 8000c20:	881b      	ldrh	r3, [r3, #0]
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	001a      	movs	r2, r3
 8000c26:	2104      	movs	r1, #4
 8000c28:	2000      	movs	r0, #0
 8000c2a:	f7ff fd2d 	bl	8000688 <enc_control_write>
	enc_control_write(Bank0, ENC_ETXSTH, (uint8_t) ((tx_start >> 8) & 0xFF)); // High byte
 8000c2e:	193b      	adds	r3, r7, r4
 8000c30:	881b      	ldrh	r3, [r3, #0]
 8000c32:	0a1b      	lsrs	r3, r3, #8
 8000c34:	b29b      	uxth	r3, r3
 8000c36:	b2db      	uxtb	r3, r3
 8000c38:	001a      	movs	r2, r3
 8000c3a:	2105      	movs	r1, #5
 8000c3c:	2000      	movs	r0, #0
 8000c3e:	f7ff fd23 	bl	8000688 <enc_control_write>

	enc_control_write(Bank0, ENC_ETXNDL, (uint8_t) (tx_end & 0xFF)); // Low byte
 8000c42:	197b      	adds	r3, r7, r5
 8000c44:	881b      	ldrh	r3, [r3, #0]
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	001a      	movs	r2, r3
 8000c4a:	2106      	movs	r1, #6
 8000c4c:	2000      	movs	r0, #0
 8000c4e:	f7ff fd1b 	bl	8000688 <enc_control_write>
	enc_control_write(Bank0, ENC_ETXNDH, (uint8_t) ((tx_end >> 8) & 0xFF)); // High byte
 8000c52:	197b      	adds	r3, r7, r5
 8000c54:	881b      	ldrh	r3, [r3, #0]
 8000c56:	0a1b      	lsrs	r3, r3, #8
 8000c58:	b29b      	uxth	r3, r3
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	001a      	movs	r2, r3
 8000c5e:	2107      	movs	r1, #7
 8000c60:	2000      	movs	r0, #0
 8000c62:	f7ff fd11 	bl	8000688 <enc_control_write>

	enc_control_write(Bank1, ERXFCON, 0xB1); // crcen,ucen,pcen,bcen
 8000c66:	22b1      	movs	r2, #177	@ 0xb1
 8000c68:	2118      	movs	r1, #24
 8000c6a:	2001      	movs	r0, #1
 8000c6c:	f7ff fd0c 	bl	8000688 <enc_control_write>
	enc_control_write(Bank1, EPMM0, 0x3F); //pattern match
 8000c70:	223f      	movs	r2, #63	@ 0x3f
 8000c72:	2108      	movs	r1, #8
 8000c74:	2001      	movs	r0, #1
 8000c76:	f7ff fd07 	bl	8000688 <enc_control_write>
	enc_control_write(Bank1, EPMM1, 0x30); //pattern match
 8000c7a:	2230      	movs	r2, #48	@ 0x30
 8000c7c:	2109      	movs	r1, #9
 8000c7e:	2001      	movs	r0, #1
 8000c80:	f7ff fd02 	bl	8000688 <enc_control_write>
	enc_control_write(Bank1, EPMCSL, 0xF9); //pattern match
 8000c84:	22f9      	movs	r2, #249	@ 0xf9
 8000c86:	2110      	movs	r1, #16
 8000c88:	2001      	movs	r0, #1
 8000c8a:	f7ff fcfd 	bl	8000688 <enc_control_write>
	enc_control_write(Bank1, EPMCSH, 0xF7); //pattern match
 8000c8e:	22f7      	movs	r2, #247	@ 0xf7
 8000c90:	2111      	movs	r1, #17
 8000c92:	2001      	movs	r0, #1
 8000c94:	f7ff fcf8 	bl	8000688 <enc_control_write>

	uint8_t read_macon1 = enc_mac_read(0x00, 2); //mac enable for reception
 8000c98:	250f      	movs	r5, #15
 8000c9a:	197c      	adds	r4, r7, r5
 8000c9c:	2102      	movs	r1, #2
 8000c9e:	2000      	movs	r0, #0
 8000ca0:	f7ff feca 	bl	8000a38 <enc_mac_read>
 8000ca4:	0003      	movs	r3, r0
 8000ca6:	7023      	strb	r3, [r4, #0]
	enc_control_write(Bank2, ENC_MACON1, (read_macon1 | (1 << 0))); //mac enable for reception
 8000ca8:	197b      	adds	r3, r7, r5
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	2201      	movs	r2, #1
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	001a      	movs	r2, r3
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	2002      	movs	r0, #2
 8000cb8:	f7ff fce6 	bl	8000688 <enc_control_write>

	enc_control_write(Bank2, MACON3, 0x32); //MACON3_PADCFG0|MACON3_TXCRCEN|MACON3_FRMLNEN)
 8000cbc:	2232      	movs	r2, #50	@ 0x32
 8000cbe:	2102      	movs	r1, #2
 8000cc0:	2002      	movs	r0, #2
 8000cc2:	f7ff fce1 	bl	8000688 <enc_control_write>

	enc_control_write(Bank2, MAIPGL, 0x12); // MAIPGL: Non-back-to-back gap
 8000cc6:	2212      	movs	r2, #18
 8000cc8:	2106      	movs	r1, #6
 8000cca:	2002      	movs	r0, #2
 8000ccc:	f7ff fcdc 	bl	8000688 <enc_control_write>
	enc_control_write(Bank2, MAIPGH, 0x0C); // MAIPGH: Non-back-to-back gap (Half Duplex)
 8000cd0:	220c      	movs	r2, #12
 8000cd2:	2107      	movs	r1, #7
 8000cd4:	2002      	movs	r0, #2
 8000cd6:	f7ff fcd7 	bl	8000688 <enc_control_write>

	enc_control_write(Bank2, MABBIPG, 0x12); // MABBIPG: Back-to-back gap (Full Duplex)
 8000cda:	2212      	movs	r2, #18
 8000cdc:	2104      	movs	r1, #4
 8000cde:	2002      	movs	r0, #2
 8000ce0:	f7ff fcd2 	bl	8000688 <enc_control_write>

	enc_control_write(Bank2, MACON4, 0x40); // MACON4: IEEE compliance00
 8000ce4:	2240      	movs	r2, #64	@ 0x40
 8000ce6:	2103      	movs	r1, #3
 8000ce8:	2002      	movs	r0, #2
 8000cea:	f7ff fccd 	bl	8000688 <enc_control_write>

	// Set maximum frame length (1518 bytes for standard Ethernet)
	enc_control_write(Bank2, MAMXFLL, 0xDC); // MAMXFLL
 8000cee:	22dc      	movs	r2, #220	@ 0xdc
 8000cf0:	210a      	movs	r1, #10
 8000cf2:	2002      	movs	r0, #2
 8000cf4:	f7ff fcc8 	bl	8000688 <enc_control_write>
	enc_control_write(Bank2, MAMXFLH, 0x05); // MAMXFLH
 8000cf8:	2205      	movs	r2, #5
 8000cfa:	210b      	movs	r1, #11
 8000cfc:	2002      	movs	r0, #2
 8000cfe:	f7ff fcc3 	bl	8000688 <enc_control_write>

	// Configure MAC Address (write in reverse order)
	enc_control_write(Bank3, ENC_MAADR6, mac[5]); // MAADR6
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	3305      	adds	r3, #5
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	001a      	movs	r2, r3
 8000d0a:	2101      	movs	r1, #1
 8000d0c:	2003      	movs	r0, #3
 8000d0e:	f7ff fcbb 	bl	8000688 <enc_control_write>
	enc_control_write(Bank3, ENC_MAADR5, mac[4]); // MAADR5
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	3304      	adds	r3, #4
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	001a      	movs	r2, r3
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	2003      	movs	r0, #3
 8000d1e:	f7ff fcb3 	bl	8000688 <enc_control_write>
	enc_control_write(Bank3, ENC_MAADR4, mac[3]); // MAADR4
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	3303      	adds	r3, #3
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	001a      	movs	r2, r3
 8000d2a:	2103      	movs	r1, #3
 8000d2c:	2003      	movs	r0, #3
 8000d2e:	f7ff fcab 	bl	8000688 <enc_control_write>
	enc_control_write(Bank3, ENC_MAADR3, mac[2]); // MAADR3
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	3302      	adds	r3, #2
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	001a      	movs	r2, r3
 8000d3a:	2102      	movs	r1, #2
 8000d3c:	2003      	movs	r0, #3
 8000d3e:	f7ff fca3 	bl	8000688 <enc_control_write>
	enc_control_write(Bank3, ENC_MAADR2, mac[1]); // MAADR2
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	3301      	adds	r3, #1
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	001a      	movs	r2, r3
 8000d4a:	2105      	movs	r1, #5
 8000d4c:	2003      	movs	r0, #3
 8000d4e:	f7ff fc9b 	bl	8000688 <enc_control_write>
	enc_control_write(Bank3, ENC_MAADR1, mac[0]); // MAADR1
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	001a      	movs	r2, r3
 8000d58:	2104      	movs	r1, #4
 8000d5a:	2003      	movs	r0, #3
 8000d5c:	f7ff fc94 	bl	8000688 <enc_control_write>
	enc_phy_write(PHCON2, 0x0100);
 8000d60:	2380      	movs	r3, #128	@ 0x80
 8000d62:	005b      	lsls	r3, r3, #1
 8000d64:	0019      	movs	r1, r3
 8000d66:	2010      	movs	r0, #16
 8000d68:	f7ff feac 	bl	8000ac4 <enc_phy_write>

	// Configure PHY LEDs for activity indication
	enc_control_write(Bank0, ENC_EIE, 0XC0); // reception enable bit
 8000d6c:	22c0      	movs	r2, #192	@ 0xc0
 8000d6e:	211b      	movs	r1, #27
 8000d70:	2000      	movs	r0, #0
 8000d72:	f7ff fc89 	bl	8000688 <enc_control_write>
	enc_control_write(Bank0, ENC_ECON1, 0X04); // reception enable bit
 8000d76:	2204      	movs	r2, #4
 8000d78:	211f      	movs	r1, #31
 8000d7a:	2000      	movs	r0, #0
 8000d7c:	f7ff fc84 	bl	8000688 <enc_control_write>

	printf("\nENC28J60 Initialization Complete.\n");
 8000d80:	4b1d      	ldr	r3, [pc, #116]	@ (8000df8 <enc_init+0x22c>)
 8000d82:	0018      	movs	r0, r3
 8000d84:	f001 ff92 	bl	8002cac <puts>
	printf("MAC Address: %02X:%02X:%02X:%02X:%02X:%02X\n", mac[0], mac[1],
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	001c      	movs	r4, r3
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	3301      	adds	r3, #1
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	001d      	movs	r5, r3
			mac[2], mac[3], mac[4], mac[5]);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	3302      	adds	r3, #2
 8000d9a:	781b      	ldrb	r3, [r3, #0]
	printf("MAC Address: %02X:%02X:%02X:%02X:%02X:%02X\n", mac[0], mac[1],
 8000d9c:	001e      	movs	r6, r3
			mac[2], mac[3], mac[4], mac[5]);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	3303      	adds	r3, #3
 8000da2:	781b      	ldrb	r3, [r3, #0]
	printf("MAC Address: %02X:%02X:%02X:%02X:%02X:%02X\n", mac[0], mac[1],
 8000da4:	001a      	movs	r2, r3
			mac[2], mac[3], mac[4], mac[5]);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	3304      	adds	r3, #4
 8000daa:	781b      	ldrb	r3, [r3, #0]
	printf("MAC Address: %02X:%02X:%02X:%02X:%02X:%02X\n", mac[0], mac[1],
 8000dac:	0019      	movs	r1, r3
			mac[2], mac[3], mac[4], mac[5]);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	3305      	adds	r3, #5
 8000db2:	781b      	ldrb	r3, [r3, #0]
	printf("MAC Address: %02X:%02X:%02X:%02X:%02X:%02X\n", mac[0], mac[1],
 8000db4:	4811      	ldr	r0, [pc, #68]	@ (8000dfc <enc_init+0x230>)
 8000db6:	9302      	str	r3, [sp, #8]
 8000db8:	9101      	str	r1, [sp, #4]
 8000dba:	9200      	str	r2, [sp, #0]
 8000dbc:	0033      	movs	r3, r6
 8000dbe:	002a      	movs	r2, r5
 8000dc0:	0021      	movs	r1, r4
 8000dc2:	f001 ff0d 	bl	8002be0 <iprintf>
	uint8_t rev = enc_eth_read(ENC_EREVID, Bank3);
 8000dc6:	250e      	movs	r5, #14
 8000dc8:	197c      	adds	r4, r7, r5
 8000dca:	2103      	movs	r1, #3
 8000dcc:	2012      	movs	r0, #18
 8000dce:	f7ff fea9 	bl	8000b24 <enc_eth_read>
 8000dd2:	0003      	movs	r3, r0
 8000dd4:	7023      	strb	r3, [r4, #0]
	if (rev > 5)
 8000dd6:	197b      	adds	r3, r7, r5
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	2b05      	cmp	r3, #5
 8000ddc:	d904      	bls.n	8000de8 <enc_init+0x21c>
		++rev;
 8000dde:	197b      	adds	r3, r7, r5
 8000de0:	197a      	adds	r2, r7, r5
 8000de2:	7812      	ldrb	r2, [r2, #0]
 8000de4:	3201      	adds	r2, #1
 8000de6:	701a      	strb	r2, [r3, #0]
}
 8000de8:	46c0      	nop			@ (mov r8, r8)
 8000dea:	46bd      	mov	sp, r7
 8000dec:	b007      	add	sp, #28
 8000dee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000df0:	00001bff 	.word	0x00001bff
 8000df4:	00001fff 	.word	0x00001fff
 8000df8:	08003f78 	.word	0x08003f78
 8000dfc:	08003f9c 	.word	0x08003f9c

08000e00 <USART2_IRQHandler>:
volatile uint32_t tick_counter = 0;

/*
 * This function handles the ISR for UART Interrupt
 */
void USART2_IRQHandler(void) {
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
	// Check if RXNE flag is set (data received)
	if (USART2->ISR & USART_ISR_RXNE) {
 8000e06:	4b1f      	ldr	r3, [pc, #124]	@ (8000e84 <USART2_IRQHandler+0x84>)
 8000e08:	69db      	ldr	r3, [r3, #28]
 8000e0a:	2220      	movs	r2, #32
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	d00b      	beq.n	8000e28 <USART2_IRQHandler+0x28>
		char newval = USART2->RDR; // Read the received character
 8000e10:	4b1c      	ldr	r3, [pc, #112]	@ (8000e84 <USART2_IRQHandler+0x84>)
 8000e12:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000e14:	b29b      	uxth	r3, r3
 8000e16:	b2da      	uxtb	r2, r3
 8000e18:	1dfb      	adds	r3, r7, #7
 8000e1a:	701a      	strb	r2, [r3, #0]
		cbfifo_enqueue(&fiforx, &newval, sizeof(newval));
 8000e1c:	1df9      	adds	r1, r7, #7
 8000e1e:	4b1a      	ldr	r3, [pc, #104]	@ (8000e88 <USART2_IRQHandler+0x88>)
 8000e20:	2201      	movs	r2, #1
 8000e22:	0018      	movs	r0, r3
 8000e24:	f7ff fad2 	bl	80003cc <cbfifo_enqueue>
	}
	if (USART2->ISR & USART_ISR_TXE) {
 8000e28:	4b16      	ldr	r3, [pc, #88]	@ (8000e84 <USART2_IRQHandler+0x84>)
 8000e2a:	69db      	ldr	r3, [r3, #28]
 8000e2c:	2280      	movs	r2, #128	@ 0x80
 8000e2e:	4013      	ands	r3, r2
 8000e30:	d023      	beq.n	8000e7a <USART2_IRQHandler+0x7a>
		char newval; // Read the received character
		if (cbfifo_dequeue(&fifotx, &newval, sizeof(newval)) > 0) {
 8000e32:	1db9      	adds	r1, r7, #6
 8000e34:	4b15      	ldr	r3, [pc, #84]	@ (8000e8c <USART2_IRQHandler+0x8c>)
 8000e36:	2201      	movs	r2, #1
 8000e38:	0018      	movs	r0, r3
 8000e3a:	f7ff fb16 	bl	800046a <cbfifo_dequeue>
 8000e3e:	1e03      	subs	r3, r0, #0
 8000e40:	d015      	beq.n	8000e6e <USART2_IRQHandler+0x6e>
			if (newval == '\n') {
 8000e42:	1dbb      	adds	r3, r7, #6
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	2b0a      	cmp	r3, #10
 8000e48:	d10c      	bne.n	8000e64 <USART2_IRQHandler+0x64>
				USART2->TDR = '\r';
 8000e4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e84 <USART2_IRQHandler+0x84>)
 8000e4c:	220d      	movs	r2, #13
 8000e4e:	851a      	strh	r2, [r3, #40]	@ 0x28
				while (!(USART2->ISR & USART_ISR_TXE))
 8000e50:	46c0      	nop			@ (mov r8, r8)
 8000e52:	4b0c      	ldr	r3, [pc, #48]	@ (8000e84 <USART2_IRQHandler+0x84>)
 8000e54:	69db      	ldr	r3, [r3, #28]
 8000e56:	2280      	movs	r2, #128	@ 0x80
 8000e58:	4013      	ands	r3, r2
 8000e5a:	d0fa      	beq.n	8000e52 <USART2_IRQHandler+0x52>
					;
				USART2->TDR = '\n';
 8000e5c:	4b09      	ldr	r3, [pc, #36]	@ (8000e84 <USART2_IRQHandler+0x84>)
 8000e5e:	220a      	movs	r2, #10
 8000e60:	851a      	strh	r2, [r3, #40]	@ 0x28
			}
		} else {
			USART2->CR1 &= (~(USART_CR1_TXEIE));
		}
	}
}
 8000e62:	e00a      	b.n	8000e7a <USART2_IRQHandler+0x7a>
				USART2->TDR = newval; // Send the character
 8000e64:	1dbb      	adds	r3, r7, #6
 8000e66:	781a      	ldrb	r2, [r3, #0]
 8000e68:	4b06      	ldr	r3, [pc, #24]	@ (8000e84 <USART2_IRQHandler+0x84>)
 8000e6a:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 8000e6c:	e005      	b.n	8000e7a <USART2_IRQHandler+0x7a>
			USART2->CR1 &= (~(USART_CR1_TXEIE));
 8000e6e:	4b05      	ldr	r3, [pc, #20]	@ (8000e84 <USART2_IRQHandler+0x84>)
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	4b04      	ldr	r3, [pc, #16]	@ (8000e84 <USART2_IRQHandler+0x84>)
 8000e74:	2180      	movs	r1, #128	@ 0x80
 8000e76:	438a      	bics	r2, r1
 8000e78:	601a      	str	r2, [r3, #0]
}
 8000e7a:	46c0      	nop			@ (mov r8, r8)
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	b002      	add	sp, #8
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	46c0      	nop			@ (mov r8, r8)
 8000e84:	40004400 	.word	0x40004400
 8000e88:	20000118 	.word	0x20000118
 8000e8c:	2000008c 	.word	0x2000008c

08000e90 <SysTick_Handler>:
/*
 * This function increments tick counter and global tick counter every 10ms.
 * Tick counter is used to run the functions whereas global tick counter is used for
 * keeping a time record since startup.
 */
void SysTick_Handler(void) {
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
	tick_counter++;
 8000e94:	4b03      	ldr	r3, [pc, #12]	@ (8000ea4 <SysTick_Handler+0x14>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	1c5a      	adds	r2, r3, #1
 8000e9a:	4b02      	ldr	r3, [pc, #8]	@ (8000ea4 <SysTick_Handler+0x14>)
 8000e9c:	601a      	str	r2, [r3, #0]
	//global_tick_counter++;
}
 8000e9e:	46c0      	nop			@ (mov r8, r8)
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	20000088 	.word	0x20000088

08000ea8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	0002      	movs	r2, r0
 8000eb0:	1dfb      	adds	r3, r7, #7
 8000eb2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000eb4:	1dfb      	adds	r3, r7, #7
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	2b7f      	cmp	r3, #127	@ 0x7f
 8000eba:	d809      	bhi.n	8000ed0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ebc:	1dfb      	adds	r3, r7, #7
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	001a      	movs	r2, r3
 8000ec2:	231f      	movs	r3, #31
 8000ec4:	401a      	ands	r2, r3
 8000ec6:	4b04      	ldr	r3, [pc, #16]	@ (8000ed8 <__NVIC_EnableIRQ+0x30>)
 8000ec8:	2101      	movs	r1, #1
 8000eca:	4091      	lsls	r1, r2
 8000ecc:	000a      	movs	r2, r1
 8000ece:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000ed0:	46c0      	nop			@ (mov r8, r8)
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	b002      	add	sp, #8
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	e000e100 	.word	0xe000e100

08000edc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000edc:	b590      	push	{r4, r7, lr}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	0002      	movs	r2, r0
 8000ee4:	6039      	str	r1, [r7, #0]
 8000ee6:	1dfb      	adds	r3, r7, #7
 8000ee8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000eea:	1dfb      	adds	r3, r7, #7
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ef0:	d828      	bhi.n	8000f44 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ef2:	4a2f      	ldr	r2, [pc, #188]	@ (8000fb0 <__NVIC_SetPriority+0xd4>)
 8000ef4:	1dfb      	adds	r3, r7, #7
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	b25b      	sxtb	r3, r3
 8000efa:	089b      	lsrs	r3, r3, #2
 8000efc:	33c0      	adds	r3, #192	@ 0xc0
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	589b      	ldr	r3, [r3, r2]
 8000f02:	1dfa      	adds	r2, r7, #7
 8000f04:	7812      	ldrb	r2, [r2, #0]
 8000f06:	0011      	movs	r1, r2
 8000f08:	2203      	movs	r2, #3
 8000f0a:	400a      	ands	r2, r1
 8000f0c:	00d2      	lsls	r2, r2, #3
 8000f0e:	21ff      	movs	r1, #255	@ 0xff
 8000f10:	4091      	lsls	r1, r2
 8000f12:	000a      	movs	r2, r1
 8000f14:	43d2      	mvns	r2, r2
 8000f16:	401a      	ands	r2, r3
 8000f18:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	019b      	lsls	r3, r3, #6
 8000f1e:	22ff      	movs	r2, #255	@ 0xff
 8000f20:	401a      	ands	r2, r3
 8000f22:	1dfb      	adds	r3, r7, #7
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	0018      	movs	r0, r3
 8000f28:	2303      	movs	r3, #3
 8000f2a:	4003      	ands	r3, r0
 8000f2c:	00db      	lsls	r3, r3, #3
 8000f2e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f30:	481f      	ldr	r0, [pc, #124]	@ (8000fb0 <__NVIC_SetPriority+0xd4>)
 8000f32:	1dfb      	adds	r3, r7, #7
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	b25b      	sxtb	r3, r3
 8000f38:	089b      	lsrs	r3, r3, #2
 8000f3a:	430a      	orrs	r2, r1
 8000f3c:	33c0      	adds	r3, #192	@ 0xc0
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000f42:	e031      	b.n	8000fa8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f44:	4a1b      	ldr	r2, [pc, #108]	@ (8000fb4 <__NVIC_SetPriority+0xd8>)
 8000f46:	1dfb      	adds	r3, r7, #7
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	0019      	movs	r1, r3
 8000f4c:	230f      	movs	r3, #15
 8000f4e:	400b      	ands	r3, r1
 8000f50:	3b08      	subs	r3, #8
 8000f52:	089b      	lsrs	r3, r3, #2
 8000f54:	3306      	adds	r3, #6
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	18d3      	adds	r3, r2, r3
 8000f5a:	3304      	adds	r3, #4
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	1dfa      	adds	r2, r7, #7
 8000f60:	7812      	ldrb	r2, [r2, #0]
 8000f62:	0011      	movs	r1, r2
 8000f64:	2203      	movs	r2, #3
 8000f66:	400a      	ands	r2, r1
 8000f68:	00d2      	lsls	r2, r2, #3
 8000f6a:	21ff      	movs	r1, #255	@ 0xff
 8000f6c:	4091      	lsls	r1, r2
 8000f6e:	000a      	movs	r2, r1
 8000f70:	43d2      	mvns	r2, r2
 8000f72:	401a      	ands	r2, r3
 8000f74:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	019b      	lsls	r3, r3, #6
 8000f7a:	22ff      	movs	r2, #255	@ 0xff
 8000f7c:	401a      	ands	r2, r3
 8000f7e:	1dfb      	adds	r3, r7, #7
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	0018      	movs	r0, r3
 8000f84:	2303      	movs	r3, #3
 8000f86:	4003      	ands	r3, r0
 8000f88:	00db      	lsls	r3, r3, #3
 8000f8a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f8c:	4809      	ldr	r0, [pc, #36]	@ (8000fb4 <__NVIC_SetPriority+0xd8>)
 8000f8e:	1dfb      	adds	r3, r7, #7
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	001c      	movs	r4, r3
 8000f94:	230f      	movs	r3, #15
 8000f96:	4023      	ands	r3, r4
 8000f98:	3b08      	subs	r3, #8
 8000f9a:	089b      	lsrs	r3, r3, #2
 8000f9c:	430a      	orrs	r2, r1
 8000f9e:	3306      	adds	r3, #6
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	18c3      	adds	r3, r0, r3
 8000fa4:	3304      	adds	r3, #4
 8000fa6:	601a      	str	r2, [r3, #0]
}
 8000fa8:	46c0      	nop			@ (mov r8, r8)
 8000faa:	46bd      	mov	sp, r7
 8000fac:	b003      	add	sp, #12
 8000fae:	bd90      	pop	{r4, r7, pc}
 8000fb0:	e000e100 	.word	0xe000e100
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <uart_init>:
#define F_TIM_CLOCK (48UL*1000UL*1000UL)	// 48 MHz
#define PWM_FREQUENCY (500)
#define PWM_MAX_DUTY_VALUE ( (F_TIM_CLOCK / (PWM_FREQUENCY * PWM_PRESCALER)) - 1)
#define PWM_PRESCALER (2)

void uart_init(void) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
	setvbuf(stdout, NULL, _IONBF, 0);
 8000fbc:	4b2a      	ldr	r3, [pc, #168]	@ (8001068 <uart_init+0xb0>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	6898      	ldr	r0, [r3, #8]
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	2202      	movs	r2, #2
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	f001 fe7a 	bl	8002cc0 <setvbuf>
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN; // Enable GPIOA clock
 8000fcc:	4b27      	ldr	r3, [pc, #156]	@ (800106c <uart_init+0xb4>)
 8000fce:	695a      	ldr	r2, [r3, #20]
 8000fd0:	4b26      	ldr	r3, [pc, #152]	@ (800106c <uart_init+0xb4>)
 8000fd2:	2180      	movs	r1, #128	@ 0x80
 8000fd4:	0289      	lsls	r1, r1, #10
 8000fd6:	430a      	orrs	r2, r1
 8000fd8:	615a      	str	r2, [r3, #20]
	// Set PA2 (TX) and PA3 (RX) to alternate function mode (AF7 for USART2)
	GPIOA->MODER &= ~(GPIO_MODER_MODER2 | GPIO_MODER_MODER3);			// Clear
 8000fda:	2390      	movs	r3, #144	@ 0x90
 8000fdc:	05db      	lsls	r3, r3, #23
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	2390      	movs	r3, #144	@ 0x90
 8000fe2:	05db      	lsls	r3, r3, #23
 8000fe4:	21f0      	movs	r1, #240	@ 0xf0
 8000fe6:	438a      	bics	r2, r1
 8000fe8:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (GPIO_MODER_MODER2_1 | GPIO_MODER_MODER3_1);// Set AF mode
 8000fea:	2390      	movs	r3, #144	@ 0x90
 8000fec:	05db      	lsls	r3, r3, #23
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	2390      	movs	r3, #144	@ 0x90
 8000ff2:	05db      	lsls	r3, r3, #23
 8000ff4:	21a0      	movs	r1, #160	@ 0xa0
 8000ff6:	430a      	orrs	r2, r1
 8000ff8:	601a      	str	r2, [r3, #0]
	GPIOA->AFR[0] |= (1 << GPIO_AFRL_AFSEL2_Pos) | (1 << GPIO_AFRL_AFSEL3_Pos); // AF7 (USART2) for PA2 and PA3
 8000ffa:	2390      	movs	r3, #144	@ 0x90
 8000ffc:	05db      	lsls	r3, r3, #23
 8000ffe:	6a1a      	ldr	r2, [r3, #32]
 8001000:	2390      	movs	r3, #144	@ 0x90
 8001002:	05db      	lsls	r3, r3, #23
 8001004:	2188      	movs	r1, #136	@ 0x88
 8001006:	0149      	lsls	r1, r1, #5
 8001008:	430a      	orrs	r2, r1
 800100a:	621a      	str	r2, [r3, #32]
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;				// Enable USART2 clock
 800100c:	4b17      	ldr	r3, [pc, #92]	@ (800106c <uart_init+0xb4>)
 800100e:	69da      	ldr	r2, [r3, #28]
 8001010:	4b16      	ldr	r3, [pc, #88]	@ (800106c <uart_init+0xb4>)
 8001012:	2180      	movs	r1, #128	@ 0x80
 8001014:	0289      	lsls	r1, r1, #10
 8001016:	430a      	orrs	r2, r1
 8001018:	61da      	str	r2, [r3, #28]
	USART2->BRR = USART_BRR_VALUE;// Configure baud rate (assuming 24MHz APB1 clock and 19200 baud rate)
 800101a:	4b15      	ldr	r3, [pc, #84]	@ (8001070 <uart_init+0xb8>)
 800101c:	4a15      	ldr	r2, [pc, #84]	@ (8001074 <uart_init+0xbc>)
 800101e:	60da      	str	r2, [r3, #12]
	USART2->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_RXNEIE; // Enable TX, RX, and RX interrupt
 8001020:	4b13      	ldr	r3, [pc, #76]	@ (8001070 <uart_init+0xb8>)
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	4b12      	ldr	r3, [pc, #72]	@ (8001070 <uart_init+0xb8>)
 8001026:	212c      	movs	r1, #44	@ 0x2c
 8001028:	430a      	orrs	r2, r1
 800102a:	601a      	str	r2, [r3, #0]
	USART2->CR1 |= USART_PARITY_CONFIG;
 800102c:	4b10      	ldr	r3, [pc, #64]	@ (8001070 <uart_init+0xb8>)
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	4b0f      	ldr	r3, [pc, #60]	@ (8001070 <uart_init+0xb8>)
 8001032:	21c0      	movs	r1, #192	@ 0xc0
 8001034:	00c9      	lsls	r1, r1, #3
 8001036:	430a      	orrs	r2, r1
 8001038:	601a      	str	r2, [r3, #0]
	USART2->CR1 |= USART_WORD_LENGTH;
 800103a:	4b0d      	ldr	r3, [pc, #52]	@ (8001070 <uart_init+0xb8>)
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	4b0c      	ldr	r3, [pc, #48]	@ (8001070 <uart_init+0xb8>)
 8001040:	2180      	movs	r1, #128	@ 0x80
 8001042:	0149      	lsls	r1, r1, #5
 8001044:	430a      	orrs	r2, r1
 8001046:	601a      	str	r2, [r3, #0]
	USART2->CR2 |= USART_STOP_BITS;
 8001048:	4a09      	ldr	r2, [pc, #36]	@ (8001070 <uart_init+0xb8>)
 800104a:	4b09      	ldr	r3, [pc, #36]	@ (8001070 <uart_init+0xb8>)
 800104c:	6852      	ldr	r2, [r2, #4]
 800104e:	605a      	str	r2, [r3, #4]
	USART2->CR1 |= USART_CR1_UE;								// Enable USART
 8001050:	4b07      	ldr	r3, [pc, #28]	@ (8001070 <uart_init+0xb8>)
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	4b06      	ldr	r3, [pc, #24]	@ (8001070 <uart_init+0xb8>)
 8001056:	2101      	movs	r1, #1
 8001058:	430a      	orrs	r2, r1
 800105a:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(USART2_IRQn);			// Enable USART2 interrupt in NVIC
 800105c:	201c      	movs	r0, #28
 800105e:	f7ff ff23 	bl	8000ea8 <__NVIC_EnableIRQ>
}
 8001062:	46c0      	nop			@ (mov r8, r8)
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	2000001c 	.word	0x2000001c
 800106c:	40021000 	.word	0x40021000
 8001070:	40004400 	.word	0x40004400
 8001074:	000004e2 	.word	0x000004e2

08001078 <SysTick_Init>:
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
	MODIFY_FIELD(GPIOA->MODER, GPIO_MODER_MODER5, ESF_GPIO_MODER_OUTPUT);

}

void SysTick_Init(void) {
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
    SysTick->LOAD = (F_TIM_CLOCK - 1); // Configure SysTick to generate 1 interrupt every 1 second
 800107c:	4b08      	ldr	r3, [pc, #32]	@ (80010a0 <SysTick_Init+0x28>)
 800107e:	4a09      	ldr	r2, [pc, #36]	@ (80010a4 <SysTick_Init+0x2c>)
 8001080:	605a      	str	r2, [r3, #4]
    NVIC_SetPriority(SysTick_IRQn, 3); // Set priority level (optional)
 8001082:	2301      	movs	r3, #1
 8001084:	425b      	negs	r3, r3
 8001086:	2103      	movs	r1, #3
 8001088:	0018      	movs	r0, r3
 800108a:	f7ff ff27 	bl	8000edc <__NVIC_SetPriority>
    SysTick->VAL = 0; // Clear the current value register
 800108e:	4b04      	ldr	r3, [pc, #16]	@ (80010a0 <SysTick_Init+0x28>)
 8001090:	2200      	movs	r2, #0
 8001092:	609a      	str	r2, [r3, #8]
    SysTick->CTRL = SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk; // Enable SysTick with interrupt
 8001094:	4b02      	ldr	r3, [pc, #8]	@ (80010a0 <SysTick_Init+0x28>)
 8001096:	2203      	movs	r2, #3
 8001098:	601a      	str	r2, [r3, #0]
}
 800109a:	46c0      	nop			@ (mov r8, r8)
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	e000e010 	.word	0xe000e010
 80010a4:	02dc6bff 	.word	0x02dc6bff

080010a8 <main>:
uint8_t device_mac[6] = { 0x02, 0x04, 0xA3, 0x3C, 0x4D, 0x50 }; // Default MAC
uint8_t target_mac[6] = { 0xFF, 0XFF, 0XFF, 0xFF, 0XFF, 0XFF }; // Default MAC
uint8_t device_ip[4] = { 192, 168, 1, 100 }; // Default IP Address
uint8_t target_ip[4] = { 192, 168, 1, 1 };

int main(void) {
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
	/*
	 * Clocks: Processor = 48 Mhz. AHB = 48 MHz. APB = 24 MHz.
	 *
	 */
	SysTick_Init();
 80010ac:	f7ff ffe4 	bl	8001078 <SysTick_Init>
	SPI_Init();
 80010b0:	f000 f944 	bl	800133c <SPI_Init>
	uart_init(); //UART 2 Initialisation for Serial COmmunication
 80010b4:	f7ff ff80 	bl	8000fb8 <uart_init>
	cbfifo_init(&fiforx); // Initialising RX Buffer
 80010b8:	4b0a      	ldr	r3, [pc, #40]	@ (80010e4 <main+0x3c>)
 80010ba:	0018      	movs	r0, r3
 80010bc:	f7ff f96f 	bl	800039e <cbfifo_init>
	cbfifo_init(&fifotx); // Initialising TX buffer
 80010c0:	4b09      	ldr	r3, [pc, #36]	@ (80010e8 <main+0x40>)
 80010c2:	0018      	movs	r0, r3
 80010c4:	f7ff f96b 	bl	800039e <cbfifo_init>
	printf("\nWelcome to ESD Demo!\n");
 80010c8:	4b08      	ldr	r3, [pc, #32]	@ (80010ec <main+0x44>)
 80010ca:	0018      	movs	r0, r3
 80010cc:	f001 fdee 	bl	8002cac <puts>
	enc_init(device_mac);
 80010d0:	4b07      	ldr	r3, [pc, #28]	@ (80010f0 <main+0x48>)
 80010d2:	0018      	movs	r0, r3
 80010d4:	f7ff fd7a 	bl	8000bcc <enc_init>
	Init_Interrupt();
 80010d8:	f000 f8e0 	bl	800129c <Init_Interrupt>
	while (1) {
		packetLoop();
 80010dc:	f001 f9fc 	bl	80024d8 <packetLoop>
 80010e0:	e7fc      	b.n	80010dc <main+0x34>
 80010e2:	46c0      	nop			@ (mov r8, r8)
 80010e4:	20000118 	.word	0x20000118
 80010e8:	2000008c 	.word	0x2000008c
 80010ec:	08003fc8 	.word	0x08003fc8
 80010f0:	20000000 	.word	0x20000000

080010f4 <__NVIC_EnableIRQ>:
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	0002      	movs	r2, r0
 80010fc:	1dfb      	adds	r3, r7, #7
 80010fe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001100:	1dfb      	adds	r3, r7, #7
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	2b7f      	cmp	r3, #127	@ 0x7f
 8001106:	d809      	bhi.n	800111c <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001108:	1dfb      	adds	r3, r7, #7
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	001a      	movs	r2, r3
 800110e:	231f      	movs	r3, #31
 8001110:	401a      	ands	r2, r3
 8001112:	4b04      	ldr	r3, [pc, #16]	@ (8001124 <__NVIC_EnableIRQ+0x30>)
 8001114:	2101      	movs	r1, #1
 8001116:	4091      	lsls	r1, r2
 8001118:	000a      	movs	r2, r1
 800111a:	601a      	str	r2, [r3, #0]
}
 800111c:	46c0      	nop			@ (mov r8, r8)
 800111e:	46bd      	mov	sp, r7
 8001120:	b002      	add	sp, #8
 8001122:	bd80      	pop	{r7, pc}
 8001124:	e000e100 	.word	0xe000e100

08001128 <__NVIC_ClearPendingIRQ>:
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	0002      	movs	r2, r0
 8001130:	1dfb      	adds	r3, r7, #7
 8001132:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001134:	1dfb      	adds	r3, r7, #7
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	2b7f      	cmp	r3, #127	@ 0x7f
 800113a:	d80a      	bhi.n	8001152 <__NVIC_ClearPendingIRQ+0x2a>
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800113c:	1dfb      	adds	r3, r7, #7
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	001a      	movs	r2, r3
 8001142:	231f      	movs	r3, #31
 8001144:	4013      	ands	r3, r2
 8001146:	4905      	ldr	r1, [pc, #20]	@ (800115c <__NVIC_ClearPendingIRQ+0x34>)
 8001148:	2201      	movs	r2, #1
 800114a:	409a      	lsls	r2, r3
 800114c:	23c0      	movs	r3, #192	@ 0xc0
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	50ca      	str	r2, [r1, r3]
}
 8001152:	46c0      	nop			@ (mov r8, r8)
 8001154:	46bd      	mov	sp, r7
 8001156:	b002      	add	sp, #8
 8001158:	bd80      	pop	{r7, pc}
 800115a:	46c0      	nop			@ (mov r8, r8)
 800115c:	e000e100 	.word	0xe000e100

08001160 <__NVIC_SetPriority>:
{
 8001160:	b590      	push	{r4, r7, lr}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	0002      	movs	r2, r0
 8001168:	6039      	str	r1, [r7, #0]
 800116a:	1dfb      	adds	r3, r7, #7
 800116c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800116e:	1dfb      	adds	r3, r7, #7
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	2b7f      	cmp	r3, #127	@ 0x7f
 8001174:	d828      	bhi.n	80011c8 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001176:	4a2f      	ldr	r2, [pc, #188]	@ (8001234 <__NVIC_SetPriority+0xd4>)
 8001178:	1dfb      	adds	r3, r7, #7
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	b25b      	sxtb	r3, r3
 800117e:	089b      	lsrs	r3, r3, #2
 8001180:	33c0      	adds	r3, #192	@ 0xc0
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	589b      	ldr	r3, [r3, r2]
 8001186:	1dfa      	adds	r2, r7, #7
 8001188:	7812      	ldrb	r2, [r2, #0]
 800118a:	0011      	movs	r1, r2
 800118c:	2203      	movs	r2, #3
 800118e:	400a      	ands	r2, r1
 8001190:	00d2      	lsls	r2, r2, #3
 8001192:	21ff      	movs	r1, #255	@ 0xff
 8001194:	4091      	lsls	r1, r2
 8001196:	000a      	movs	r2, r1
 8001198:	43d2      	mvns	r2, r2
 800119a:	401a      	ands	r2, r3
 800119c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	019b      	lsls	r3, r3, #6
 80011a2:	22ff      	movs	r2, #255	@ 0xff
 80011a4:	401a      	ands	r2, r3
 80011a6:	1dfb      	adds	r3, r7, #7
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	0018      	movs	r0, r3
 80011ac:	2303      	movs	r3, #3
 80011ae:	4003      	ands	r3, r0
 80011b0:	00db      	lsls	r3, r3, #3
 80011b2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011b4:	481f      	ldr	r0, [pc, #124]	@ (8001234 <__NVIC_SetPriority+0xd4>)
 80011b6:	1dfb      	adds	r3, r7, #7
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	b25b      	sxtb	r3, r3
 80011bc:	089b      	lsrs	r3, r3, #2
 80011be:	430a      	orrs	r2, r1
 80011c0:	33c0      	adds	r3, #192	@ 0xc0
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	501a      	str	r2, [r3, r0]
}
 80011c6:	e031      	b.n	800122c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011c8:	4a1b      	ldr	r2, [pc, #108]	@ (8001238 <__NVIC_SetPriority+0xd8>)
 80011ca:	1dfb      	adds	r3, r7, #7
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	0019      	movs	r1, r3
 80011d0:	230f      	movs	r3, #15
 80011d2:	400b      	ands	r3, r1
 80011d4:	3b08      	subs	r3, #8
 80011d6:	089b      	lsrs	r3, r3, #2
 80011d8:	3306      	adds	r3, #6
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	18d3      	adds	r3, r2, r3
 80011de:	3304      	adds	r3, #4
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	1dfa      	adds	r2, r7, #7
 80011e4:	7812      	ldrb	r2, [r2, #0]
 80011e6:	0011      	movs	r1, r2
 80011e8:	2203      	movs	r2, #3
 80011ea:	400a      	ands	r2, r1
 80011ec:	00d2      	lsls	r2, r2, #3
 80011ee:	21ff      	movs	r1, #255	@ 0xff
 80011f0:	4091      	lsls	r1, r2
 80011f2:	000a      	movs	r2, r1
 80011f4:	43d2      	mvns	r2, r2
 80011f6:	401a      	ands	r2, r3
 80011f8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	019b      	lsls	r3, r3, #6
 80011fe:	22ff      	movs	r2, #255	@ 0xff
 8001200:	401a      	ands	r2, r3
 8001202:	1dfb      	adds	r3, r7, #7
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	0018      	movs	r0, r3
 8001208:	2303      	movs	r3, #3
 800120a:	4003      	ands	r3, r0
 800120c:	00db      	lsls	r3, r3, #3
 800120e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001210:	4809      	ldr	r0, [pc, #36]	@ (8001238 <__NVIC_SetPriority+0xd8>)
 8001212:	1dfb      	adds	r3, r7, #7
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	001c      	movs	r4, r3
 8001218:	230f      	movs	r3, #15
 800121a:	4023      	ands	r3, r4
 800121c:	3b08      	subs	r3, #8
 800121e:	089b      	lsrs	r3, r3, #2
 8001220:	430a      	orrs	r2, r1
 8001222:	3306      	adds	r3, #6
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	18c3      	adds	r3, r0, r3
 8001228:	3304      	adds	r3, #4
 800122a:	601a      	str	r2, [r3, #0]
}
 800122c:	46c0      	nop			@ (mov r8, r8)
 800122e:	46bd      	mov	sp, r7
 8001230:	b003      	add	sp, #12
 8001232:	bd90      	pop	{r4, r7, pc}
 8001234:	e000e100 	.word	0xe000e100
 8001238:	e000ed00 	.word	0xe000ed00

0800123c <EXTI4_15_IRQHandler>:

#include <obstacle.h>
volatile int obs_cnt = 0;

void EXTI4_15_IRQHandler(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
	for(int i = 0; i < 10000; i++);
 8001242:	2300      	movs	r3, #0
 8001244:	607b      	str	r3, [r7, #4]
 8001246:	e002      	b.n	800124e <EXTI4_15_IRQHandler+0x12>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	3301      	adds	r3, #1
 800124c:	607b      	str	r3, [r7, #4]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a0e      	ldr	r2, [pc, #56]	@ (800128c <EXTI4_15_IRQHandler+0x50>)
 8001252:	4293      	cmp	r3, r2
 8001254:	ddf8      	ble.n	8001248 <EXTI4_15_IRQHandler+0xc>
    if ((EXTI->PR & EXTI_PR_PR8) != 0) // Check if the interrupt is for EXTI5 (PA5).
 8001256:	4b0e      	ldr	r3, [pc, #56]	@ (8001290 <EXTI4_15_IRQHandler+0x54>)
 8001258:	695a      	ldr	r2, [r3, #20]
 800125a:	2380      	movs	r3, #128	@ 0x80
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	4013      	ands	r3, r2
 8001260:	d010      	beq.n	8001284 <EXTI4_15_IRQHandler+0x48>
    {
    	if(obs_cnt % 2 == 0)
 8001262:	4b0c      	ldr	r3, [pc, #48]	@ (8001294 <EXTI4_15_IRQHandler+0x58>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	001a      	movs	r2, r3
 8001268:	2301      	movs	r3, #1
 800126a:	4013      	ands	r3, r2
 800126c:	d103      	bne.n	8001276 <EXTI4_15_IRQHandler+0x3a>
    	{
    		obstacleDetected = 1;
 800126e:	4b0a      	ldr	r3, [pc, #40]	@ (8001298 <EXTI4_15_IRQHandler+0x5c>)
 8001270:	2201      	movs	r2, #1
 8001272:	701a      	strb	r2, [r3, #0]
 8001274:	e002      	b.n	800127c <EXTI4_15_IRQHandler+0x40>
    	}
    	else
    	{
    		obstacleDetected = 0;
 8001276:	4b08      	ldr	r3, [pc, #32]	@ (8001298 <EXTI4_15_IRQHandler+0x5c>)
 8001278:	2200      	movs	r2, #0
 800127a:	701a      	strb	r2, [r3, #0]

    	}
      EXTI->PR = EXTI_PR_PR8; // Clear the pending bit for EXTI5.
 800127c:	4b04      	ldr	r3, [pc, #16]	@ (8001290 <EXTI4_15_IRQHandler+0x54>)
 800127e:	2280      	movs	r2, #128	@ 0x80
 8001280:	0052      	lsls	r2, r2, #1
 8001282:	615a      	str	r2, [r3, #20]
    }
}
 8001284:	46c0      	nop			@ (mov r8, r8)
 8001286:	46bd      	mov	sp, r7
 8001288:	b002      	add	sp, #8
 800128a:	bd80      	pop	{r7, pc}
 800128c:	0000270f 	.word	0x0000270f
 8001290:	40010400 	.word	0x40010400
 8001294:	200001a4 	.word	0x200001a4
 8001298:	20000790 	.word	0x20000790

0800129c <Init_Interrupt>:

void Init_Interrupt()
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGCOMPEN;
 80012a0:	4b22      	ldr	r3, [pc, #136]	@ (800132c <Init_Interrupt+0x90>)
 80012a2:	699a      	ldr	r2, [r3, #24]
 80012a4:	4b21      	ldr	r3, [pc, #132]	@ (800132c <Init_Interrupt+0x90>)
 80012a6:	2101      	movs	r1, #1
 80012a8:	430a      	orrs	r2, r1
 80012aa:	619a      	str	r2, [r3, #24]
    // Enable the clock for the SYSCFG (System Configuration Controller).

    RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 80012ac:	4b1f      	ldr	r3, [pc, #124]	@ (800132c <Init_Interrupt+0x90>)
 80012ae:	695a      	ldr	r2, [r3, #20]
 80012b0:	4b1e      	ldr	r3, [pc, #120]	@ (800132c <Init_Interrupt+0x90>)
 80012b2:	2180      	movs	r1, #128	@ 0x80
 80012b4:	0289      	lsls	r1, r1, #10
 80012b6:	430a      	orrs	r2, r1
 80012b8:	615a      	str	r2, [r3, #20]
    // Enable the clock for GPIOA.

    GPIOA->MODER &= ~GPIO_MODER_MODER8;   // Set PA8 as input.
 80012ba:	2390      	movs	r3, #144	@ 0x90
 80012bc:	05db      	lsls	r3, r3, #23
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	2390      	movs	r3, #144	@ 0x90
 80012c2:	05db      	lsls	r3, r3, #23
 80012c4:	491a      	ldr	r1, [pc, #104]	@ (8001330 <Init_Interrupt+0x94>)
 80012c6:	400a      	ands	r2, r1
 80012c8:	601a      	str	r2, [r3, #0]
    GPIOA->PUPDR |= GPIO_PUPDR_PUPDR8_0; // Enable pull-up resistor for PA8.
 80012ca:	2390      	movs	r3, #144	@ 0x90
 80012cc:	05db      	lsls	r3, r3, #23
 80012ce:	68da      	ldr	r2, [r3, #12]
 80012d0:	2390      	movs	r3, #144	@ 0x90
 80012d2:	05db      	lsls	r3, r3, #23
 80012d4:	2180      	movs	r1, #128	@ 0x80
 80012d6:	0249      	lsls	r1, r1, #9
 80012d8:	430a      	orrs	r2, r1
 80012da:	60da      	str	r2, [r3, #12]

    MODIFY_FIELD(SYSCFG->EXTICR[2], SYSCFG_EXTICR3_EXTI8, 0);
 80012dc:	4b15      	ldr	r3, [pc, #84]	@ (8001334 <Init_Interrupt+0x98>)
 80012de:	691a      	ldr	r2, [r3, #16]
 80012e0:	4b14      	ldr	r3, [pc, #80]	@ (8001334 <Init_Interrupt+0x98>)
 80012e2:	210f      	movs	r1, #15
 80012e4:	438a      	bics	r2, r1
 80012e6:	611a      	str	r2, [r3, #16]
    // Set EXTI8 line to be connected to GPIOA pin 8 (PA8).
    // SYSCFG->EXTICR[2] configures EXTI lines 8-11.
    // The value '0' specifies GPIOA as the source.

    EXTI->IMR |= EXTI_IMR_MR8;
 80012e8:	4b13      	ldr	r3, [pc, #76]	@ (8001338 <Init_Interrupt+0x9c>)
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	4b12      	ldr	r3, [pc, #72]	@ (8001338 <Init_Interrupt+0x9c>)
 80012ee:	2180      	movs	r1, #128	@ 0x80
 80012f0:	0049      	lsls	r1, r1, #1
 80012f2:	430a      	orrs	r2, r1
 80012f4:	601a      	str	r2, [r3, #0]
    // Unmask the interrupt for EXTI line 8 by setting the corresponding bit in the Interrupt Mask Register (IMR).
    // This allows the interrupt to be triggered by events on EXTI line 8 (associated with PA8).

    EXTI->RTSR |= EXTI_RTSR_TR8;
 80012f6:	4b10      	ldr	r3, [pc, #64]	@ (8001338 <Init_Interrupt+0x9c>)
 80012f8:	689a      	ldr	r2, [r3, #8]
 80012fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001338 <Init_Interrupt+0x9c>)
 80012fc:	2180      	movs	r1, #128	@ 0x80
 80012fe:	0049      	lsls	r1, r1, #1
 8001300:	430a      	orrs	r2, r1
 8001302:	609a      	str	r2, [r3, #8]
    EXTI->FTSR |= EXTI_FTSR_TR8;
 8001304:	4b0c      	ldr	r3, [pc, #48]	@ (8001338 <Init_Interrupt+0x9c>)
 8001306:	68da      	ldr	r2, [r3, #12]
 8001308:	4b0b      	ldr	r3, [pc, #44]	@ (8001338 <Init_Interrupt+0x9c>)
 800130a:	2180      	movs	r1, #128	@ 0x80
 800130c:	0049      	lsls	r1, r1, #1
 800130e:	430a      	orrs	r2, r1
 8001310:	60da      	str	r2, [r3, #12]
    // Enable both rising and falling edge triggers for EXTI line 8.

    NVIC_SetPriority(EXTI4_15_IRQn, 1);
 8001312:	2101      	movs	r1, #1
 8001314:	2007      	movs	r0, #7
 8001316:	f7ff ff23 	bl	8001160 <__NVIC_SetPriority>
    NVIC_ClearPendingIRQ(EXTI4_15_IRQn);
 800131a:	2007      	movs	r0, #7
 800131c:	f7ff ff04 	bl	8001128 <__NVIC_ClearPendingIRQ>
    NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001320:	2007      	movs	r0, #7
 8001322:	f7ff fee7 	bl	80010f4 <__NVIC_EnableIRQ>
}
 8001326:	46c0      	nop			@ (mov r8, r8)
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	40021000 	.word	0x40021000
 8001330:	fffcffff 	.word	0xfffcffff
 8001334:	40010000 	.word	0x40010000
 8001338:	40010400 	.word	0x40010400

0800133c <SPI_Init>:
 ******************************************************************************/

#include "spi.h"

void SPI_Init(void) 
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
	// Enable GPIOB clock
	RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 8001340:	4b1b      	ldr	r3, [pc, #108]	@ (80013b0 <SPI_Init+0x74>)
 8001342:	695a      	ldr	r2, [r3, #20]
 8001344:	4b1a      	ldr	r3, [pc, #104]	@ (80013b0 <SPI_Init+0x74>)
 8001346:	2180      	movs	r1, #128	@ 0x80
 8001348:	02c9      	lsls	r1, r1, #11
 800134a:	430a      	orrs	r2, r1
 800134c:	615a      	str	r2, [r3, #20]

	// Configure CS, SCK, and MOSI as output
	GPIOB->MODER &= ~(GPIO_MODER_MODER12 | GPIO_MODER_MODER13
 800134e:	4b19      	ldr	r3, [pc, #100]	@ (80013b4 <SPI_Init+0x78>)
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	4b18      	ldr	r3, [pc, #96]	@ (80013b4 <SPI_Init+0x78>)
 8001354:	4918      	ldr	r1, [pc, #96]	@ (80013b8 <SPI_Init+0x7c>)
 8001356:	400a      	ands	r2, r1
 8001358:	601a      	str	r2, [r3, #0]
			| GPIO_MODER_MODER15); // Clear MODER bits
	GPIOB->MODER |= (GPIO_MODER_MODER12_0 | GPIO_MODER_MODER13_0
 800135a:	4b16      	ldr	r3, [pc, #88]	@ (80013b4 <SPI_Init+0x78>)
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	4b15      	ldr	r3, [pc, #84]	@ (80013b4 <SPI_Init+0x78>)
 8001360:	218a      	movs	r1, #138	@ 0x8a
 8001362:	05c9      	lsls	r1, r1, #23
 8001364:	430a      	orrs	r2, r1
 8001366:	601a      	str	r2, [r3, #0]
			| GPIO_MODER_MODER15_0); // Set as output

	// Configure MISO as input
	GPIOB->MODER &= ~GPIO_MODER_MODER14; // Set as input
 8001368:	4b12      	ldr	r3, [pc, #72]	@ (80013b4 <SPI_Init+0x78>)
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	4b11      	ldr	r3, [pc, #68]	@ (80013b4 <SPI_Init+0x78>)
 800136e:	4913      	ldr	r1, [pc, #76]	@ (80013bc <SPI_Init+0x80>)
 8001370:	400a      	ands	r2, r1
 8001372:	601a      	str	r2, [r3, #0]

	// Set all pins to high-speed mode
	GPIOB->OSPEEDR |= (GPIO_OSPEEDR_OSPEEDR12 | GPIO_OSPEEDR_OSPEEDR13
 8001374:	4b0f      	ldr	r3, [pc, #60]	@ (80013b4 <SPI_Init+0x78>)
 8001376:	689a      	ldr	r2, [r3, #8]
 8001378:	4b0e      	ldr	r3, [pc, #56]	@ (80013b4 <SPI_Init+0x78>)
 800137a:	21ff      	movs	r1, #255	@ 0xff
 800137c:	0609      	lsls	r1, r1, #24
 800137e:	430a      	orrs	r2, r1
 8001380:	609a      	str	r2, [r3, #8]
			| GPIO_OSPEEDR_OSPEEDR14 | GPIO_OSPEEDR_OSPEEDR15);

	// Set default states
	GPIOB->ODR |= SPI2_CS_PIN;    // CS High (inactive)
 8001382:	4b0c      	ldr	r3, [pc, #48]	@ (80013b4 <SPI_Init+0x78>)
 8001384:	695a      	ldr	r2, [r3, #20]
 8001386:	4b0b      	ldr	r3, [pc, #44]	@ (80013b4 <SPI_Init+0x78>)
 8001388:	2180      	movs	r1, #128	@ 0x80
 800138a:	0149      	lsls	r1, r1, #5
 800138c:	430a      	orrs	r2, r1
 800138e:	615a      	str	r2, [r3, #20]
	GPIOB->ODR &= ~SPI2_SCK_PIN;  // SCK Low (idle)
 8001390:	4b08      	ldr	r3, [pc, #32]	@ (80013b4 <SPI_Init+0x78>)
 8001392:	695a      	ldr	r2, [r3, #20]
 8001394:	4b07      	ldr	r3, [pc, #28]	@ (80013b4 <SPI_Init+0x78>)
 8001396:	490a      	ldr	r1, [pc, #40]	@ (80013c0 <SPI_Init+0x84>)
 8001398:	400a      	ands	r2, r1
 800139a:	615a      	str	r2, [r3, #20]
	GPIOB->ODR &= ~SPI2_MOSI_PIN; // MOSI Low (idle)
 800139c:	4b05      	ldr	r3, [pc, #20]	@ (80013b4 <SPI_Init+0x78>)
 800139e:	695a      	ldr	r2, [r3, #20]
 80013a0:	4b04      	ldr	r3, [pc, #16]	@ (80013b4 <SPI_Init+0x78>)
 80013a2:	4908      	ldr	r1, [pc, #32]	@ (80013c4 <SPI_Init+0x88>)
 80013a4:	400a      	ands	r2, r1
 80013a6:	615a      	str	r2, [r3, #20]
}
 80013a8:	46c0      	nop			@ (mov r8, r8)
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	46c0      	nop			@ (mov r8, r8)
 80013b0:	40021000 	.word	0x40021000
 80013b4:	48000400 	.word	0x48000400
 80013b8:	30ffffff 	.word	0x30ffffff
 80013bc:	cfffffff 	.word	0xcfffffff
 80013c0:	ffffdfff 	.word	0xffffdfff
 80013c4:	ffff7fff 	.word	0xffff7fff

080013c8 <SPI_WriteByte>:

void SPI_WriteByte(uint8_t data) {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b086      	sub	sp, #24
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	0002      	movs	r2, r0
 80013d0:	1dfb      	adds	r3, r7, #7
 80013d2:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 8; i++) {
 80013d4:	2300      	movs	r3, #0
 80013d6:	617b      	str	r3, [r7, #20]
 80013d8:	e039      	b.n	800144e <SPI_WriteByte+0x86>
		// Write the MSB to MOSI
		if (data & 0x80) {
 80013da:	1dfb      	adds	r3, r7, #7
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	b25b      	sxtb	r3, r3
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	da07      	bge.n	80013f4 <SPI_WriteByte+0x2c>
			GPIOB->ODR |= SPI2_MOSI_PIN; // Set MOSI High
 80013e4:	4b20      	ldr	r3, [pc, #128]	@ (8001468 <SPI_WriteByte+0xa0>)
 80013e6:	695a      	ldr	r2, [r3, #20]
 80013e8:	4b1f      	ldr	r3, [pc, #124]	@ (8001468 <SPI_WriteByte+0xa0>)
 80013ea:	2180      	movs	r1, #128	@ 0x80
 80013ec:	0209      	lsls	r1, r1, #8
 80013ee:	430a      	orrs	r2, r1
 80013f0:	615a      	str	r2, [r3, #20]
 80013f2:	e005      	b.n	8001400 <SPI_WriteByte+0x38>
		} else {
			GPIOB->ODR &= ~SPI2_MOSI_PIN; // Set MOSI Low
 80013f4:	4b1c      	ldr	r3, [pc, #112]	@ (8001468 <SPI_WriteByte+0xa0>)
 80013f6:	695a      	ldr	r2, [r3, #20]
 80013f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001468 <SPI_WriteByte+0xa0>)
 80013fa:	491c      	ldr	r1, [pc, #112]	@ (800146c <SPI_WriteByte+0xa4>)
 80013fc:	400a      	ands	r2, r1
 80013fe:	615a      	str	r2, [r3, #20]
		}
		data <<= 1; // Shift to the next bit
 8001400:	1dfa      	adds	r2, r7, #7
 8001402:	1dfb      	adds	r3, r7, #7
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	18db      	adds	r3, r3, r3
 8001408:	7013      	strb	r3, [r2, #0]

		// Toggle SCK to clock the bit
		GPIOB->ODR |= SPI2_SCK_PIN;  // SCK High
 800140a:	4b17      	ldr	r3, [pc, #92]	@ (8001468 <SPI_WriteByte+0xa0>)
 800140c:	695a      	ldr	r2, [r3, #20]
 800140e:	4b16      	ldr	r3, [pc, #88]	@ (8001468 <SPI_WriteByte+0xa0>)
 8001410:	2180      	movs	r1, #128	@ 0x80
 8001412:	0189      	lsls	r1, r1, #6
 8001414:	430a      	orrs	r2, r1
 8001416:	615a      	str	r2, [r3, #20]
		//DELAY_SHORT();               // Small delay
		for (int i = 0; i < 16; i++)
 8001418:	2300      	movs	r3, #0
 800141a:	613b      	str	r3, [r7, #16]
 800141c:	e002      	b.n	8001424 <SPI_WriteByte+0x5c>
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	3301      	adds	r3, #1
 8001422:	613b      	str	r3, [r7, #16]
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	2b0f      	cmp	r3, #15
 8001428:	ddf9      	ble.n	800141e <SPI_WriteByte+0x56>
			;
		GPIOB->ODR &= ~SPI2_SCK_PIN; // SCK Low
 800142a:	4b0f      	ldr	r3, [pc, #60]	@ (8001468 <SPI_WriteByte+0xa0>)
 800142c:	695a      	ldr	r2, [r3, #20]
 800142e:	4b0e      	ldr	r3, [pc, #56]	@ (8001468 <SPI_WriteByte+0xa0>)
 8001430:	490f      	ldr	r1, [pc, #60]	@ (8001470 <SPI_WriteByte+0xa8>)
 8001432:	400a      	ands	r2, r1
 8001434:	615a      	str	r2, [r3, #20]
		//DELAY_SHORT();               // Small delay
		for (int i = 0; i < 16; i++)
 8001436:	2300      	movs	r3, #0
 8001438:	60fb      	str	r3, [r7, #12]
 800143a:	e002      	b.n	8001442 <SPI_WriteByte+0x7a>
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	3301      	adds	r3, #1
 8001440:	60fb      	str	r3, [r7, #12]
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	2b0f      	cmp	r3, #15
 8001446:	ddf9      	ble.n	800143c <SPI_WriteByte+0x74>
	for (int i = 0; i < 8; i++) {
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	3301      	adds	r3, #1
 800144c:	617b      	str	r3, [r7, #20]
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	2b07      	cmp	r3, #7
 8001452:	ddc2      	ble.n	80013da <SPI_WriteByte+0x12>
			;
	}
	GPIOB->ODR &= ~SPI2_MOSI_PIN; // MOSI Low (idle)
 8001454:	4b04      	ldr	r3, [pc, #16]	@ (8001468 <SPI_WriteByte+0xa0>)
 8001456:	695a      	ldr	r2, [r3, #20]
 8001458:	4b03      	ldr	r3, [pc, #12]	@ (8001468 <SPI_WriteByte+0xa0>)
 800145a:	4904      	ldr	r1, [pc, #16]	@ (800146c <SPI_WriteByte+0xa4>)
 800145c:	400a      	ands	r2, r1
 800145e:	615a      	str	r2, [r3, #20]
}
 8001460:	46c0      	nop			@ (mov r8, r8)
 8001462:	46bd      	mov	sp, r7
 8001464:	b006      	add	sp, #24
 8001466:	bd80      	pop	{r7, pc}
 8001468:	48000400 	.word	0x48000400
 800146c:	ffff7fff 	.word	0xffff7fff
 8001470:	ffffdfff 	.word	0xffffdfff

08001474 <SPI_ReadByte>:

uint8_t SPI_ReadByte(void) {
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
	uint8_t received_data = 0;
 800147a:	230f      	movs	r3, #15
 800147c:	18fb      	adds	r3, r7, r3
 800147e:	2200      	movs	r2, #0
 8001480:	701a      	strb	r2, [r3, #0]

	for (int i = 0; i < 8; i++) {
 8001482:	2300      	movs	r3, #0
 8001484:	60bb      	str	r3, [r7, #8]
 8001486:	e034      	b.n	80014f2 <SPI_ReadByte+0x7e>
		received_data <<= 1; // Make room for the next bit
 8001488:	230f      	movs	r3, #15
 800148a:	18fa      	adds	r2, r7, r3
 800148c:	18fb      	adds	r3, r7, r3
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	18db      	adds	r3, r3, r3
 8001492:	7013      	strb	r3, [r2, #0]

		// Toggle SCK to clock the bit
		GPIOB->ODR |= SPI2_SCK_PIN;  // SCK High
 8001494:	4b1c      	ldr	r3, [pc, #112]	@ (8001508 <SPI_ReadByte+0x94>)
 8001496:	695a      	ldr	r2, [r3, #20]
 8001498:	4b1b      	ldr	r3, [pc, #108]	@ (8001508 <SPI_ReadByte+0x94>)
 800149a:	2180      	movs	r1, #128	@ 0x80
 800149c:	0189      	lsls	r1, r1, #6
 800149e:	430a      	orrs	r2, r1
 80014a0:	615a      	str	r2, [r3, #20]
		//DELAY_SHORT();               // Small delay
		for (int i = 0; i < 16; i++)
 80014a2:	2300      	movs	r3, #0
 80014a4:	607b      	str	r3, [r7, #4]
 80014a6:	e002      	b.n	80014ae <SPI_ReadByte+0x3a>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	3301      	adds	r3, #1
 80014ac:	607b      	str	r3, [r7, #4]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2b0f      	cmp	r3, #15
 80014b2:	ddf9      	ble.n	80014a8 <SPI_ReadByte+0x34>
			;

		// Read the bit from MISO
		if (GPIOB->IDR & SPI2_MISO_PIN) {
 80014b4:	4b14      	ldr	r3, [pc, #80]	@ (8001508 <SPI_ReadByte+0x94>)
 80014b6:	691a      	ldr	r2, [r3, #16]
 80014b8:	2380      	movs	r3, #128	@ 0x80
 80014ba:	01db      	lsls	r3, r3, #7
 80014bc:	4013      	ands	r3, r2
 80014be:	d006      	beq.n	80014ce <SPI_ReadByte+0x5a>
			received_data |= 0x01; // Set the LSB
 80014c0:	220f      	movs	r2, #15
 80014c2:	18bb      	adds	r3, r7, r2
 80014c4:	18ba      	adds	r2, r7, r2
 80014c6:	7812      	ldrb	r2, [r2, #0]
 80014c8:	2101      	movs	r1, #1
 80014ca:	430a      	orrs	r2, r1
 80014cc:	701a      	strb	r2, [r3, #0]
		}

		GPIOB->ODR &= ~SPI2_SCK_PIN; // SCK Low
 80014ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001508 <SPI_ReadByte+0x94>)
 80014d0:	695a      	ldr	r2, [r3, #20]
 80014d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001508 <SPI_ReadByte+0x94>)
 80014d4:	490d      	ldr	r1, [pc, #52]	@ (800150c <SPI_ReadByte+0x98>)
 80014d6:	400a      	ands	r2, r1
 80014d8:	615a      	str	r2, [r3, #20]
		//DELAY_SHORT();               // Small delay
		for (int i = 0; i < 16; i++)
 80014da:	2300      	movs	r3, #0
 80014dc:	603b      	str	r3, [r7, #0]
 80014de:	e002      	b.n	80014e6 <SPI_ReadByte+0x72>
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	3301      	adds	r3, #1
 80014e4:	603b      	str	r3, [r7, #0]
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	2b0f      	cmp	r3, #15
 80014ea:	ddf9      	ble.n	80014e0 <SPI_ReadByte+0x6c>
	for (int i = 0; i < 8; i++) {
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	3301      	adds	r3, #1
 80014f0:	60bb      	str	r3, [r7, #8]
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	2b07      	cmp	r3, #7
 80014f6:	ddc7      	ble.n	8001488 <SPI_ReadByte+0x14>
			;
	}

	return received_data;
 80014f8:	230f      	movs	r3, #15
 80014fa:	18fb      	adds	r3, r7, r3
 80014fc:	781b      	ldrb	r3, [r3, #0]
}
 80014fe:	0018      	movs	r0, r3
 8001500:	46bd      	mov	sp, r7
 8001502:	b004      	add	sp, #16
 8001504:	bd80      	pop	{r7, pc}
 8001506:	46c0      	nop			@ (mov r8, r8)
 8001508:	48000400 	.word	0x48000400
 800150c:	ffffdfff 	.word	0xffffdfff

08001510 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800151c:	2300      	movs	r3, #0
 800151e:	617b      	str	r3, [r7, #20]
 8001520:	e00a      	b.n	8001538 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001522:	f000 f8ed 	bl	8001700 <__io_getchar>
 8001526:	0001      	movs	r1, r0
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	1c5a      	adds	r2, r3, #1
 800152c:	60ba      	str	r2, [r7, #8]
 800152e:	b2ca      	uxtb	r2, r1
 8001530:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	3301      	adds	r3, #1
 8001536:	617b      	str	r3, [r7, #20]
 8001538:	697a      	ldr	r2, [r7, #20]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	429a      	cmp	r2, r3
 800153e:	dbf0      	blt.n	8001522 <_read+0x12>
  }

  return len;
 8001540:	687b      	ldr	r3, [r7, #4]
}
 8001542:	0018      	movs	r0, r3
 8001544:	46bd      	mov	sp, r7
 8001546:	b006      	add	sp, #24
 8001548:	bd80      	pop	{r7, pc}

0800154a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800154a:	b580      	push	{r7, lr}
 800154c:	b086      	sub	sp, #24
 800154e:	af00      	add	r7, sp, #0
 8001550:	60f8      	str	r0, [r7, #12]
 8001552:	60b9      	str	r1, [r7, #8]
 8001554:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001556:	2300      	movs	r3, #0
 8001558:	617b      	str	r3, [r7, #20]
 800155a:	e009      	b.n	8001570 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	1c5a      	adds	r2, r3, #1
 8001560:	60ba      	str	r2, [r7, #8]
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	0018      	movs	r0, r3
 8001566:	f000 f8e3 	bl	8001730 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	3301      	adds	r3, #1
 800156e:	617b      	str	r3, [r7, #20]
 8001570:	697a      	ldr	r2, [r7, #20]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	429a      	cmp	r2, r3
 8001576:	dbf1      	blt.n	800155c <_write+0x12>
  }
  return len;
 8001578:	687b      	ldr	r3, [r7, #4]
}
 800157a:	0018      	movs	r0, r3
 800157c:	46bd      	mov	sp, r7
 800157e:	b006      	add	sp, #24
 8001580:	bd80      	pop	{r7, pc}

08001582 <_close>:

int _close(int file)
{
 8001582:	b580      	push	{r7, lr}
 8001584:	b082      	sub	sp, #8
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800158a:	2301      	movs	r3, #1
 800158c:	425b      	negs	r3, r3
}
 800158e:	0018      	movs	r0, r3
 8001590:	46bd      	mov	sp, r7
 8001592:	b002      	add	sp, #8
 8001594:	bd80      	pop	{r7, pc}

08001596 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001596:	b580      	push	{r7, lr}
 8001598:	b082      	sub	sp, #8
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]
 800159e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	2280      	movs	r2, #128	@ 0x80
 80015a4:	0192      	lsls	r2, r2, #6
 80015a6:	605a      	str	r2, [r3, #4]
  return 0;
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	0018      	movs	r0, r3
 80015ac:	46bd      	mov	sp, r7
 80015ae:	b002      	add	sp, #8
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <_isatty>:

int _isatty(int file)
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b082      	sub	sp, #8
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015ba:	2301      	movs	r3, #1
}
 80015bc:	0018      	movs	r0, r3
 80015be:	46bd      	mov	sp, r7
 80015c0:	b002      	add	sp, #8
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	60f8      	str	r0, [r7, #12]
 80015cc:	60b9      	str	r1, [r7, #8]
 80015ce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	0018      	movs	r0, r3
 80015d4:	46bd      	mov	sp, r7
 80015d6:	b004      	add	sp, #16
 80015d8:	bd80      	pop	{r7, pc}
	...

080015dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b086      	sub	sp, #24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015e4:	4a14      	ldr	r2, [pc, #80]	@ (8001638 <_sbrk+0x5c>)
 80015e6:	4b15      	ldr	r3, [pc, #84]	@ (800163c <_sbrk+0x60>)
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015f0:	4b13      	ldr	r3, [pc, #76]	@ (8001640 <_sbrk+0x64>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d102      	bne.n	80015fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015f8:	4b11      	ldr	r3, [pc, #68]	@ (8001640 <_sbrk+0x64>)
 80015fa:	4a12      	ldr	r2, [pc, #72]	@ (8001644 <_sbrk+0x68>)
 80015fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015fe:	4b10      	ldr	r3, [pc, #64]	@ (8001640 <_sbrk+0x64>)
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	18d3      	adds	r3, r2, r3
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	429a      	cmp	r2, r3
 800160a:	d207      	bcs.n	800161c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800160c:	f001 fdaa 	bl	8003164 <__errno>
 8001610:	0003      	movs	r3, r0
 8001612:	220c      	movs	r2, #12
 8001614:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001616:	2301      	movs	r3, #1
 8001618:	425b      	negs	r3, r3
 800161a:	e009      	b.n	8001630 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800161c:	4b08      	ldr	r3, [pc, #32]	@ (8001640 <_sbrk+0x64>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001622:	4b07      	ldr	r3, [pc, #28]	@ (8001640 <_sbrk+0x64>)
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	18d2      	adds	r2, r2, r3
 800162a:	4b05      	ldr	r3, [pc, #20]	@ (8001640 <_sbrk+0x64>)
 800162c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800162e:	68fb      	ldr	r3, [r7, #12]
}
 8001630:	0018      	movs	r0, r3
 8001632:	46bd      	mov	sp, r7
 8001634:	b006      	add	sp, #24
 8001636:	bd80      	pop	{r7, pc}
 8001638:	20008000 	.word	0x20008000
 800163c:	00000400 	.word	0x00000400
 8001640:	200001a8 	.word	0x200001a8
 8001644:	200008e8 	.word	0x200008e8

08001648 <transmit_tcp_packet>:
	printf(
			"\n\rSuccessfully processed packet of size %d from 0x%04X to 0x%04X\n\r",
			packet_size, start_address, next_start_address - 1);
}

void transmit_tcp_packet(uint8_t *packet, uint16_t packet_size) {
 8001648:	b5b0      	push	{r4, r5, r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	000a      	movs	r2, r1
 8001652:	1cbb      	adds	r3, r7, #2
 8001654:	801a      	strh	r2, [r3, #0]
	//Write the ARP packet to the ENC28J60 buffer
	//uint16_t frame_size = 43; // The total length is now exactly 42 bytes (without padding)
	uint16_t start_address = TX_BUFFER_START;
 8001656:	210e      	movs	r1, #14
 8001658:	187b      	adds	r3, r7, r1
 800165a:	22e0      	movs	r2, #224	@ 0xe0
 800165c:	0152      	lsls	r2, r2, #5
 800165e:	801a      	strh	r2, [r3, #0]
	if ((start_address + packet_size - 1) > 0x1FFF) {
 8001660:	187b      	adds	r3, r7, r1
 8001662:	881a      	ldrh	r2, [r3, #0]
 8001664:	1cbb      	adds	r3, r7, #2
 8001666:	881b      	ldrh	r3, [r3, #0]
 8001668:	18d2      	adds	r2, r2, r3
 800166a:	2380      	movs	r3, #128	@ 0x80
 800166c:	019b      	lsls	r3, r3, #6
 800166e:	429a      	cmp	r2, r3
 8001670:	dd04      	ble.n	800167c <transmit_tcp_packet+0x34>
		printf("\nInvalid Buffer Size. Buffer exceeds valid address range.\n");
 8001672:	4b1f      	ldr	r3, [pc, #124]	@ (80016f0 <transmit_tcp_packet+0xa8>)
 8001674:	0018      	movs	r0, r3
 8001676:	f001 fb19 	bl	8002cac <puts>
		return;
 800167a:	e036      	b.n	80016ea <transmit_tcp_packet+0xa2>
	}
	uint16_t end_address = start_address + packet_size - 1;
 800167c:	210e      	movs	r1, #14
 800167e:	187a      	adds	r2, r7, r1
 8001680:	1cbb      	adds	r3, r7, #2
 8001682:	8812      	ldrh	r2, [r2, #0]
 8001684:	881b      	ldrh	r3, [r3, #0]
 8001686:	18d3      	adds	r3, r2, r3
 8001688:	b29a      	uxth	r2, r3
 800168a:	250c      	movs	r5, #12
 800168c:	197b      	adds	r3, r7, r5
 800168e:	3a01      	subs	r2, #1
 8001690:	801a      	strh	r2, [r3, #0]
	enc_buffer_write(packet_size, start_address, packet);
 8001692:	1cbb      	adds	r3, r7, #2
 8001694:	8818      	ldrh	r0, [r3, #0]
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	000c      	movs	r4, r1
 800169a:	187b      	adds	r3, r7, r1
 800169c:	881b      	ldrh	r3, [r3, #0]
 800169e:	0019      	movs	r1, r3
 80016a0:	f7ff f8aa 	bl	80007f8 <enc_buffer_write>

	// Set transmit pointers
	enc28j60_set_transmit_pointers(start_address, end_address);
 80016a4:	197b      	adds	r3, r7, r5
 80016a6:	881a      	ldrh	r2, [r3, #0]
 80016a8:	193b      	adds	r3, r7, r4
 80016aa:	881b      	ldrh	r3, [r3, #0]
 80016ac:	0011      	movs	r1, r2
 80016ae:	0018      	movs	r0, r3
 80016b0:	f7fe fe00 	bl	80002b4 <enc28j60_set_transmit_pointers>

	// Start transmission
	enc28j60_start_transmission();
 80016b4:	f7fe fde3 	bl	800027e <enc28j60_start_transmission>

	// Wait for transmission to complete
	if (wait_for_transmission_complete(500)) {  // Wait up to 500 ms
 80016b8:	23fa      	movs	r3, #250	@ 0xfa
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	0018      	movs	r0, r3
 80016be:	f7fe fe2a 	bl	8000316 <wait_for_transmission_complete>
 80016c2:	1e03      	subs	r3, r0, #0
 80016c4:	d00d      	beq.n	80016e2 <transmit_tcp_packet+0x9a>
		// Check if transmission was successful
		if (enc28j60_transmission_successful()) {
 80016c6:	f7fe fe55 	bl	8000374 <enc28j60_transmission_successful>
 80016ca:	1e03      	subs	r3, r0, #0
 80016cc:	d004      	beq.n	80016d8 <transmit_tcp_packet+0x90>
			printf("TCP request sent successfully.\n\r");
 80016ce:	4b09      	ldr	r3, [pc, #36]	@ (80016f4 <transmit_tcp_packet+0xac>)
 80016d0:	0018      	movs	r0, r3
 80016d2:	f001 fa85 	bl	8002be0 <iprintf>
 80016d6:	e008      	b.n	80016ea <transmit_tcp_packet+0xa2>
		} else {
			printf("TCP transmission failed. Check error flags.\n\r");
 80016d8:	4b07      	ldr	r3, [pc, #28]	@ (80016f8 <transmit_tcp_packet+0xb0>)
 80016da:	0018      	movs	r0, r3
 80016dc:	f001 fa80 	bl	8002be0 <iprintf>
 80016e0:	e003      	b.n	80016ea <transmit_tcp_packet+0xa2>
		}
	} else {
		printf(
 80016e2:	4b06      	ldr	r3, [pc, #24]	@ (80016fc <transmit_tcp_packet+0xb4>)
 80016e4:	0018      	movs	r0, r3
 80016e6:	f001 fa7b 	bl	8002be0 <iprintf>
				"Transmission timeout. ENC28J60 may not be functioning correctly.\n\r");
	}
}
 80016ea:	46bd      	mov	sp, r7
 80016ec:	b004      	add	sp, #16
 80016ee:	bdb0      	pop	{r4, r5, r7, pc}
 80016f0:	0800417c 	.word	0x0800417c
 80016f4:	080041b8 	.word	0x080041b8
 80016f8:	080041dc 	.word	0x080041dc
 80016fc:	0800420c 	.word	0x0800420c

08001700 <__io_getchar>:
 *
 * Returns:
 * either received char or -1 if not
 */
int __io_getchar(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
	char ch;
	if(cbfifo_dequeue(&fiforx, &ch, 1)==1)
 8001706:	1df9      	adds	r1, r7, #7
 8001708:	4b08      	ldr	r3, [pc, #32]	@ (800172c <__io_getchar+0x2c>)
 800170a:	2201      	movs	r2, #1
 800170c:	0018      	movs	r0, r3
 800170e:	f7fe feac 	bl	800046a <cbfifo_dequeue>
 8001712:	0003      	movs	r3, r0
 8001714:	2b01      	cmp	r3, #1
 8001716:	d102      	bne.n	800171e <__io_getchar+0x1e>
	{
		return ch;
 8001718:	1dfb      	adds	r3, r7, #7
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	e001      	b.n	8001722 <__io_getchar+0x22>
	}
	else
	{
		return -1;
 800171e:	2301      	movs	r3, #1
 8001720:	425b      	negs	r3, r3
	}
}
 8001722:	0018      	movs	r0, r3
 8001724:	46bd      	mov	sp, r7
 8001726:	b002      	add	sp, #8
 8001728:	bd80      	pop	{r7, pc}
 800172a:	46c0      	nop			@ (mov r8, r8)
 800172c:	20000118 	.word	0x20000118

08001730 <__io_putchar>:
 *
 * Returns:
 *  either received 1 or -1(if transmission not successful)
 */
int __io_putchar(int ch)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
	while (cbfifo_length(&fifotx) >= 127);
 8001738:	46c0      	nop			@ (mov r8, r8)
 800173a:	4b0f      	ldr	r3, [pc, #60]	@ (8001778 <__io_putchar+0x48>)
 800173c:	0018      	movs	r0, r3
 800173e:	f7fe fedc 	bl	80004fa <cbfifo_length>
 8001742:	0003      	movs	r3, r0
 8001744:	2b7e      	cmp	r3, #126	@ 0x7e
 8001746:	d8f8      	bhi.n	800173a <__io_putchar+0xa>
	if(cbfifo_enqueue(&fifotx,&ch,1)==1)
 8001748:	1d39      	adds	r1, r7, #4
 800174a:	4b0b      	ldr	r3, [pc, #44]	@ (8001778 <__io_putchar+0x48>)
 800174c:	2201      	movs	r2, #1
 800174e:	0018      	movs	r0, r3
 8001750:	f7fe fe3c 	bl	80003cc <cbfifo_enqueue>
 8001754:	0003      	movs	r3, r0
 8001756:	2b01      	cmp	r3, #1
 8001758:	d107      	bne.n	800176a <__io_putchar+0x3a>
	{
		USART2->CR1 |= USART_CR1_TXEIE;
 800175a:	4b08      	ldr	r3, [pc, #32]	@ (800177c <__io_putchar+0x4c>)
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	4b07      	ldr	r3, [pc, #28]	@ (800177c <__io_putchar+0x4c>)
 8001760:	2180      	movs	r1, #128	@ 0x80
 8001762:	430a      	orrs	r2, r1
 8001764:	601a      	str	r2, [r3, #0]
		return 1;
 8001766:	2301      	movs	r3, #1
 8001768:	e001      	b.n	800176e <__io_putchar+0x3e>
	}
	else
	{
		return -1;
 800176a:	2301      	movs	r3, #1
 800176c:	425b      	negs	r3, r3
	}
}
 800176e:	0018      	movs	r0, r3
 8001770:	46bd      	mov	sp, r7
 8001772:	b002      	add	sp, #8
 8001774:	bd80      	pop	{r7, pc}
 8001776:	46c0      	nop			@ (mov r8, r8)
 8001778:	2000008c 	.word	0x2000008c
 800177c:	40004400 	.word	0x40004400

08001780 <packetReceive>:
void refreshArp(void);
void trial_arp_request(void);
uint32_t getSystemTick(void);

// Function implementations
uint16_t packetReceive() {
 8001780:	b5b0      	push	{r4, r5, r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
	static uint16_t gNextPacketPtr = RX_BUFFER_START;
	static bool unreleasedPacket = false;
	uint16_t len = 0;
 8001786:	230e      	movs	r3, #14
 8001788:	18fb      	adds	r3, r7, r3
 800178a:	2200      	movs	r2, #0
 800178c:	801a      	strh	r2, [r3, #0]

	// Release the last packet if necessary
	if (unreleasedPacket) {
 800178e:	4b54      	ldr	r3, [pc, #336]	@ (80018e0 <packetReceive+0x160>)
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d031      	beq.n	80017fa <packetReceive+0x7a>
		if (gNextPacketPtr == 0) {
 8001796:	4b53      	ldr	r3, [pc, #332]	@ (80018e4 <packetReceive+0x164>)
 8001798:	881b      	ldrh	r3, [r3, #0]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d116      	bne.n	80017cc <packetReceive+0x4c>
			uint16_t RX_END = RX_BUFFER_END;
 800179e:	240c      	movs	r4, #12
 80017a0:	193b      	adds	r3, r7, r4
 80017a2:	4a51      	ldr	r2, [pc, #324]	@ (80018e8 <packetReceive+0x168>)
 80017a4:	801a      	strh	r2, [r3, #0]
			enc_control_write(0, 0x0C, (uint8_t) (RX_END & 0xFF)); // Low byte
 80017a6:	193b      	adds	r3, r7, r4
 80017a8:	881b      	ldrh	r3, [r3, #0]
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	001a      	movs	r2, r3
 80017ae:	210c      	movs	r1, #12
 80017b0:	2000      	movs	r0, #0
 80017b2:	f7fe ff69 	bl	8000688 <enc_control_write>
			enc_control_write(0, 0x0D, (uint8_t) ((RX_END >> 8) & 0xFF)); // High byte
 80017b6:	193b      	adds	r3, r7, r4
 80017b8:	881b      	ldrh	r3, [r3, #0]
 80017ba:	0a1b      	lsrs	r3, r3, #8
 80017bc:	b29b      	uxth	r3, r3
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	001a      	movs	r2, r3
 80017c2:	210d      	movs	r1, #13
 80017c4:	2000      	movs	r0, #0
 80017c6:	f7fe ff5f 	bl	8000688 <enc_control_write>
 80017ca:	e013      	b.n	80017f4 <packetReceive+0x74>
		} else {
			enc_control_write(0, 0x0C, (uint8_t) ((gNextPacketPtr - 1) & 0xFF)); // Low byte
 80017cc:	4b45      	ldr	r3, [pc, #276]	@ (80018e4 <packetReceive+0x164>)
 80017ce:	881b      	ldrh	r3, [r3, #0]
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	3b01      	subs	r3, #1
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	001a      	movs	r2, r3
 80017d8:	210c      	movs	r1, #12
 80017da:	2000      	movs	r0, #0
 80017dc:	f7fe ff54 	bl	8000688 <enc_control_write>
			enc_control_write(0, 0x0D,
					(uint8_t) (((gNextPacketPtr - 1) >> 8) & 0xFF)); // High byte
 80017e0:	4b40      	ldr	r3, [pc, #256]	@ (80018e4 <packetReceive+0x164>)
 80017e2:	881b      	ldrh	r3, [r3, #0]
 80017e4:	3b01      	subs	r3, #1
 80017e6:	121b      	asrs	r3, r3, #8
			enc_control_write(0, 0x0D,
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	001a      	movs	r2, r3
 80017ec:	210d      	movs	r1, #13
 80017ee:	2000      	movs	r0, #0
 80017f0:	f7fe ff4a 	bl	8000688 <enc_control_write>
		}
		unreleasedPacket = false;
 80017f4:	4b3a      	ldr	r3, [pc, #232]	@ (80018e0 <packetReceive+0x160>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	701a      	strb	r2, [r3, #0]
	}

	uint8_t EPKTCNT = enc_eth_read(0x19, 1);
 80017fa:	250b      	movs	r5, #11
 80017fc:	197c      	adds	r4, r7, r5
 80017fe:	2101      	movs	r1, #1
 8001800:	2019      	movs	r0, #25
 8001802:	f7ff f98f 	bl	8000b24 <enc_eth_read>
 8001806:	0003      	movs	r3, r0
 8001808:	7023      	strb	r3, [r4, #0]
	if (EPKTCNT > 0) {
 800180a:	197b      	adds	r3, r7, r5
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d05f      	beq.n	80018d2 <packetReceive+0x152>
		enc_control_write(0, 0x00, (uint8_t) (gNextPacketPtr & 0xFF)); // Low byte
 8001812:	4b34      	ldr	r3, [pc, #208]	@ (80018e4 <packetReceive+0x164>)
 8001814:	881b      	ldrh	r3, [r3, #0]
 8001816:	b2db      	uxtb	r3, r3
 8001818:	001a      	movs	r2, r3
 800181a:	2100      	movs	r1, #0
 800181c:	2000      	movs	r0, #0
 800181e:	f7fe ff33 	bl	8000688 <enc_control_write>
		enc_control_write(0, 0x01, (uint8_t) ((gNextPacketPtr >> 8) & 0xFF)); // High byte
 8001822:	4b30      	ldr	r3, [pc, #192]	@ (80018e4 <packetReceive+0x164>)
 8001824:	881b      	ldrh	r3, [r3, #0]
 8001826:	0a1b      	lsrs	r3, r3, #8
 8001828:	b29b      	uxth	r3, r3
 800182a:	b2db      	uxtb	r3, r3
 800182c:	001a      	movs	r2, r3
 800182e:	2101      	movs	r1, #1
 8001830:	2000      	movs	r0, #0
 8001832:	f7fe ff29 	bl	8000688 <enc_control_write>
			uint16_t byteCount;
			uint16_t status;
		} PacketHeader;

		PacketHeader header;
		enc_buffer_read(sizeof(PacketHeader), gNextPacketPtr,
 8001836:	4b2b      	ldr	r3, [pc, #172]	@ (80018e4 <packetReceive+0x164>)
 8001838:	881b      	ldrh	r3, [r3, #0]
 800183a:	003a      	movs	r2, r7
 800183c:	0019      	movs	r1, r3
 800183e:	2006      	movs	r0, #6
 8001840:	f7ff f86a 	bl	8000918 <enc_buffer_read>
				(uint8_t*) &header);

		uint16_t start = gNextPacketPtr + sizeof(PacketHeader);
 8001844:	4b27      	ldr	r3, [pc, #156]	@ (80018e4 <packetReceive+0x164>)
 8001846:	881a      	ldrh	r2, [r3, #0]
 8001848:	2308      	movs	r3, #8
 800184a:	18fb      	adds	r3, r7, r3
 800184c:	3206      	adds	r2, #6
 800184e:	801a      	strh	r2, [r3, #0]
		gNextPacketPtr = header.nextPacket;
 8001850:	003b      	movs	r3, r7
 8001852:	881a      	ldrh	r2, [r3, #0]
 8001854:	4b23      	ldr	r3, [pc, #140]	@ (80018e4 <packetReceive+0x164>)
 8001856:	801a      	strh	r2, [r3, #0]

		len = header.byteCount - 4; // Exclude CRC
 8001858:	003b      	movs	r3, r7
 800185a:	885a      	ldrh	r2, [r3, #2]
 800185c:	210e      	movs	r1, #14
 800185e:	187b      	adds	r3, r7, r1
 8001860:	3a04      	subs	r2, #4
 8001862:	801a      	strh	r2, [r3, #0]
		if (len > BUFFER_SIZE - 1)
 8001864:	187b      	adds	r3, r7, r1
 8001866:	881b      	ldrh	r3, [r3, #0]
 8001868:	4a20      	ldr	r2, [pc, #128]	@ (80018ec <packetReceive+0x16c>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d902      	bls.n	8001874 <packetReceive+0xf4>
			len = BUFFER_SIZE - 1;
 800186e:	187b      	adds	r3, r7, r1
 8001870:	4a1e      	ldr	r2, [pc, #120]	@ (80018ec <packetReceive+0x16c>)
 8001872:	801a      	strh	r2, [r3, #0]

		if ((header.status & 0x80) == 0)
 8001874:	003b      	movs	r3, r7
 8001876:	889b      	ldrh	r3, [r3, #4]
 8001878:	001a      	movs	r2, r3
 800187a:	2380      	movs	r3, #128	@ 0x80
 800187c:	4013      	ands	r3, r2
 800187e:	d104      	bne.n	800188a <packetReceive+0x10a>
			len = 0; // Invalid packet
 8001880:	230e      	movs	r3, #14
 8001882:	18fb      	adds	r3, r7, r3
 8001884:	2200      	movs	r2, #0
 8001886:	801a      	strh	r2, [r3, #0]
 8001888:	e009      	b.n	800189e <packetReceive+0x11e>
		else
			enc_buffer_read(len, start, buffer);
 800188a:	230e      	movs	r3, #14
 800188c:	18fb      	adds	r3, r7, r3
 800188e:	8818      	ldrh	r0, [r3, #0]
 8001890:	4a17      	ldr	r2, [pc, #92]	@ (80018f0 <packetReceive+0x170>)
 8001892:	2308      	movs	r3, #8
 8001894:	18fb      	adds	r3, r7, r3
 8001896:	881b      	ldrh	r3, [r3, #0]
 8001898:	0019      	movs	r1, r3
 800189a:	f7ff f83d 	bl	8000918 <enc_buffer_read>

		buffer[len] = 0; // Null-terminate
 800189e:	230e      	movs	r3, #14
 80018a0:	18fb      	adds	r3, r7, r3
 80018a2:	881b      	ldrh	r3, [r3, #0]
 80018a4:	4a12      	ldr	r2, [pc, #72]	@ (80018f0 <packetReceive+0x170>)
 80018a6:	2100      	movs	r1, #0
 80018a8:	54d1      	strb	r1, [r2, r3]
		unreleasedPacket = true;
 80018aa:	4b0d      	ldr	r3, [pc, #52]	@ (80018e0 <packetReceive+0x160>)
 80018ac:	2201      	movs	r2, #1
 80018ae:	701a      	strb	r2, [r3, #0]

		uint8_t ECON2 = enc_eth_read(0x1E, 0);
 80018b0:	1dfc      	adds	r4, r7, #7
 80018b2:	2100      	movs	r1, #0
 80018b4:	201e      	movs	r0, #30
 80018b6:	f7ff f935 	bl	8000b24 <enc_eth_read>
 80018ba:	0003      	movs	r3, r0
 80018bc:	7023      	strb	r3, [r4, #0]
		enc_control_write(0, 0x1E, (ECON2 | (1 << 6))); // Enable MAC reception
 80018be:	1dfb      	adds	r3, r7, #7
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	2240      	movs	r2, #64	@ 0x40
 80018c4:	4313      	orrs	r3, r2
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	001a      	movs	r2, r3
 80018ca:	211e      	movs	r1, #30
 80018cc:	2000      	movs	r0, #0
 80018ce:	f7fe fedb 	bl	8000688 <enc_control_write>
	}

	return len;
 80018d2:	230e      	movs	r3, #14
 80018d4:	18fb      	adds	r3, r7, r3
 80018d6:	881b      	ldrh	r3, [r3, #0]
}
 80018d8:	0018      	movs	r0, r3
 80018da:	46bd      	mov	sp, r7
 80018dc:	b004      	add	sp, #16
 80018de:	bdb0      	pop	{r4, r5, r7, pc}
 80018e0:	20000792 	.word	0x20000792
 80018e4:	20000794 	.word	0x20000794
 80018e8:	00001bff 	.word	0x00001bff
 80018ec:	000005db 	.word	0x000005db
 80018f0:	200001ac 	.word	0x200001ac

080018f4 <makeArpReply>:
 memcpy(&buffer[1 + 32], &buffer[1 + 22], 6); // Target MAC = Original Sender MAC
 memcpy(&buffer[1 + 38], &buffer[1 + 28], 4); // Target IP = Original Sender IP    // Send ARP reply (size: 43 bytes)
 transmit_tcp_packet(buffer, 1 + 42);
 }
 */
void makeArpReply() {
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
	printf("trialarpreply\n\r");
 80018f8:	4b20      	ldr	r3, [pc, #128]	@ (800197c <makeArpReply+0x88>)
 80018fa:	0018      	movs	r0, r3
 80018fc:	f001 f970 	bl	8002be0 <iprintf>
	// Adjust buffer starting at index 1 for the correct shift
	memmove(&buffer[1], &buffer[0], 42);
 8001900:	491f      	ldr	r1, [pc, #124]	@ (8001980 <makeArpReply+0x8c>)
 8001902:	4b20      	ldr	r3, [pc, #128]	@ (8001984 <makeArpReply+0x90>)
 8001904:	222a      	movs	r2, #42	@ 0x2a
 8001906:	0018      	movs	r0, r3
 8001908:	f001 fbb0 	bl	800306c <memmove>

	// Set the 0th value to 0x0E
	buffer[0] = 0x0E;
 800190c:	4b1c      	ldr	r3, [pc, #112]	@ (8001980 <makeArpReply+0x8c>)
 800190e:	220e      	movs	r2, #14
 8001910:	701a      	strb	r2, [r3, #0]

	// Copy sender MAC to destination MAC in the shifted buffer
	memcpy(&buffer[1 + ETH_DST_MAC], &buffer[1 + ETH_SRC_MAC], 6); // Destination MAC
 8001912:	491d      	ldr	r1, [pc, #116]	@ (8001988 <makeArpReply+0x94>)
 8001914:	4b1b      	ldr	r3, [pc, #108]	@ (8001984 <makeArpReply+0x90>)
 8001916:	2206      	movs	r2, #6
 8001918:	0018      	movs	r0, r3
 800191a:	f001 fc50 	bl	80031be <memcpy>

	// Set source MAC to device MAC
	memcpy(&buffer[1 + ETH_SRC_MAC], device_mac, 6); // Source MAC
 800191e:	4b18      	ldr	r3, [pc, #96]	@ (8001980 <makeArpReply+0x8c>)
 8001920:	2207      	movs	r2, #7
 8001922:	491a      	ldr	r1, [pc, #104]	@ (800198c <makeArpReply+0x98>)
 8001924:	189b      	adds	r3, r3, r2
 8001926:	2206      	movs	r2, #6
 8001928:	0018      	movs	r0, r3
 800192a:	f001 fc48 	bl	80031be <memcpy>

	// Set ARP reply opcode
	buffer[1 + 21] = 0x02; // ARP Reply opcode
 800192e:	4b14      	ldr	r3, [pc, #80]	@ (8001980 <makeArpReply+0x8c>)
 8001930:	2202      	movs	r2, #2
 8001932:	759a      	strb	r2, [r3, #22]

	// Copy the target MAC and IP (from the request) to the appropriate fields
	memcpy(&buffer[1 + 32], &buffer[1 + 22], 6); // Target MAC = Sender MAC from request
 8001934:	4916      	ldr	r1, [pc, #88]	@ (8001990 <makeArpReply+0x9c>)
 8001936:	4b17      	ldr	r3, [pc, #92]	@ (8001994 <makeArpReply+0xa0>)
 8001938:	2206      	movs	r2, #6
 800193a:	0018      	movs	r0, r3
 800193c:	f001 fc3f 	bl	80031be <memcpy>
	memcpy(&buffer[1 + 38], &buffer[1 + 28], 4); // Target IP = Sender IP from request
 8001940:	4915      	ldr	r1, [pc, #84]	@ (8001998 <makeArpReply+0xa4>)
 8001942:	4b16      	ldr	r3, [pc, #88]	@ (800199c <makeArpReply+0xa8>)
 8001944:	2204      	movs	r2, #4
 8001946:	0018      	movs	r0, r3
 8001948:	f001 fc39 	bl	80031be <memcpy>

	// Set sender MAC to device MAC and sender IP to device IP
	memcpy(&buffer[1 + 22], device_mac, 6); // Sender MAC = device MAC
 800194c:	4b0c      	ldr	r3, [pc, #48]	@ (8001980 <makeArpReply+0x8c>)
 800194e:	2217      	movs	r2, #23
 8001950:	490e      	ldr	r1, [pc, #56]	@ (800198c <makeArpReply+0x98>)
 8001952:	189b      	adds	r3, r3, r2
 8001954:	2206      	movs	r2, #6
 8001956:	0018      	movs	r0, r3
 8001958:	f001 fc31 	bl	80031be <memcpy>
	memcpy(&buffer[1 + 28], device_ip, 4);  // Sender IP = device IP
 800195c:	4b08      	ldr	r3, [pc, #32]	@ (8001980 <makeArpReply+0x8c>)
 800195e:	221d      	movs	r2, #29
 8001960:	490f      	ldr	r1, [pc, #60]	@ (80019a0 <makeArpReply+0xac>)
 8001962:	189b      	adds	r3, r3, r2
 8001964:	2204      	movs	r2, #4
 8001966:	0018      	movs	r0, r3
 8001968:	f001 fc29 	bl	80031be <memcpy>

	// Send ARP reply with new size of 43 bytes
	transmit_tcp_packet(buffer, 43);
 800196c:	4b04      	ldr	r3, [pc, #16]	@ (8001980 <makeArpReply+0x8c>)
 800196e:	212b      	movs	r1, #43	@ 0x2b
 8001970:	0018      	movs	r0, r3
 8001972:	f7ff fe69 	bl	8001648 <transmit_tcp_packet>
}
 8001976:	46c0      	nop			@ (mov r8, r8)
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	08004250 	.word	0x08004250
 8001980:	200001ac 	.word	0x200001ac
 8001984:	200001ad 	.word	0x200001ad
 8001988:	200001b3 	.word	0x200001b3
 800198c:	20000000 	.word	0x20000000
 8001990:	200001c3 	.word	0x200001c3
 8001994:	200001cd 	.word	0x200001cd
 8001998:	200001c9 	.word	0x200001c9
 800199c:	200001d3 	.word	0x200001d3
 80019a0:	20000008 	.word	0x20000008

080019a4 <calculateIPChecksum>:

 buffer[1+TCP_FLAGS_P] = TCP_FLAG_SYN | TCP_FLAG_ACK;
 transmit_tcp_packet(buffer, 1+TCP_DATA_START_P);
 connectionState = SYN_RECEIVED;
 }*/
void calculateIPChecksum(uint8_t *buffer) {
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b086      	sub	sp, #24
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
	// Reset the checksum field
	buffer[IP_CHECKSUM_P] = 0;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	3318      	adds	r3, #24
 80019b0:	2200      	movs	r2, #0
 80019b2:	701a      	strb	r2, [r3, #0]
	buffer[IP_CHECKSUM_P + 1] = 0;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	3319      	adds	r3, #25
 80019b8:	2200      	movs	r2, #0
 80019ba:	701a      	strb	r2, [r3, #0]

	// Calculate checksum for a fixed IP header length (20 bytes)
	uint16_t length = IP_HEADER_LEN;
 80019bc:	2310      	movs	r3, #16
 80019be:	18fb      	adds	r3, r7, r3
 80019c0:	2214      	movs	r2, #20
 80019c2:	801a      	strh	r2, [r3, #0]
	uint32_t sum = 0;
 80019c4:	2300      	movs	r3, #0
 80019c6:	617b      	str	r3, [r7, #20]

	// Sum the 16-bit words in the header
	for (uint16_t i = IP_P; i < IP_P + length; i += 2) {
 80019c8:	2312      	movs	r3, #18
 80019ca:	18fb      	adds	r3, r7, r3
 80019cc:	220e      	movs	r2, #14
 80019ce:	801a      	strh	r2, [r3, #0]
 80019d0:	e01d      	b.n	8001a0e <calculateIPChecksum+0x6a>
		uint16_t word = (buffer[i] << 8) | buffer[i + 1];
 80019d2:	2012      	movs	r0, #18
 80019d4:	183b      	adds	r3, r7, r0
 80019d6:	881b      	ldrh	r3, [r3, #0]
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	18d3      	adds	r3, r2, r3
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	021b      	lsls	r3, r3, #8
 80019e0:	b21a      	sxth	r2, r3
 80019e2:	183b      	adds	r3, r7, r0
 80019e4:	881b      	ldrh	r3, [r3, #0]
 80019e6:	3301      	adds	r3, #1
 80019e8:	6879      	ldr	r1, [r7, #4]
 80019ea:	18cb      	adds	r3, r1, r3
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	b21b      	sxth	r3, r3
 80019f0:	4313      	orrs	r3, r2
 80019f2:	b21a      	sxth	r2, r3
 80019f4:	210c      	movs	r1, #12
 80019f6:	187b      	adds	r3, r7, r1
 80019f8:	801a      	strh	r2, [r3, #0]
		sum += word;
 80019fa:	187b      	adds	r3, r7, r1
 80019fc:	881b      	ldrh	r3, [r3, #0]
 80019fe:	697a      	ldr	r2, [r7, #20]
 8001a00:	18d3      	adds	r3, r2, r3
 8001a02:	617b      	str	r3, [r7, #20]
	for (uint16_t i = IP_P; i < IP_P + length; i += 2) {
 8001a04:	183b      	adds	r3, r7, r0
 8001a06:	183a      	adds	r2, r7, r0
 8001a08:	8812      	ldrh	r2, [r2, #0]
 8001a0a:	3202      	adds	r2, #2
 8001a0c:	801a      	strh	r2, [r3, #0]
 8001a0e:	2310      	movs	r3, #16
 8001a10:	18fb      	adds	r3, r7, r3
 8001a12:	881b      	ldrh	r3, [r3, #0]
 8001a14:	330d      	adds	r3, #13
 8001a16:	001a      	movs	r2, r3
 8001a18:	2312      	movs	r3, #18
 8001a1a:	18fb      	adds	r3, r7, r3
 8001a1c:	881b      	ldrh	r3, [r3, #0]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	dad7      	bge.n	80019d2 <calculateIPChecksum+0x2e>
	}

	// Add carry bits until the sum fits in 16 bits
	while (sum >> 16) {
 8001a22:	e006      	b.n	8001a32 <calculateIPChecksum+0x8e>
		sum = (sum & 0xFFFF) + (sum >> 16);
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	041b      	lsls	r3, r3, #16
 8001a28:	0c1a      	lsrs	r2, r3, #16
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	0c1b      	lsrs	r3, r3, #16
 8001a2e:	18d3      	adds	r3, r2, r3
 8001a30:	617b      	str	r3, [r7, #20]
	while (sum >> 16) {
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	0c1b      	lsrs	r3, r3, #16
 8001a36:	d1f5      	bne.n	8001a24 <calculateIPChecksum+0x80>
	}

	// Compute one's complement and store it in the checksum field
	uint16_t checksum = ~((uint16_t) sum);
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	b29a      	uxth	r2, r3
 8001a3c:	210e      	movs	r1, #14
 8001a3e:	187b      	adds	r3, r7, r1
 8001a40:	43d2      	mvns	r2, r2
 8001a42:	801a      	strh	r2, [r3, #0]
	buffer[IP_CHECKSUM_P] = (checksum >> 8) & 0xFF;
 8001a44:	187b      	adds	r3, r7, r1
 8001a46:	881b      	ldrh	r3, [r3, #0]
 8001a48:	0a1b      	lsrs	r3, r3, #8
 8001a4a:	b29a      	uxth	r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	3318      	adds	r3, #24
 8001a50:	b2d2      	uxtb	r2, r2
 8001a52:	701a      	strb	r2, [r3, #0]
	buffer[IP_CHECKSUM_P + 1] = checksum & 0xFF;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	3319      	adds	r3, #25
 8001a58:	187a      	adds	r2, r7, r1
 8001a5a:	8812      	ldrh	r2, [r2, #0]
 8001a5c:	b2d2      	uxtb	r2, r2
 8001a5e:	701a      	strb	r2, [r3, #0]
}
 8001a60:	46c0      	nop			@ (mov r8, r8)
 8001a62:	46bd      	mov	sp, r7
 8001a64:	b006      	add	sp, #24
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <calculateTcpChecksum>:

void calculateTcpChecksum(uint8_t *buffer) {
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b086      	sub	sp, #24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
	// Reset the checksum field
	buffer[TCP_CHECKSUM_H_P] = 0;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	3332      	adds	r3, #50	@ 0x32
 8001a74:	2200      	movs	r2, #0
 8001a76:	701a      	strb	r2, [r3, #0]
	buffer[TCP_CHECKSUM_L_P] = 0;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	3333      	adds	r3, #51	@ 0x33
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	701a      	strb	r2, [r3, #0]

	// Extract TCP length (Total Length - IP Header Length)
	uint16_t tcpLength = (((buffer[IP_TOTLEN_H_P] << 8) | buffer[IP_TOTLEN_L_P])
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	3310      	adds	r3, #16
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	021b      	lsls	r3, r3, #8
 8001a88:	b21a      	sxth	r2, r3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	3311      	adds	r3, #17
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	b21b      	sxth	r3, r3
 8001a92:	4313      	orrs	r3, r2
 8001a94:	b21b      	sxth	r3, r3
 8001a96:	b29a      	uxth	r2, r3
 8001a98:	230e      	movs	r3, #14
 8001a9a:	18fb      	adds	r3, r7, r3
 8001a9c:	3a14      	subs	r2, #20
 8001a9e:	801a      	strh	r2, [r3, #0]
			- IP_HEADER_LEN);
	uint32_t sum = 0;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	617b      	str	r3, [r7, #20]

	// Pseudo-header: Source IP
	for (uint8_t i = 0; i < 4; i++) {
 8001aa4:	2313      	movs	r3, #19
 8001aa6:	18fb      	adds	r3, r7, r3
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	701a      	strb	r2, [r3, #0]
 8001aac:	e01d      	b.n	8001aea <calculateTcpChecksum+0x82>
		sum += (buffer[IP_SRC_P + i] << 8) | buffer[IP_SRC_P + i + 1];
 8001aae:	2013      	movs	r0, #19
 8001ab0:	183b      	adds	r3, r7, r0
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	331a      	adds	r3, #26
 8001ab6:	001a      	movs	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	189b      	adds	r3, r3, r2
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	021b      	lsls	r3, r3, #8
 8001ac0:	183a      	adds	r2, r7, r0
 8001ac2:	7812      	ldrb	r2, [r2, #0]
 8001ac4:	321b      	adds	r2, #27
 8001ac6:	6879      	ldr	r1, [r7, #4]
 8001ac8:	188a      	adds	r2, r1, r2
 8001aca:	7812      	ldrb	r2, [r2, #0]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	001a      	movs	r2, r3
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	189b      	adds	r3, r3, r2
 8001ad4:	617b      	str	r3, [r7, #20]
		i++;
 8001ad6:	183b      	adds	r3, r7, r0
 8001ad8:	781a      	ldrb	r2, [r3, #0]
 8001ada:	183b      	adds	r3, r7, r0
 8001adc:	3201      	adds	r2, #1
 8001ade:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 4; i++) {
 8001ae0:	183b      	adds	r3, r7, r0
 8001ae2:	781a      	ldrb	r2, [r3, #0]
 8001ae4:	183b      	adds	r3, r7, r0
 8001ae6:	3201      	adds	r2, #1
 8001ae8:	701a      	strb	r2, [r3, #0]
 8001aea:	2313      	movs	r3, #19
 8001aec:	18fb      	adds	r3, r7, r3
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	2b03      	cmp	r3, #3
 8001af2:	d9dc      	bls.n	8001aae <calculateTcpChecksum+0x46>
	}

	// Pseudo-header: Destination IP
	for (uint8_t i = 0; i < 4; i++) {
 8001af4:	2312      	movs	r3, #18
 8001af6:	18fb      	adds	r3, r7, r3
 8001af8:	2200      	movs	r2, #0
 8001afa:	701a      	strb	r2, [r3, #0]
 8001afc:	e01d      	b.n	8001b3a <calculateTcpChecksum+0xd2>
		sum += (buffer[IP_DST_P + i] << 8) | buffer[IP_DST_P + i + 1];
 8001afe:	2012      	movs	r0, #18
 8001b00:	183b      	adds	r3, r7, r0
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	331e      	adds	r3, #30
 8001b06:	001a      	movs	r2, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	189b      	adds	r3, r3, r2
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	021b      	lsls	r3, r3, #8
 8001b10:	183a      	adds	r2, r7, r0
 8001b12:	7812      	ldrb	r2, [r2, #0]
 8001b14:	321f      	adds	r2, #31
 8001b16:	6879      	ldr	r1, [r7, #4]
 8001b18:	188a      	adds	r2, r1, r2
 8001b1a:	7812      	ldrb	r2, [r2, #0]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	001a      	movs	r2, r3
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	189b      	adds	r3, r3, r2
 8001b24:	617b      	str	r3, [r7, #20]
		i++;
 8001b26:	183b      	adds	r3, r7, r0
 8001b28:	781a      	ldrb	r2, [r3, #0]
 8001b2a:	183b      	adds	r3, r7, r0
 8001b2c:	3201      	adds	r2, #1
 8001b2e:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 4; i++) {
 8001b30:	183b      	adds	r3, r7, r0
 8001b32:	781a      	ldrb	r2, [r3, #0]
 8001b34:	183b      	adds	r3, r7, r0
 8001b36:	3201      	adds	r2, #1
 8001b38:	701a      	strb	r2, [r3, #0]
 8001b3a:	2312      	movs	r3, #18
 8001b3c:	18fb      	adds	r3, r7, r3
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	2b03      	cmp	r3, #3
 8001b42:	d9dc      	bls.n	8001afe <calculateTcpChecksum+0x96>
	}

	// Pseudo-header: Protocol and TCP length
	sum += (uint16_t) IP_PROTO_TCP;
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	3306      	adds	r3, #6
 8001b48:	617b      	str	r3, [r7, #20]
	sum += tcpLength;
 8001b4a:	230e      	movs	r3, #14
 8001b4c:	18fb      	adds	r3, r7, r3
 8001b4e:	881b      	ldrh	r3, [r3, #0]
 8001b50:	697a      	ldr	r2, [r7, #20]
 8001b52:	18d3      	adds	r3, r2, r3
 8001b54:	617b      	str	r3, [r7, #20]

	// TCP Header and Payload
	for (uint16_t i = TCP_SRC_PORT_H_P; i < TCP_SRC_PORT_H_P + tcpLength; i +=
 8001b56:	2310      	movs	r3, #16
 8001b58:	18fb      	adds	r3, r7, r3
 8001b5a:	2222      	movs	r2, #34	@ 0x22
 8001b5c:	801a      	strh	r2, [r3, #0]
 8001b5e:	e01d      	b.n	8001b9c <calculateTcpChecksum+0x134>
			2) {
		uint16_t word = (buffer[i] << 8) | buffer[i + 1];
 8001b60:	2010      	movs	r0, #16
 8001b62:	183b      	adds	r3, r7, r0
 8001b64:	881b      	ldrh	r3, [r3, #0]
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	18d3      	adds	r3, r2, r3
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	021b      	lsls	r3, r3, #8
 8001b6e:	b21a      	sxth	r2, r3
 8001b70:	183b      	adds	r3, r7, r0
 8001b72:	881b      	ldrh	r3, [r3, #0]
 8001b74:	3301      	adds	r3, #1
 8001b76:	6879      	ldr	r1, [r7, #4]
 8001b78:	18cb      	adds	r3, r1, r3
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	b21b      	sxth	r3, r3
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	b21a      	sxth	r2, r3
 8001b82:	210a      	movs	r1, #10
 8001b84:	187b      	adds	r3, r7, r1
 8001b86:	801a      	strh	r2, [r3, #0]
		sum += word;
 8001b88:	187b      	adds	r3, r7, r1
 8001b8a:	881b      	ldrh	r3, [r3, #0]
 8001b8c:	697a      	ldr	r2, [r7, #20]
 8001b8e:	18d3      	adds	r3, r2, r3
 8001b90:	617b      	str	r3, [r7, #20]
	for (uint16_t i = TCP_SRC_PORT_H_P; i < TCP_SRC_PORT_H_P + tcpLength; i +=
 8001b92:	183b      	adds	r3, r7, r0
 8001b94:	183a      	adds	r2, r7, r0
 8001b96:	8812      	ldrh	r2, [r2, #0]
 8001b98:	3202      	adds	r2, #2
 8001b9a:	801a      	strh	r2, [r3, #0]
 8001b9c:	230e      	movs	r3, #14
 8001b9e:	18fb      	adds	r3, r7, r3
 8001ba0:	881b      	ldrh	r3, [r3, #0]
 8001ba2:	3321      	adds	r3, #33	@ 0x21
 8001ba4:	001a      	movs	r2, r3
 8001ba6:	2310      	movs	r3, #16
 8001ba8:	18fb      	adds	r3, r7, r3
 8001baa:	881b      	ldrh	r3, [r3, #0]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	dad7      	bge.n	8001b60 <calculateTcpChecksum+0xf8>
	}

	// Add carry bits
	while (sum >> 16) {
 8001bb0:	e006      	b.n	8001bc0 <calculateTcpChecksum+0x158>
		sum = (sum & 0xFFFF) + (sum >> 16);
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	041b      	lsls	r3, r3, #16
 8001bb6:	0c1a      	lsrs	r2, r3, #16
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	0c1b      	lsrs	r3, r3, #16
 8001bbc:	18d3      	adds	r3, r2, r3
 8001bbe:	617b      	str	r3, [r7, #20]
	while (sum >> 16) {
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	0c1b      	lsrs	r3, r3, #16
 8001bc4:	d1f5      	bne.n	8001bb2 <calculateTcpChecksum+0x14a>
	}

	// Compute one's complement and store in the checksum field
	uint16_t checksum = ~((uint16_t) sum);
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	b29a      	uxth	r2, r3
 8001bca:	210c      	movs	r1, #12
 8001bcc:	187b      	adds	r3, r7, r1
 8001bce:	43d2      	mvns	r2, r2
 8001bd0:	801a      	strh	r2, [r3, #0]
	buffer[TCP_CHECKSUM_H_P] = (checksum >> 8) & 0xFF;
 8001bd2:	187b      	adds	r3, r7, r1
 8001bd4:	881b      	ldrh	r3, [r3, #0]
 8001bd6:	0a1b      	lsrs	r3, r3, #8
 8001bd8:	b29a      	uxth	r2, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	3332      	adds	r3, #50	@ 0x32
 8001bde:	b2d2      	uxtb	r2, r2
 8001be0:	701a      	strb	r2, [r3, #0]
	buffer[TCP_CHECKSUM_L_P] = checksum & 0xFF;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	3333      	adds	r3, #51	@ 0x33
 8001be6:	187a      	adds	r2, r7, r1
 8001be8:	8812      	ldrh	r2, [r2, #0]
 8001bea:	b2d2      	uxtb	r2, r2
 8001bec:	701a      	strb	r2, [r3, #0]
}
 8001bee:	46c0      	nop			@ (mov r8, r8)
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	b006      	add	sp, #24
 8001bf4:	bd80      	pop	{r7, pc}
	...

08001bf8 <makeTcpFinPshAck>:

void makeTcpFinPshAck() {
 8001bf8:	b590      	push	{r4, r7, lr}
 8001bfa:	4c80      	ldr	r4, [pc, #512]	@ (8001dfc <makeTcpFinPshAck+0x204>)
 8001bfc:	44a5      	add	sp, r4
 8001bfe:	af02      	add	r7, sp, #8
	printf("makeTcpFinPshAck\n\r");
 8001c00:	4b7f      	ldr	r3, [pc, #508]	@ (8001e00 <makeTcpFinPshAck+0x208>)
 8001c02:	0018      	movs	r0, r3
 8001c04:	f000 ffec 	bl	8002be0 <iprintf>

	// Shift buffer for alignment
	memmove(&buffer[1], &buffer[0], TCP_DATA_START_P);
 8001c08:	497e      	ldr	r1, [pc, #504]	@ (8001e04 <makeTcpFinPshAck+0x20c>)
 8001c0a:	4b7f      	ldr	r3, [pc, #508]	@ (8001e08 <makeTcpFinPshAck+0x210>)
 8001c0c:	2236      	movs	r2, #54	@ 0x36
 8001c0e:	0018      	movs	r0, r3
 8001c10:	f001 fa2c 	bl	800306c <memmove>
	buffer[0] = 0x0E;
 8001c14:	4b7b      	ldr	r3, [pc, #492]	@ (8001e04 <makeTcpFinPshAck+0x20c>)
 8001c16:	220e      	movs	r2, #14
 8001c18:	701a      	strb	r2, [r3, #0]

	// Ethernet MAC addresses
	memcpy(&buffer[1 + ETH_DST_MAC], &buffer[1 + ETH_SRC_MAC], 6);
 8001c1a:	497c      	ldr	r1, [pc, #496]	@ (8001e0c <makeTcpFinPshAck+0x214>)
 8001c1c:	4b7a      	ldr	r3, [pc, #488]	@ (8001e08 <makeTcpFinPshAck+0x210>)
 8001c1e:	2206      	movs	r2, #6
 8001c20:	0018      	movs	r0, r3
 8001c22:	f001 facc 	bl	80031be <memcpy>
	memcpy(&buffer[1 + ETH_SRC_MAC], device_mac, 6);
 8001c26:	4b77      	ldr	r3, [pc, #476]	@ (8001e04 <makeTcpFinPshAck+0x20c>)
 8001c28:	2207      	movs	r2, #7
 8001c2a:	4979      	ldr	r1, [pc, #484]	@ (8001e10 <makeTcpFinPshAck+0x218>)
 8001c2c:	189b      	adds	r3, r3, r2
 8001c2e:	2206      	movs	r2, #6
 8001c30:	0018      	movs	r0, r3
 8001c32:	f001 fac4 	bl	80031be <memcpy>

	// IP source and destination addresses
	memcpy(&buffer[1 + IP_DST_P], &buffer[1 + IP_SRC_P], 4);
 8001c36:	4977      	ldr	r1, [pc, #476]	@ (8001e14 <makeTcpFinPshAck+0x21c>)
 8001c38:	4b77      	ldr	r3, [pc, #476]	@ (8001e18 <makeTcpFinPshAck+0x220>)
 8001c3a:	2204      	movs	r2, #4
 8001c3c:	0018      	movs	r0, r3
 8001c3e:	f001 fabe 	bl	80031be <memcpy>
	memcpy(&buffer[1 + IP_SRC_P], device_ip, 4);
 8001c42:	4b70      	ldr	r3, [pc, #448]	@ (8001e04 <makeTcpFinPshAck+0x20c>)
 8001c44:	221b      	movs	r2, #27
 8001c46:	4975      	ldr	r1, [pc, #468]	@ (8001e1c <makeTcpFinPshAck+0x224>)
 8001c48:	189b      	adds	r3, r3, r2
 8001c4a:	2204      	movs	r2, #4
 8001c4c:	0018      	movs	r0, r3
 8001c4e:	f001 fab6 	bl	80031be <memcpy>

	// TCP source and destination ports
	uint16_t srcPort = (buffer[1 + TCP_SRC_PORT_H_P] << 8)
 8001c52:	4b6c      	ldr	r3, [pc, #432]	@ (8001e04 <makeTcpFinPshAck+0x20c>)
 8001c54:	2223      	movs	r2, #35	@ 0x23
 8001c56:	5c9b      	ldrb	r3, [r3, r2]
 8001c58:	021b      	lsls	r3, r3, #8
			| buffer[1 + TCP_SRC_PORT_L_P];
 8001c5a:	b21a      	sxth	r2, r3
 8001c5c:	4b69      	ldr	r3, [pc, #420]	@ (8001e04 <makeTcpFinPshAck+0x20c>)
 8001c5e:	2124      	movs	r1, #36	@ 0x24
 8001c60:	5c5b      	ldrb	r3, [r3, r1]
 8001c62:	b21b      	sxth	r3, r3
 8001c64:	4313      	orrs	r3, r2
 8001c66:	b21a      	sxth	r2, r3
	uint16_t srcPort = (buffer[1 + TCP_SRC_PORT_H_P] << 8)
 8001c68:	486d      	ldr	r0, [pc, #436]	@ (8001e20 <makeTcpFinPshAck+0x228>)
 8001c6a:	183b      	adds	r3, r7, r0
 8001c6c:	801a      	strh	r2, [r3, #0]
	uint16_t dstPort = (buffer[1 + TCP_DST_PORT_H_P] << 8)
 8001c6e:	4b65      	ldr	r3, [pc, #404]	@ (8001e04 <makeTcpFinPshAck+0x20c>)
 8001c70:	2225      	movs	r2, #37	@ 0x25
 8001c72:	5c9b      	ldrb	r3, [r3, r2]
 8001c74:	021b      	lsls	r3, r3, #8
			| buffer[1 + TCP_DST_PORT_L_P];
 8001c76:	b21a      	sxth	r2, r3
 8001c78:	4b62      	ldr	r3, [pc, #392]	@ (8001e04 <makeTcpFinPshAck+0x20c>)
 8001c7a:	2126      	movs	r1, #38	@ 0x26
 8001c7c:	5c5b      	ldrb	r3, [r3, r1]
 8001c7e:	b21b      	sxth	r3, r3
 8001c80:	4313      	orrs	r3, r2
 8001c82:	b21a      	sxth	r2, r3
	uint16_t dstPort = (buffer[1 + TCP_DST_PORT_H_P] << 8)
 8001c84:	4c67      	ldr	r4, [pc, #412]	@ (8001e24 <makeTcpFinPshAck+0x22c>)
 8001c86:	193b      	adds	r3, r7, r4
 8001c88:	801a      	strh	r2, [r3, #0]
	buffer[1 + TCP_SRC_PORT_H_P] = dstPort >> 8;
 8001c8a:	193b      	adds	r3, r7, r4
 8001c8c:	881b      	ldrh	r3, [r3, #0]
 8001c8e:	0a1b      	lsrs	r3, r3, #8
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	b2d9      	uxtb	r1, r3
 8001c94:	4b5b      	ldr	r3, [pc, #364]	@ (8001e04 <makeTcpFinPshAck+0x20c>)
 8001c96:	2223      	movs	r2, #35	@ 0x23
 8001c98:	5499      	strb	r1, [r3, r2]
	buffer[1 + TCP_SRC_PORT_L_P] = dstPort & 0xFF;
 8001c9a:	193b      	adds	r3, r7, r4
 8001c9c:	881b      	ldrh	r3, [r3, #0]
 8001c9e:	b2d9      	uxtb	r1, r3
 8001ca0:	4b58      	ldr	r3, [pc, #352]	@ (8001e04 <makeTcpFinPshAck+0x20c>)
 8001ca2:	2224      	movs	r2, #36	@ 0x24
 8001ca4:	5499      	strb	r1, [r3, r2]
	buffer[1 + TCP_DST_PORT_H_P] = srcPort >> 8;
 8001ca6:	183b      	adds	r3, r7, r0
 8001ca8:	881b      	ldrh	r3, [r3, #0]
 8001caa:	0a1b      	lsrs	r3, r3, #8
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	b2d9      	uxtb	r1, r3
 8001cb0:	4b54      	ldr	r3, [pc, #336]	@ (8001e04 <makeTcpFinPshAck+0x20c>)
 8001cb2:	2225      	movs	r2, #37	@ 0x25
 8001cb4:	5499      	strb	r1, [r3, r2]
	buffer[1 + TCP_DST_PORT_L_P] = srcPort & 0xFF;
 8001cb6:	183b      	adds	r3, r7, r0
 8001cb8:	881b      	ldrh	r3, [r3, #0]
 8001cba:	b2d9      	uxtb	r1, r3
 8001cbc:	4b51      	ldr	r3, [pc, #324]	@ (8001e04 <makeTcpFinPshAck+0x20c>)
 8001cbe:	2226      	movs	r2, #38	@ 0x26
 8001cc0:	5499      	strb	r1, [r3, r2]

	// Sequence and acknowledgment numbers
	uint32_t serverSeqNum = prevSeq;
 8001cc2:	4b59      	ldr	r3, [pc, #356]	@ (8001e28 <makeTcpFinPshAck+0x230>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2081      	movs	r0, #129	@ 0x81
 8001cc8:	00c0      	lsls	r0, r0, #3
 8001cca:	183a      	adds	r2, r7, r0
 8001ccc:	6013      	str	r3, [r2, #0]
	uint32_t ackNum = prevAck;
 8001cce:	4b57      	ldr	r3, [pc, #348]	@ (8001e2c <makeTcpFinPshAck+0x234>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4c57      	ldr	r4, [pc, #348]	@ (8001e30 <makeTcpFinPshAck+0x238>)
 8001cd4:	193a      	adds	r2, r7, r4
 8001cd6:	6013      	str	r3, [r2, #0]

	buffer[1 + TCP_SEQ_H_P] = (serverSeqNum >> 24) & 0xFF;
 8001cd8:	183b      	adds	r3, r7, r0
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	0e1b      	lsrs	r3, r3, #24
 8001cde:	b2d9      	uxtb	r1, r3
 8001ce0:	4b48      	ldr	r3, [pc, #288]	@ (8001e04 <makeTcpFinPshAck+0x20c>)
 8001ce2:	2227      	movs	r2, #39	@ 0x27
 8001ce4:	5499      	strb	r1, [r3, r2]
	buffer[1 + TCP_SEQ_H_P + 1] = (serverSeqNum >> 16) & 0xFF;
 8001ce6:	183b      	adds	r3, r7, r0
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	0c1b      	lsrs	r3, r3, #16
 8001cec:	b2d9      	uxtb	r1, r3
 8001cee:	4b45      	ldr	r3, [pc, #276]	@ (8001e04 <makeTcpFinPshAck+0x20c>)
 8001cf0:	2228      	movs	r2, #40	@ 0x28
 8001cf2:	5499      	strb	r1, [r3, r2]
	buffer[1 + TCP_SEQ_H_P + 2] = (serverSeqNum >> 8) & 0xFF;
 8001cf4:	183b      	adds	r3, r7, r0
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	0a1b      	lsrs	r3, r3, #8
 8001cfa:	b2d9      	uxtb	r1, r3
 8001cfc:	4b41      	ldr	r3, [pc, #260]	@ (8001e04 <makeTcpFinPshAck+0x20c>)
 8001cfe:	2229      	movs	r2, #41	@ 0x29
 8001d00:	5499      	strb	r1, [r3, r2]
	buffer[1 + TCP_SEQ_H_P + 3] = serverSeqNum & 0xFF;
 8001d02:	183b      	adds	r3, r7, r0
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	b2d9      	uxtb	r1, r3
 8001d08:	4b3e      	ldr	r3, [pc, #248]	@ (8001e04 <makeTcpFinPshAck+0x20c>)
 8001d0a:	222a      	movs	r2, #42	@ 0x2a
 8001d0c:	5499      	strb	r1, [r3, r2]
	buffer[1 + TCP_SEQ_H_P + 4] = (ackNum >> 24) & 0xFF;
 8001d0e:	193b      	adds	r3, r7, r4
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	0e1b      	lsrs	r3, r3, #24
 8001d14:	b2d9      	uxtb	r1, r3
 8001d16:	4b3b      	ldr	r3, [pc, #236]	@ (8001e04 <makeTcpFinPshAck+0x20c>)
 8001d18:	222b      	movs	r2, #43	@ 0x2b
 8001d1a:	5499      	strb	r1, [r3, r2]
	buffer[1 + TCP_SEQ_H_P + 5] = (ackNum >> 16) & 0xFF;
 8001d1c:	193b      	adds	r3, r7, r4
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	0c1b      	lsrs	r3, r3, #16
 8001d22:	b2d9      	uxtb	r1, r3
 8001d24:	4b37      	ldr	r3, [pc, #220]	@ (8001e04 <makeTcpFinPshAck+0x20c>)
 8001d26:	222c      	movs	r2, #44	@ 0x2c
 8001d28:	5499      	strb	r1, [r3, r2]
	buffer[1 + TCP_SEQ_H_P + 6] = (ackNum >> 8) & 0xFF;
 8001d2a:	193b      	adds	r3, r7, r4
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	0a1b      	lsrs	r3, r3, #8
 8001d30:	b2d9      	uxtb	r1, r3
 8001d32:	4b34      	ldr	r3, [pc, #208]	@ (8001e04 <makeTcpFinPshAck+0x20c>)
 8001d34:	222d      	movs	r2, #45	@ 0x2d
 8001d36:	5499      	strb	r1, [r3, r2]
	buffer[1 + TCP_SEQ_H_P + 7] = ackNum & 0xFF;
 8001d38:	193b      	adds	r3, r7, r4
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	b2d9      	uxtb	r1, r3
 8001d3e:	4b31      	ldr	r3, [pc, #196]	@ (8001e04 <makeTcpFinPshAck+0x20c>)
 8001d40:	222e      	movs	r2, #46	@ 0x2e
 8001d42:	5499      	strb	r1, [r3, r2]
			"<p>This web server showcases the power of microcontrollers and Ethernet communication. "
			"By leveraging the AT89C51RC2 microcontroller and the ENC28J60 Ethernet controller, we can serve dynamic web pages and control embedded devices remotely. "
			"The server allows seamless communication between hardware and software, enabling real-time data exchange across the network.</p>"
			"</body>"
			"</html>", 530, // Content-Length (adjust based on the actual content)
			(obstacleDetected == 1) ? "Obstacle Detected" : "No Obstacle");
 8001d44:	4b3b      	ldr	r3, [pc, #236]	@ (8001e34 <makeTcpFinPshAck+0x23c>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
	snprintf(html_payload, sizeof(html_payload), "HTTP/1.1 200 OK\r\n"
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <makeTcpFinPshAck+0x158>
 8001d4c:	4b3a      	ldr	r3, [pc, #232]	@ (8001e38 <makeTcpFinPshAck+0x240>)
 8001d4e:	e000      	b.n	8001d52 <makeTcpFinPshAck+0x15a>
 8001d50:	4b3a      	ldr	r3, [pc, #232]	@ (8001e3c <makeTcpFinPshAck+0x244>)
 8001d52:	4c3b      	ldr	r4, [pc, #236]	@ (8001e40 <makeTcpFinPshAck+0x248>)
 8001d54:	4a3b      	ldr	r2, [pc, #236]	@ (8001e44 <makeTcpFinPshAck+0x24c>)
 8001d56:	2180      	movs	r1, #128	@ 0x80
 8001d58:	00c9      	lsls	r1, r1, #3
 8001d5a:	0038      	movs	r0, r7
 8001d5c:	9300      	str	r3, [sp, #0]
 8001d5e:	0023      	movs	r3, r4
 8001d60:	f001 f864 	bl	8002e2c <sniprintf>

	uint16_t dataLength = strlen(html_payload);
 8001d64:	003b      	movs	r3, r7
 8001d66:	0018      	movs	r0, r3
 8001d68:	f7fe f9ce 	bl	8000108 <strlen>
 8001d6c:	0002      	movs	r2, r0
 8001d6e:	4836      	ldr	r0, [pc, #216]	@ (8001e48 <makeTcpFinPshAck+0x250>)
 8001d70:	183b      	adds	r3, r7, r0
 8001d72:	801a      	strh	r2, [r3, #0]

	// IP total length
	uint16_t totalLength = IP_HEADER_LEN + TCP_HEADER_LEN + dataLength;
 8001d74:	2180      	movs	r1, #128	@ 0x80
 8001d76:	00c9      	lsls	r1, r1, #3
 8001d78:	187b      	adds	r3, r7, r1
 8001d7a:	183a      	adds	r2, r7, r0
 8001d7c:	8812      	ldrh	r2, [r2, #0]
 8001d7e:	3228      	adds	r2, #40	@ 0x28
 8001d80:	801a      	strh	r2, [r3, #0]
	buffer[1 + IP_TOTLEN_H_P] = (totalLength >> 8) & 0xFF;
 8001d82:	187b      	adds	r3, r7, r1
 8001d84:	881b      	ldrh	r3, [r3, #0]
 8001d86:	0a1b      	lsrs	r3, r3, #8
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	b2da      	uxtb	r2, r3
 8001d8c:	4b1d      	ldr	r3, [pc, #116]	@ (8001e04 <makeTcpFinPshAck+0x20c>)
 8001d8e:	745a      	strb	r2, [r3, #17]
	buffer[1 + IP_TOTLEN_L_P] = totalLength & 0xFF;
 8001d90:	187b      	adds	r3, r7, r1
 8001d92:	881b      	ldrh	r3, [r3, #0]
 8001d94:	b2da      	uxtb	r2, r3
 8001d96:	4b1b      	ldr	r3, [pc, #108]	@ (8001e04 <makeTcpFinPshAck+0x20c>)
 8001d98:	749a      	strb	r2, [r3, #18]

	// TCP flags, window size, and header length
	buffer[1 + TCP_FLAGS_P] = TCP_FLAG_FIN | TCP_FLAG_PUSH | TCP_FLAG_ACK;
 8001d9a:	4b1a      	ldr	r3, [pc, #104]	@ (8001e04 <makeTcpFinPshAck+0x20c>)
 8001d9c:	2230      	movs	r2, #48	@ 0x30
 8001d9e:	2119      	movs	r1, #25
 8001da0:	5499      	strb	r1, [r3, r2]
	buffer[1 + TCP_WIN_SIZE_H_P] = 0xFF;
 8001da2:	4b18      	ldr	r3, [pc, #96]	@ (8001e04 <makeTcpFinPshAck+0x20c>)
 8001da4:	2231      	movs	r2, #49	@ 0x31
 8001da6:	21ff      	movs	r1, #255	@ 0xff
 8001da8:	5499      	strb	r1, [r3, r2]
	buffer[1 + TCP_WIN_SIZE_L_P] = 0xFF;
 8001daa:	4b16      	ldr	r3, [pc, #88]	@ (8001e04 <makeTcpFinPshAck+0x20c>)
 8001dac:	2232      	movs	r2, #50	@ 0x32
 8001dae:	21ff      	movs	r1, #255	@ 0xff
 8001db0:	5499      	strb	r1, [r3, r2]
	buffer[1 + TCP_HEADER_LEN_P] = 0x50; // 20 bytes (5 words)
 8001db2:	4b14      	ldr	r3, [pc, #80]	@ (8001e04 <makeTcpFinPshAck+0x20c>)
 8001db4:	222f      	movs	r2, #47	@ 0x2f
 8001db6:	2150      	movs	r1, #80	@ 0x50
 8001db8:	5499      	strb	r1, [r3, r2]

	// Copy the HTML payload into the buffer
	memcpy(&buffer[1 + TCP_DATA_START_P], html_payload, dataLength);
 8001dba:	0004      	movs	r4, r0
 8001dbc:	183b      	adds	r3, r7, r0
 8001dbe:	881a      	ldrh	r2, [r3, #0]
 8001dc0:	0039      	movs	r1, r7
 8001dc2:	4b22      	ldr	r3, [pc, #136]	@ (8001e4c <makeTcpFinPshAck+0x254>)
 8001dc4:	0018      	movs	r0, r3
 8001dc6:	f001 f9fa 	bl	80031be <memcpy>

	// IP and TCP checksums
	calculateIPChecksum(&buffer[1]); // Pass the buffer to calculate the IP checksum
 8001dca:	4b0f      	ldr	r3, [pc, #60]	@ (8001e08 <makeTcpFinPshAck+0x210>)
 8001dcc:	0018      	movs	r0, r3
 8001dce:	f7ff fde9 	bl	80019a4 <calculateIPChecksum>
	calculateTcpChecksum(&buffer[1]); // Pass the buffer to calculate the TCP checksum
 8001dd2:	4b0d      	ldr	r3, [pc, #52]	@ (8001e08 <makeTcpFinPshAck+0x210>)
 8001dd4:	0018      	movs	r0, r3
 8001dd6:	f7ff fe47 	bl	8001a68 <calculateTcpChecksum>

	// Transmit the packet
	transmit_tcp_packet(buffer, 1 + TCP_DATA_START_P + dataLength);
 8001dda:	193b      	adds	r3, r7, r4
 8001ddc:	881b      	ldrh	r3, [r3, #0]
 8001dde:	3337      	adds	r3, #55	@ 0x37
 8001de0:	b29a      	uxth	r2, r3
 8001de2:	4b08      	ldr	r3, [pc, #32]	@ (8001e04 <makeTcpFinPshAck+0x20c>)
 8001de4:	0011      	movs	r1, r2
 8001de6:	0018      	movs	r0, r3
 8001de8:	f7ff fc2e 	bl	8001648 <transmit_tcp_packet>

	// Update connection state
	connectionState = FIN_WAIT;
 8001dec:	4b18      	ldr	r3, [pc, #96]	@ (8001e50 <makeTcpFinPshAck+0x258>)
 8001dee:	2203      	movs	r2, #3
 8001df0:	701a      	strb	r2, [r3, #0]
}
 8001df2:	46c0      	nop			@ (mov r8, r8)
 8001df4:	46bd      	mov	sp, r7
 8001df6:	4b17      	ldr	r3, [pc, #92]	@ (8001e54 <makeTcpFinPshAck+0x25c>)
 8001df8:	449d      	add	sp, r3
 8001dfa:	bd90      	pop	{r4, r7, pc}
 8001dfc:	fffffbe4 	.word	0xfffffbe4
 8001e00:	08004260 	.word	0x08004260
 8001e04:	200001ac 	.word	0x200001ac
 8001e08:	200001ad 	.word	0x200001ad
 8001e0c:	200001b3 	.word	0x200001b3
 8001e10:	20000000 	.word	0x20000000
 8001e14:	200001c7 	.word	0x200001c7
 8001e18:	200001cb 	.word	0x200001cb
 8001e1c:	20000008 	.word	0x20000008
 8001e20:	0000040e 	.word	0x0000040e
 8001e24:	0000040c 	.word	0x0000040c
 8001e28:	20000788 	.word	0x20000788
 8001e2c:	2000078c 	.word	0x2000078c
 8001e30:	00000404 	.word	0x00000404
 8001e34:	20000790 	.word	0x20000790
 8001e38:	08004274 	.word	0x08004274
 8001e3c:	08004288 	.word	0x08004288
 8001e40:	00000212 	.word	0x00000212
 8001e44:	08004294 	.word	0x08004294
 8001e48:	00000402 	.word	0x00000402
 8001e4c:	200001e3 	.word	0x200001e3
 8001e50:	20000791 	.word	0x20000791
 8001e54:	00000414 	.word	0x00000414

08001e58 <makeTcpAck3>:

void makeTcpAck3() {
 8001e58:	b590      	push	{r4, r7, lr}
 8001e5a:	b087      	sub	sp, #28
 8001e5c:	af00      	add	r7, sp, #0
	printf("makeTcpAck\n\r");
 8001e5e:	4b79      	ldr	r3, [pc, #484]	@ (8002044 <makeTcpAck3+0x1ec>)
 8001e60:	0018      	movs	r0, r3
 8001e62:	f000 febd 	bl	8002be0 <iprintf>

	// Shift buffer for alignment
	memmove(&buffer[1], &buffer[0], TCP_DATA_START_P);
 8001e66:	4978      	ldr	r1, [pc, #480]	@ (8002048 <makeTcpAck3+0x1f0>)
 8001e68:	4b78      	ldr	r3, [pc, #480]	@ (800204c <makeTcpAck3+0x1f4>)
 8001e6a:	2236      	movs	r2, #54	@ 0x36
 8001e6c:	0018      	movs	r0, r3
 8001e6e:	f001 f8fd 	bl	800306c <memmove>
	buffer[0] = 0x0E;
 8001e72:	4b75      	ldr	r3, [pc, #468]	@ (8002048 <makeTcpAck3+0x1f0>)
 8001e74:	220e      	movs	r2, #14
 8001e76:	701a      	strb	r2, [r3, #0]

	// Ethernet MAC addresses
	memcpy(&buffer[1 + ETH_DST_MAC], &buffer[1 + ETH_SRC_MAC], 6);
 8001e78:	4975      	ldr	r1, [pc, #468]	@ (8002050 <makeTcpAck3+0x1f8>)
 8001e7a:	4b74      	ldr	r3, [pc, #464]	@ (800204c <makeTcpAck3+0x1f4>)
 8001e7c:	2206      	movs	r2, #6
 8001e7e:	0018      	movs	r0, r3
 8001e80:	f001 f99d 	bl	80031be <memcpy>
	memcpy(&buffer[1 + ETH_SRC_MAC], device_mac, 6);
 8001e84:	4b70      	ldr	r3, [pc, #448]	@ (8002048 <makeTcpAck3+0x1f0>)
 8001e86:	2207      	movs	r2, #7
 8001e88:	4972      	ldr	r1, [pc, #456]	@ (8002054 <makeTcpAck3+0x1fc>)
 8001e8a:	189b      	adds	r3, r3, r2
 8001e8c:	2206      	movs	r2, #6
 8001e8e:	0018      	movs	r0, r3
 8001e90:	f001 f995 	bl	80031be <memcpy>

	// IP source and destination addresses
	memcpy(&buffer[1 + IP_DST_P], &buffer[1 + IP_SRC_P], 4);
 8001e94:	4970      	ldr	r1, [pc, #448]	@ (8002058 <makeTcpAck3+0x200>)
 8001e96:	4b71      	ldr	r3, [pc, #452]	@ (800205c <makeTcpAck3+0x204>)
 8001e98:	2204      	movs	r2, #4
 8001e9a:	0018      	movs	r0, r3
 8001e9c:	f001 f98f 	bl	80031be <memcpy>
	memcpy(&buffer[1 + IP_SRC_P], device_ip, 4);
 8001ea0:	4b69      	ldr	r3, [pc, #420]	@ (8002048 <makeTcpAck3+0x1f0>)
 8001ea2:	221b      	movs	r2, #27
 8001ea4:	496e      	ldr	r1, [pc, #440]	@ (8002060 <makeTcpAck3+0x208>)
 8001ea6:	189b      	adds	r3, r3, r2
 8001ea8:	2204      	movs	r2, #4
 8001eaa:	0018      	movs	r0, r3
 8001eac:	f001 f987 	bl	80031be <memcpy>

	// TCP source and destination ports
	uint16_t srcPort = (buffer[1 + TCP_SRC_PORT_H_P] << 8)
 8001eb0:	4b65      	ldr	r3, [pc, #404]	@ (8002048 <makeTcpAck3+0x1f0>)
 8001eb2:	2223      	movs	r2, #35	@ 0x23
 8001eb4:	5c9b      	ldrb	r3, [r3, r2]
 8001eb6:	021b      	lsls	r3, r3, #8
			| buffer[1 + TCP_SRC_PORT_L_P];
 8001eb8:	b21a      	sxth	r2, r3
 8001eba:	4b63      	ldr	r3, [pc, #396]	@ (8002048 <makeTcpAck3+0x1f0>)
 8001ebc:	2124      	movs	r1, #36	@ 0x24
 8001ebe:	5c5b      	ldrb	r3, [r3, r1]
 8001ec0:	b21b      	sxth	r3, r3
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	b21a      	sxth	r2, r3
	uint16_t srcPort = (buffer[1 + TCP_SRC_PORT_H_P] << 8)
 8001ec6:	2016      	movs	r0, #22
 8001ec8:	183b      	adds	r3, r7, r0
 8001eca:	801a      	strh	r2, [r3, #0]
	uint16_t dstPort = (buffer[1 + TCP_DST_PORT_H_P] << 8)
 8001ecc:	4b5e      	ldr	r3, [pc, #376]	@ (8002048 <makeTcpAck3+0x1f0>)
 8001ece:	2225      	movs	r2, #37	@ 0x25
 8001ed0:	5c9b      	ldrb	r3, [r3, r2]
 8001ed2:	021b      	lsls	r3, r3, #8
			| buffer[1 + TCP_DST_PORT_L_P];
 8001ed4:	b21a      	sxth	r2, r3
 8001ed6:	4b5c      	ldr	r3, [pc, #368]	@ (8002048 <makeTcpAck3+0x1f0>)
 8001ed8:	2126      	movs	r1, #38	@ 0x26
 8001eda:	5c5b      	ldrb	r3, [r3, r1]
 8001edc:	b21b      	sxth	r3, r3
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	b21a      	sxth	r2, r3
	uint16_t dstPort = (buffer[1 + TCP_DST_PORT_H_P] << 8)
 8001ee2:	2414      	movs	r4, #20
 8001ee4:	193b      	adds	r3, r7, r4
 8001ee6:	801a      	strh	r2, [r3, #0]
	buffer[1 + TCP_SRC_PORT_H_P] = dstPort >> 8;
 8001ee8:	193b      	adds	r3, r7, r4
 8001eea:	881b      	ldrh	r3, [r3, #0]
 8001eec:	0a1b      	lsrs	r3, r3, #8
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	b2d9      	uxtb	r1, r3
 8001ef2:	4b55      	ldr	r3, [pc, #340]	@ (8002048 <makeTcpAck3+0x1f0>)
 8001ef4:	2223      	movs	r2, #35	@ 0x23
 8001ef6:	5499      	strb	r1, [r3, r2]
	buffer[1 + TCP_SRC_PORT_L_P] = dstPort & 0xFF;
 8001ef8:	193b      	adds	r3, r7, r4
 8001efa:	881b      	ldrh	r3, [r3, #0]
 8001efc:	b2d9      	uxtb	r1, r3
 8001efe:	4b52      	ldr	r3, [pc, #328]	@ (8002048 <makeTcpAck3+0x1f0>)
 8001f00:	2224      	movs	r2, #36	@ 0x24
 8001f02:	5499      	strb	r1, [r3, r2]
	buffer[1 + TCP_DST_PORT_H_P] = srcPort >> 8;
 8001f04:	183b      	adds	r3, r7, r0
 8001f06:	881b      	ldrh	r3, [r3, #0]
 8001f08:	0a1b      	lsrs	r3, r3, #8
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	b2d9      	uxtb	r1, r3
 8001f0e:	4b4e      	ldr	r3, [pc, #312]	@ (8002048 <makeTcpAck3+0x1f0>)
 8001f10:	2225      	movs	r2, #37	@ 0x25
 8001f12:	5499      	strb	r1, [r3, r2]
	buffer[1 + TCP_DST_PORT_L_P] = srcPort & 0xFF;
 8001f14:	183b      	adds	r3, r7, r0
 8001f16:	881b      	ldrh	r3, [r3, #0]
 8001f18:	b2d9      	uxtb	r1, r3
 8001f1a:	4b4b      	ldr	r3, [pc, #300]	@ (8002048 <makeTcpAck3+0x1f0>)
 8001f1c:	2226      	movs	r2, #38	@ 0x26
 8001f1e:	5499      	strb	r1, [r3, r2]

	// TCP sequence and acknowledgment numbers
	uint32_t clientSeqNum = (buffer[1 + TCP_SEQ_H_P] << 24)
 8001f20:	4b49      	ldr	r3, [pc, #292]	@ (8002048 <makeTcpAck3+0x1f0>)
 8001f22:	2227      	movs	r2, #39	@ 0x27
 8001f24:	5c9b      	ldrb	r3, [r3, r2]
 8001f26:	061a      	lsls	r2, r3, #24
			| (buffer[1 + TCP_SEQ_H_P + 1] << 16)
 8001f28:	4b47      	ldr	r3, [pc, #284]	@ (8002048 <makeTcpAck3+0x1f0>)
 8001f2a:	2128      	movs	r1, #40	@ 0x28
 8001f2c:	5c5b      	ldrb	r3, [r3, r1]
 8001f2e:	041b      	lsls	r3, r3, #16
 8001f30:	431a      	orrs	r2, r3
			| (buffer[1 + TCP_SEQ_H_P + 2] << 8) | buffer[1 + TCP_SEQ_H_P + 3];
 8001f32:	4b45      	ldr	r3, [pc, #276]	@ (8002048 <makeTcpAck3+0x1f0>)
 8001f34:	2129      	movs	r1, #41	@ 0x29
 8001f36:	5c5b      	ldrb	r3, [r3, r1]
 8001f38:	021b      	lsls	r3, r3, #8
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	4a42      	ldr	r2, [pc, #264]	@ (8002048 <makeTcpAck3+0x1f0>)
 8001f3e:	212a      	movs	r1, #42	@ 0x2a
 8001f40:	5c52      	ldrb	r2, [r2, r1]
 8001f42:	4313      	orrs	r3, r2
	uint32_t clientSeqNum = (buffer[1 + TCP_SEQ_H_P] << 24)
 8001f44:	613b      	str	r3, [r7, #16]
	uint32_t clientAckNum = (buffer[1 + TCP_ACK_H_P] << 24)
 8001f46:	4b40      	ldr	r3, [pc, #256]	@ (8002048 <makeTcpAck3+0x1f0>)
 8001f48:	222b      	movs	r2, #43	@ 0x2b
 8001f4a:	5c9b      	ldrb	r3, [r3, r2]
 8001f4c:	061a      	lsls	r2, r3, #24
			| (buffer[1 + TCP_ACK_H_P + 1] << 16)
 8001f4e:	4b3e      	ldr	r3, [pc, #248]	@ (8002048 <makeTcpAck3+0x1f0>)
 8001f50:	212c      	movs	r1, #44	@ 0x2c
 8001f52:	5c5b      	ldrb	r3, [r3, r1]
 8001f54:	041b      	lsls	r3, r3, #16
 8001f56:	431a      	orrs	r2, r3
			| (buffer[1 + TCP_ACK_H_P + 2] << 8) | buffer[1 + TCP_ACK_H_P + 3];
 8001f58:	4b3b      	ldr	r3, [pc, #236]	@ (8002048 <makeTcpAck3+0x1f0>)
 8001f5a:	212d      	movs	r1, #45	@ 0x2d
 8001f5c:	5c5b      	ldrb	r3, [r3, r1]
 8001f5e:	021b      	lsls	r3, r3, #8
 8001f60:	4313      	orrs	r3, r2
 8001f62:	4a39      	ldr	r2, [pc, #228]	@ (8002048 <makeTcpAck3+0x1f0>)
 8001f64:	212e      	movs	r1, #46	@ 0x2e
 8001f66:	5c52      	ldrb	r2, [r2, r1]
 8001f68:	4313      	orrs	r3, r2
	uint32_t clientAckNum = (buffer[1 + TCP_ACK_H_P] << 24)
 8001f6a:	60fb      	str	r3, [r7, #12]
	uint32_t serverSeqNum = clientAckNum;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	60bb      	str	r3, [r7, #8]
	uint32_t ackNum = clientSeqNum + 1;
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	3301      	adds	r3, #1
 8001f74:	607b      	str	r3, [r7, #4]
	prevSeq = serverSeqNum;
 8001f76:	4b3b      	ldr	r3, [pc, #236]	@ (8002064 <makeTcpAck3+0x20c>)
 8001f78:	68ba      	ldr	r2, [r7, #8]
 8001f7a:	601a      	str	r2, [r3, #0]
	prevAck = ackNum;
 8001f7c:	4b3a      	ldr	r3, [pc, #232]	@ (8002068 <makeTcpAck3+0x210>)
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	601a      	str	r2, [r3, #0]

	// Set sequence and acknowledgment numbers
	buffer[1 + TCP_SEQ_H_P] = (serverSeqNum >> 24) & 0xFF;
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	0e1b      	lsrs	r3, r3, #24
 8001f86:	b2d9      	uxtb	r1, r3
 8001f88:	4b2f      	ldr	r3, [pc, #188]	@ (8002048 <makeTcpAck3+0x1f0>)
 8001f8a:	2227      	movs	r2, #39	@ 0x27
 8001f8c:	5499      	strb	r1, [r3, r2]
	buffer[1 + TCP_SEQ_H_P + 1] = (serverSeqNum >> 16) & 0xFF;
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	0c1b      	lsrs	r3, r3, #16
 8001f92:	b2d9      	uxtb	r1, r3
 8001f94:	4b2c      	ldr	r3, [pc, #176]	@ (8002048 <makeTcpAck3+0x1f0>)
 8001f96:	2228      	movs	r2, #40	@ 0x28
 8001f98:	5499      	strb	r1, [r3, r2]
	buffer[1 + TCP_SEQ_H_P + 2] = (serverSeqNum >> 8) & 0xFF;
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	0a1b      	lsrs	r3, r3, #8
 8001f9e:	b2d9      	uxtb	r1, r3
 8001fa0:	4b29      	ldr	r3, [pc, #164]	@ (8002048 <makeTcpAck3+0x1f0>)
 8001fa2:	2229      	movs	r2, #41	@ 0x29
 8001fa4:	5499      	strb	r1, [r3, r2]
	buffer[1 + TCP_SEQ_H_P + 3] = serverSeqNum & 0xFF;
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	b2d9      	uxtb	r1, r3
 8001faa:	4b27      	ldr	r3, [pc, #156]	@ (8002048 <makeTcpAck3+0x1f0>)
 8001fac:	222a      	movs	r2, #42	@ 0x2a
 8001fae:	5499      	strb	r1, [r3, r2]
	buffer[1 + TCP_ACK_H_P] = (ackNum >> 24) & 0xFF;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	0e1b      	lsrs	r3, r3, #24
 8001fb4:	b2d9      	uxtb	r1, r3
 8001fb6:	4b24      	ldr	r3, [pc, #144]	@ (8002048 <makeTcpAck3+0x1f0>)
 8001fb8:	222b      	movs	r2, #43	@ 0x2b
 8001fba:	5499      	strb	r1, [r3, r2]
	buffer[1 + TCP_ACK_H_P + 1] = (ackNum >> 16) & 0xFF;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	0c1b      	lsrs	r3, r3, #16
 8001fc0:	b2d9      	uxtb	r1, r3
 8001fc2:	4b21      	ldr	r3, [pc, #132]	@ (8002048 <makeTcpAck3+0x1f0>)
 8001fc4:	222c      	movs	r2, #44	@ 0x2c
 8001fc6:	5499      	strb	r1, [r3, r2]
	buffer[1 + TCP_ACK_H_P + 2] = (ackNum >> 8) & 0xFF;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	0a1b      	lsrs	r3, r3, #8
 8001fcc:	b2d9      	uxtb	r1, r3
 8001fce:	4b1e      	ldr	r3, [pc, #120]	@ (8002048 <makeTcpAck3+0x1f0>)
 8001fd0:	222d      	movs	r2, #45	@ 0x2d
 8001fd2:	5499      	strb	r1, [r3, r2]
	buffer[1 + TCP_ACK_H_P + 3] = ackNum & 0xFF;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	b2d9      	uxtb	r1, r3
 8001fd8:	4b1b      	ldr	r3, [pc, #108]	@ (8002048 <makeTcpAck3+0x1f0>)
 8001fda:	222e      	movs	r2, #46	@ 0x2e
 8001fdc:	5499      	strb	r1, [r3, r2]

	// IP total length
	uint16_t totalLength = IP_HEADER_LEN + TCP_HEADER_LEN;
 8001fde:	1cbb      	adds	r3, r7, #2
 8001fe0:	2228      	movs	r2, #40	@ 0x28
 8001fe2:	801a      	strh	r2, [r3, #0]
	buffer[1 + IP_TOTLEN_H_P] = (totalLength >> 8) & 0xFF;
 8001fe4:	1cbb      	adds	r3, r7, #2
 8001fe6:	881b      	ldrh	r3, [r3, #0]
 8001fe8:	0a1b      	lsrs	r3, r3, #8
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	b2da      	uxtb	r2, r3
 8001fee:	4b16      	ldr	r3, [pc, #88]	@ (8002048 <makeTcpAck3+0x1f0>)
 8001ff0:	745a      	strb	r2, [r3, #17]
	buffer[1 + IP_TOTLEN_L_P] = totalLength & 0xFF;
 8001ff2:	1cbb      	adds	r3, r7, #2
 8001ff4:	881b      	ldrh	r3, [r3, #0]
 8001ff6:	b2da      	uxtb	r2, r3
 8001ff8:	4b13      	ldr	r3, [pc, #76]	@ (8002048 <makeTcpAck3+0x1f0>)
 8001ffa:	749a      	strb	r2, [r3, #18]

	// TCP flags, window size, and header length
	buffer[1 + TCP_FLAGS_P] = TCP_FLAG_ACK;  // Only the ACK flag is set
 8001ffc:	4b12      	ldr	r3, [pc, #72]	@ (8002048 <makeTcpAck3+0x1f0>)
 8001ffe:	2230      	movs	r2, #48	@ 0x30
 8002000:	2110      	movs	r1, #16
 8002002:	5499      	strb	r1, [r3, r2]
	buffer[1 + TCP_WIN_SIZE_H_P] = 0xFF; // Maximum window size
 8002004:	4b10      	ldr	r3, [pc, #64]	@ (8002048 <makeTcpAck3+0x1f0>)
 8002006:	2231      	movs	r2, #49	@ 0x31
 8002008:	21ff      	movs	r1, #255	@ 0xff
 800200a:	5499      	strb	r1, [r3, r2]
	buffer[1 + TCP_WIN_SIZE_L_P] = 0xFF;
 800200c:	4b0e      	ldr	r3, [pc, #56]	@ (8002048 <makeTcpAck3+0x1f0>)
 800200e:	2232      	movs	r2, #50	@ 0x32
 8002010:	21ff      	movs	r1, #255	@ 0xff
 8002012:	5499      	strb	r1, [r3, r2]
	buffer[1 + TCP_HEADER_LEN_P] = 0x50; // 20 bytes (5 words)
 8002014:	4b0c      	ldr	r3, [pc, #48]	@ (8002048 <makeTcpAck3+0x1f0>)
 8002016:	222f      	movs	r2, #47	@ 0x2f
 8002018:	2150      	movs	r1, #80	@ 0x50
 800201a:	5499      	strb	r1, [r3, r2]

	// IP and TCP checksums
	calculateIPChecksum(&buffer[1]); // Pass the buffer to calculate the IP checksum
 800201c:	4b0b      	ldr	r3, [pc, #44]	@ (800204c <makeTcpAck3+0x1f4>)
 800201e:	0018      	movs	r0, r3
 8002020:	f7ff fcc0 	bl	80019a4 <calculateIPChecksum>
	calculateTcpChecksum(&buffer[1]); // Pass the buffer to calculate the TCP checksum
 8002024:	4b09      	ldr	r3, [pc, #36]	@ (800204c <makeTcpAck3+0x1f4>)
 8002026:	0018      	movs	r0, r3
 8002028:	f7ff fd1e 	bl	8001a68 <calculateTcpChecksum>

	// Padding to meet minimum Ethernet size
	// Transmit the packet
	transmit_tcp_packet(buffer, 1 + 54);
 800202c:	4b06      	ldr	r3, [pc, #24]	@ (8002048 <makeTcpAck3+0x1f0>)
 800202e:	2137      	movs	r1, #55	@ 0x37
 8002030:	0018      	movs	r0, r3
 8002032:	f7ff fb09 	bl	8001648 <transmit_tcp_packet>

	// Update connection state
	connectionState = ACK_SENT;
 8002036:	4b0d      	ldr	r3, [pc, #52]	@ (800206c <makeTcpAck3+0x214>)
 8002038:	2205      	movs	r2, #5
 800203a:	701a      	strb	r2, [r3, #0]
}
 800203c:	46c0      	nop			@ (mov r8, r8)
 800203e:	46bd      	mov	sp, r7
 8002040:	b007      	add	sp, #28
 8002042:	bd90      	pop	{r4, r7, pc}
 8002044:	080045e8 	.word	0x080045e8
 8002048:	200001ac 	.word	0x200001ac
 800204c:	200001ad 	.word	0x200001ad
 8002050:	200001b3 	.word	0x200001b3
 8002054:	20000000 	.word	0x20000000
 8002058:	200001c7 	.word	0x200001c7
 800205c:	200001cb 	.word	0x200001cb
 8002060:	20000008 	.word	0x20000008
 8002064:	20000788 	.word	0x20000788
 8002068:	2000078c 	.word	0x2000078c
 800206c:	20000791 	.word	0x20000791

08002070 <makeTcpAck2>:

void makeTcpAck2() {
 8002070:	b5b0      	push	{r4, r5, r7, lr}
 8002072:	b088      	sub	sp, #32
 8002074:	af00      	add	r7, sp, #0
	uint16_t totalLength1 = (buffer[16] << 8) | buffer[17]; // Total IP length
 8002076:	4b84      	ldr	r3, [pc, #528]	@ (8002288 <makeTcpAck2+0x218>)
 8002078:	7c1b      	ldrb	r3, [r3, #16]
 800207a:	021b      	lsls	r3, r3, #8
 800207c:	b21a      	sxth	r2, r3
 800207e:	4b82      	ldr	r3, [pc, #520]	@ (8002288 <makeTcpAck2+0x218>)
 8002080:	7c5b      	ldrb	r3, [r3, #17]
 8002082:	b21b      	sxth	r3, r3
 8002084:	4313      	orrs	r3, r2
 8002086:	b21a      	sxth	r2, r3
 8002088:	211e      	movs	r1, #30
 800208a:	187b      	adds	r3, r7, r1
 800208c:	801a      	strh	r2, [r3, #0]
	uint16_t receivedPayloadLength = totalLength1 - 40;
 800208e:	251c      	movs	r5, #28
 8002090:	197b      	adds	r3, r7, r5
 8002092:	187a      	adds	r2, r7, r1
 8002094:	8812      	ldrh	r2, [r2, #0]
 8002096:	3a28      	subs	r2, #40	@ 0x28
 8002098:	801a      	strh	r2, [r3, #0]
	printf("makeTcpAck\n\r");
 800209a:	4b7c      	ldr	r3, [pc, #496]	@ (800228c <makeTcpAck2+0x21c>)
 800209c:	0018      	movs	r0, r3
 800209e:	f000 fd9f 	bl	8002be0 <iprintf>

	// Shift buffer for alignment
	memmove(&buffer[1], &buffer[0], TCP_DATA_START_P);
 80020a2:	4979      	ldr	r1, [pc, #484]	@ (8002288 <makeTcpAck2+0x218>)
 80020a4:	4b7a      	ldr	r3, [pc, #488]	@ (8002290 <makeTcpAck2+0x220>)
 80020a6:	2236      	movs	r2, #54	@ 0x36
 80020a8:	0018      	movs	r0, r3
 80020aa:	f000 ffdf 	bl	800306c <memmove>
	buffer[0] = 0x0E;
 80020ae:	4b76      	ldr	r3, [pc, #472]	@ (8002288 <makeTcpAck2+0x218>)
 80020b0:	220e      	movs	r2, #14
 80020b2:	701a      	strb	r2, [r3, #0]

	// Ethernet MAC addresses
	memcpy(&buffer[1 + ETH_DST_MAC], &buffer[1 + ETH_SRC_MAC], 6);
 80020b4:	4977      	ldr	r1, [pc, #476]	@ (8002294 <makeTcpAck2+0x224>)
 80020b6:	4b76      	ldr	r3, [pc, #472]	@ (8002290 <makeTcpAck2+0x220>)
 80020b8:	2206      	movs	r2, #6
 80020ba:	0018      	movs	r0, r3
 80020bc:	f001 f87f 	bl	80031be <memcpy>
	memcpy(&buffer[1 + ETH_SRC_MAC], device_mac, 6);
 80020c0:	4b71      	ldr	r3, [pc, #452]	@ (8002288 <makeTcpAck2+0x218>)
 80020c2:	2207      	movs	r2, #7
 80020c4:	4974      	ldr	r1, [pc, #464]	@ (8002298 <makeTcpAck2+0x228>)
 80020c6:	189b      	adds	r3, r3, r2
 80020c8:	2206      	movs	r2, #6
 80020ca:	0018      	movs	r0, r3
 80020cc:	f001 f877 	bl	80031be <memcpy>

	// IP source and destination addresses
	memcpy(&buffer[1 + IP_DST_P], &buffer[1 + IP_SRC_P], 4);
 80020d0:	4972      	ldr	r1, [pc, #456]	@ (800229c <makeTcpAck2+0x22c>)
 80020d2:	4b73      	ldr	r3, [pc, #460]	@ (80022a0 <makeTcpAck2+0x230>)
 80020d4:	2204      	movs	r2, #4
 80020d6:	0018      	movs	r0, r3
 80020d8:	f001 f871 	bl	80031be <memcpy>
	memcpy(&buffer[1 + IP_SRC_P], device_ip, 4);
 80020dc:	4b6a      	ldr	r3, [pc, #424]	@ (8002288 <makeTcpAck2+0x218>)
 80020de:	221b      	movs	r2, #27
 80020e0:	4970      	ldr	r1, [pc, #448]	@ (80022a4 <makeTcpAck2+0x234>)
 80020e2:	189b      	adds	r3, r3, r2
 80020e4:	2204      	movs	r2, #4
 80020e6:	0018      	movs	r0, r3
 80020e8:	f001 f869 	bl	80031be <memcpy>

	// TCP source and destination ports
	uint16_t srcPort = (buffer[1 + TCP_SRC_PORT_H_P] << 8)
 80020ec:	4b66      	ldr	r3, [pc, #408]	@ (8002288 <makeTcpAck2+0x218>)
 80020ee:	2223      	movs	r2, #35	@ 0x23
 80020f0:	5c9b      	ldrb	r3, [r3, r2]
 80020f2:	021b      	lsls	r3, r3, #8
			| buffer[1 + TCP_SRC_PORT_L_P];
 80020f4:	b21a      	sxth	r2, r3
 80020f6:	4b64      	ldr	r3, [pc, #400]	@ (8002288 <makeTcpAck2+0x218>)
 80020f8:	2124      	movs	r1, #36	@ 0x24
 80020fa:	5c5b      	ldrb	r3, [r3, r1]
 80020fc:	b21b      	sxth	r3, r3
 80020fe:	4313      	orrs	r3, r2
 8002100:	b21a      	sxth	r2, r3
	uint16_t srcPort = (buffer[1 + TCP_SRC_PORT_H_P] << 8)
 8002102:	201a      	movs	r0, #26
 8002104:	183b      	adds	r3, r7, r0
 8002106:	801a      	strh	r2, [r3, #0]
	uint16_t dstPort = (buffer[1 + TCP_DST_PORT_H_P] << 8)
 8002108:	4b5f      	ldr	r3, [pc, #380]	@ (8002288 <makeTcpAck2+0x218>)
 800210a:	2225      	movs	r2, #37	@ 0x25
 800210c:	5c9b      	ldrb	r3, [r3, r2]
 800210e:	021b      	lsls	r3, r3, #8
			| buffer[1 + TCP_DST_PORT_L_P];
 8002110:	b21a      	sxth	r2, r3
 8002112:	4b5d      	ldr	r3, [pc, #372]	@ (8002288 <makeTcpAck2+0x218>)
 8002114:	2126      	movs	r1, #38	@ 0x26
 8002116:	5c5b      	ldrb	r3, [r3, r1]
 8002118:	b21b      	sxth	r3, r3
 800211a:	4313      	orrs	r3, r2
 800211c:	b21a      	sxth	r2, r3
	uint16_t dstPort = (buffer[1 + TCP_DST_PORT_H_P] << 8)
 800211e:	2418      	movs	r4, #24
 8002120:	193b      	adds	r3, r7, r4
 8002122:	801a      	strh	r2, [r3, #0]
	buffer[1 + TCP_SRC_PORT_H_P] = dstPort >> 8;
 8002124:	193b      	adds	r3, r7, r4
 8002126:	881b      	ldrh	r3, [r3, #0]
 8002128:	0a1b      	lsrs	r3, r3, #8
 800212a:	b29b      	uxth	r3, r3
 800212c:	b2d9      	uxtb	r1, r3
 800212e:	4b56      	ldr	r3, [pc, #344]	@ (8002288 <makeTcpAck2+0x218>)
 8002130:	2223      	movs	r2, #35	@ 0x23
 8002132:	5499      	strb	r1, [r3, r2]
	buffer[1 + TCP_SRC_PORT_L_P] = dstPort & 0xFF;
 8002134:	193b      	adds	r3, r7, r4
 8002136:	881b      	ldrh	r3, [r3, #0]
 8002138:	b2d9      	uxtb	r1, r3
 800213a:	4b53      	ldr	r3, [pc, #332]	@ (8002288 <makeTcpAck2+0x218>)
 800213c:	2224      	movs	r2, #36	@ 0x24
 800213e:	5499      	strb	r1, [r3, r2]
	buffer[1 + TCP_DST_PORT_H_P] = srcPort >> 8;
 8002140:	183b      	adds	r3, r7, r0
 8002142:	881b      	ldrh	r3, [r3, #0]
 8002144:	0a1b      	lsrs	r3, r3, #8
 8002146:	b29b      	uxth	r3, r3
 8002148:	b2d9      	uxtb	r1, r3
 800214a:	4b4f      	ldr	r3, [pc, #316]	@ (8002288 <makeTcpAck2+0x218>)
 800214c:	2225      	movs	r2, #37	@ 0x25
 800214e:	5499      	strb	r1, [r3, r2]
	buffer[1 + TCP_DST_PORT_L_P] = srcPort & 0xFF;
 8002150:	183b      	adds	r3, r7, r0
 8002152:	881b      	ldrh	r3, [r3, #0]
 8002154:	b2d9      	uxtb	r1, r3
 8002156:	4b4c      	ldr	r3, [pc, #304]	@ (8002288 <makeTcpAck2+0x218>)
 8002158:	2226      	movs	r2, #38	@ 0x26
 800215a:	5499      	strb	r1, [r3, r2]

	// TCP sequence and acknowledgment numbers
	uint32_t clientSeqNum = (buffer[1 + TCP_SEQ_H_P] << 24)
 800215c:	4b4a      	ldr	r3, [pc, #296]	@ (8002288 <makeTcpAck2+0x218>)
 800215e:	2227      	movs	r2, #39	@ 0x27
 8002160:	5c9b      	ldrb	r3, [r3, r2]
 8002162:	061a      	lsls	r2, r3, #24
			| (buffer[1 + TCP_SEQ_H_P + 1] << 16)
 8002164:	4b48      	ldr	r3, [pc, #288]	@ (8002288 <makeTcpAck2+0x218>)
 8002166:	2128      	movs	r1, #40	@ 0x28
 8002168:	5c5b      	ldrb	r3, [r3, r1]
 800216a:	041b      	lsls	r3, r3, #16
 800216c:	431a      	orrs	r2, r3
			| (buffer[1 + TCP_SEQ_H_P + 2] << 8) | buffer[1 + TCP_SEQ_H_P + 3];
 800216e:	4b46      	ldr	r3, [pc, #280]	@ (8002288 <makeTcpAck2+0x218>)
 8002170:	2129      	movs	r1, #41	@ 0x29
 8002172:	5c5b      	ldrb	r3, [r3, r1]
 8002174:	021b      	lsls	r3, r3, #8
 8002176:	4313      	orrs	r3, r2
 8002178:	4a43      	ldr	r2, [pc, #268]	@ (8002288 <makeTcpAck2+0x218>)
 800217a:	212a      	movs	r1, #42	@ 0x2a
 800217c:	5c52      	ldrb	r2, [r2, r1]
 800217e:	4313      	orrs	r3, r2
	uint32_t clientSeqNum = (buffer[1 + TCP_SEQ_H_P] << 24)
 8002180:	617b      	str	r3, [r7, #20]
	uint32_t clientAckNum = (buffer[1 + TCP_ACK_H_P] << 24)
 8002182:	4b41      	ldr	r3, [pc, #260]	@ (8002288 <makeTcpAck2+0x218>)
 8002184:	222b      	movs	r2, #43	@ 0x2b
 8002186:	5c9b      	ldrb	r3, [r3, r2]
 8002188:	061a      	lsls	r2, r3, #24
			| (buffer[1 + TCP_ACK_H_P + 1] << 16)
 800218a:	4b3f      	ldr	r3, [pc, #252]	@ (8002288 <makeTcpAck2+0x218>)
 800218c:	212c      	movs	r1, #44	@ 0x2c
 800218e:	5c5b      	ldrb	r3, [r3, r1]
 8002190:	041b      	lsls	r3, r3, #16
 8002192:	431a      	orrs	r2, r3
			| (buffer[1 + TCP_ACK_H_P + 2] << 8) | buffer[1 + TCP_ACK_H_P + 3];
 8002194:	4b3c      	ldr	r3, [pc, #240]	@ (8002288 <makeTcpAck2+0x218>)
 8002196:	212d      	movs	r1, #45	@ 0x2d
 8002198:	5c5b      	ldrb	r3, [r3, r1]
 800219a:	021b      	lsls	r3, r3, #8
 800219c:	4313      	orrs	r3, r2
 800219e:	4a3a      	ldr	r2, [pc, #232]	@ (8002288 <makeTcpAck2+0x218>)
 80021a0:	212e      	movs	r1, #46	@ 0x2e
 80021a2:	5c52      	ldrb	r2, [r2, r1]
 80021a4:	4313      	orrs	r3, r2
	uint32_t clientAckNum = (buffer[1 + TCP_ACK_H_P] << 24)
 80021a6:	613b      	str	r3, [r7, #16]
	uint32_t serverSeqNum = clientAckNum;
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	60fb      	str	r3, [r7, #12]
	uint32_t ackNum = clientSeqNum + receivedPayloadLength - 1;
 80021ac:	197b      	adds	r3, r7, r5
 80021ae:	881a      	ldrh	r2, [r3, #0]
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	18d3      	adds	r3, r2, r3
 80021b4:	3b01      	subs	r3, #1
 80021b6:	60bb      	str	r3, [r7, #8]
	prevSeq = serverSeqNum;
 80021b8:	4b3b      	ldr	r3, [pc, #236]	@ (80022a8 <makeTcpAck2+0x238>)
 80021ba:	68fa      	ldr	r2, [r7, #12]
 80021bc:	601a      	str	r2, [r3, #0]
	prevAck = ackNum;
 80021be:	4b3b      	ldr	r3, [pc, #236]	@ (80022ac <makeTcpAck2+0x23c>)
 80021c0:	68ba      	ldr	r2, [r7, #8]
 80021c2:	601a      	str	r2, [r3, #0]

	// Set sequence and acknowledgment numbers
	buffer[1 + TCP_SEQ_H_P] = (serverSeqNum >> 24) & 0xFF;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	0e1b      	lsrs	r3, r3, #24
 80021c8:	b2d9      	uxtb	r1, r3
 80021ca:	4b2f      	ldr	r3, [pc, #188]	@ (8002288 <makeTcpAck2+0x218>)
 80021cc:	2227      	movs	r2, #39	@ 0x27
 80021ce:	5499      	strb	r1, [r3, r2]
	buffer[1 + TCP_SEQ_H_P + 1] = (serverSeqNum >> 16) & 0xFF;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	0c1b      	lsrs	r3, r3, #16
 80021d4:	b2d9      	uxtb	r1, r3
 80021d6:	4b2c      	ldr	r3, [pc, #176]	@ (8002288 <makeTcpAck2+0x218>)
 80021d8:	2228      	movs	r2, #40	@ 0x28
 80021da:	5499      	strb	r1, [r3, r2]
	buffer[1 + TCP_SEQ_H_P + 2] = (serverSeqNum >> 8) & 0xFF;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	0a1b      	lsrs	r3, r3, #8
 80021e0:	b2d9      	uxtb	r1, r3
 80021e2:	4b29      	ldr	r3, [pc, #164]	@ (8002288 <makeTcpAck2+0x218>)
 80021e4:	2229      	movs	r2, #41	@ 0x29
 80021e6:	5499      	strb	r1, [r3, r2]
	buffer[1 + TCP_SEQ_H_P + 3] = serverSeqNum & 0xFF;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	b2d9      	uxtb	r1, r3
 80021ec:	4b26      	ldr	r3, [pc, #152]	@ (8002288 <makeTcpAck2+0x218>)
 80021ee:	222a      	movs	r2, #42	@ 0x2a
 80021f0:	5499      	strb	r1, [r3, r2]
	buffer[1 + TCP_ACK_H_P] = (ackNum >> 24) & 0xFF;
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	0e1b      	lsrs	r3, r3, #24
 80021f6:	b2d9      	uxtb	r1, r3
 80021f8:	4b23      	ldr	r3, [pc, #140]	@ (8002288 <makeTcpAck2+0x218>)
 80021fa:	222b      	movs	r2, #43	@ 0x2b
 80021fc:	5499      	strb	r1, [r3, r2]
	buffer[1 + TCP_ACK_H_P + 1] = (ackNum >> 16) & 0xFF;
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	0c1b      	lsrs	r3, r3, #16
 8002202:	b2d9      	uxtb	r1, r3
 8002204:	4b20      	ldr	r3, [pc, #128]	@ (8002288 <makeTcpAck2+0x218>)
 8002206:	222c      	movs	r2, #44	@ 0x2c
 8002208:	5499      	strb	r1, [r3, r2]
	buffer[1 + TCP_ACK_H_P + 2] = (ackNum >> 8) & 0xFF;
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	0a1b      	lsrs	r3, r3, #8
 800220e:	b2d9      	uxtb	r1, r3
 8002210:	4b1d      	ldr	r3, [pc, #116]	@ (8002288 <makeTcpAck2+0x218>)
 8002212:	222d      	movs	r2, #45	@ 0x2d
 8002214:	5499      	strb	r1, [r3, r2]
	buffer[1 + TCP_ACK_H_P + 3] = ackNum & 0xFF;
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	b2d9      	uxtb	r1, r3
 800221a:	4b1b      	ldr	r3, [pc, #108]	@ (8002288 <makeTcpAck2+0x218>)
 800221c:	222e      	movs	r2, #46	@ 0x2e
 800221e:	5499      	strb	r1, [r3, r2]

	// IP total length
	uint16_t totalLength = IP_HEADER_LEN + TCP_HEADER_LEN;
 8002220:	1dbb      	adds	r3, r7, #6
 8002222:	2228      	movs	r2, #40	@ 0x28
 8002224:	801a      	strh	r2, [r3, #0]
	buffer[1 + IP_TOTLEN_H_P] = (totalLength >> 8) & 0xFF;
 8002226:	1dbb      	adds	r3, r7, #6
 8002228:	881b      	ldrh	r3, [r3, #0]
 800222a:	0a1b      	lsrs	r3, r3, #8
 800222c:	b29b      	uxth	r3, r3
 800222e:	b2da      	uxtb	r2, r3
 8002230:	4b15      	ldr	r3, [pc, #84]	@ (8002288 <makeTcpAck2+0x218>)
 8002232:	745a      	strb	r2, [r3, #17]
	buffer[1 + IP_TOTLEN_L_P] = totalLength & 0xFF;
 8002234:	1dbb      	adds	r3, r7, #6
 8002236:	881b      	ldrh	r3, [r3, #0]
 8002238:	b2da      	uxtb	r2, r3
 800223a:	4b13      	ldr	r3, [pc, #76]	@ (8002288 <makeTcpAck2+0x218>)
 800223c:	749a      	strb	r2, [r3, #18]

	// TCP flags, window size, and header length
	buffer[1 + TCP_FLAGS_P] = TCP_FLAG_ACK;  // Only the ACK flag is set
 800223e:	4b12      	ldr	r3, [pc, #72]	@ (8002288 <makeTcpAck2+0x218>)
 8002240:	2230      	movs	r2, #48	@ 0x30
 8002242:	2110      	movs	r1, #16
 8002244:	5499      	strb	r1, [r3, r2]
	buffer[1 + TCP_WIN_SIZE_H_P] = 0xFF; // Maximum window size
 8002246:	4b10      	ldr	r3, [pc, #64]	@ (8002288 <makeTcpAck2+0x218>)
 8002248:	2231      	movs	r2, #49	@ 0x31
 800224a:	21ff      	movs	r1, #255	@ 0xff
 800224c:	5499      	strb	r1, [r3, r2]
	buffer[1 + TCP_WIN_SIZE_L_P] = 0xFF;
 800224e:	4b0e      	ldr	r3, [pc, #56]	@ (8002288 <makeTcpAck2+0x218>)
 8002250:	2232      	movs	r2, #50	@ 0x32
 8002252:	21ff      	movs	r1, #255	@ 0xff
 8002254:	5499      	strb	r1, [r3, r2]
	buffer[1 + TCP_HEADER_LEN_P] = 0x50; // 20 bytes (5 words)
 8002256:	4b0c      	ldr	r3, [pc, #48]	@ (8002288 <makeTcpAck2+0x218>)
 8002258:	222f      	movs	r2, #47	@ 0x2f
 800225a:	2150      	movs	r1, #80	@ 0x50
 800225c:	5499      	strb	r1, [r3, r2]

	// IP and TCP checksums
	calculateIPChecksum(&buffer[1]); // Pass the buffer to calculate the IP checksum
 800225e:	4b0c      	ldr	r3, [pc, #48]	@ (8002290 <makeTcpAck2+0x220>)
 8002260:	0018      	movs	r0, r3
 8002262:	f7ff fb9f 	bl	80019a4 <calculateIPChecksum>
	calculateTcpChecksum(&buffer[1]); // Pass the buffer to calculate the TCP checksum
 8002266:	4b0a      	ldr	r3, [pc, #40]	@ (8002290 <makeTcpAck2+0x220>)
 8002268:	0018      	movs	r0, r3
 800226a:	f7ff fbfd 	bl	8001a68 <calculateTcpChecksum>

	// Padding to meet minimum Ethernet size
	// Transmit the packet
	transmit_tcp_packet(buffer, 1 + 54);
 800226e:	4b06      	ldr	r3, [pc, #24]	@ (8002288 <makeTcpAck2+0x218>)
 8002270:	2137      	movs	r1, #55	@ 0x37
 8002272:	0018      	movs	r0, r3
 8002274:	f7ff f9e8 	bl	8001648 <transmit_tcp_packet>

	// Update connection state
	connectionState = ACK_SENT;
 8002278:	4b0d      	ldr	r3, [pc, #52]	@ (80022b0 <makeTcpAck2+0x240>)
 800227a:	2205      	movs	r2, #5
 800227c:	701a      	strb	r2, [r3, #0]
}
 800227e:	46c0      	nop			@ (mov r8, r8)
 8002280:	46bd      	mov	sp, r7
 8002282:	b008      	add	sp, #32
 8002284:	bdb0      	pop	{r4, r5, r7, pc}
 8002286:	46c0      	nop			@ (mov r8, r8)
 8002288:	200001ac 	.word	0x200001ac
 800228c:	080045e8 	.word	0x080045e8
 8002290:	200001ad 	.word	0x200001ad
 8002294:	200001b3 	.word	0x200001b3
 8002298:	20000000 	.word	0x20000000
 800229c:	200001c7 	.word	0x200001c7
 80022a0:	200001cb 	.word	0x200001cb
 80022a4:	20000008 	.word	0x20000008
 80022a8:	20000788 	.word	0x20000788
 80022ac:	2000078c 	.word	0x2000078c
 80022b0:	20000791 	.word	0x20000791

080022b4 <makeTcpSynAck>:

void makeTcpSynAck() {
 80022b4:	b590      	push	{r4, r7, lr}
 80022b6:	b087      	sub	sp, #28
 80022b8:	af00      	add	r7, sp, #0
	printf("makeTcpSynAck\n\r");
 80022ba:	4b6d      	ldr	r3, [pc, #436]	@ (8002470 <makeTcpSynAck+0x1bc>)
 80022bc:	0018      	movs	r0, r3
 80022be:	f000 fc8f 	bl	8002be0 <iprintf>

	// Shift buffer for alignment
	memmove(&buffer[1], &buffer[0], TCP_DATA_START_P);
 80022c2:	496c      	ldr	r1, [pc, #432]	@ (8002474 <makeTcpSynAck+0x1c0>)
 80022c4:	4b6c      	ldr	r3, [pc, #432]	@ (8002478 <makeTcpSynAck+0x1c4>)
 80022c6:	2236      	movs	r2, #54	@ 0x36
 80022c8:	0018      	movs	r0, r3
 80022ca:	f000 fecf 	bl	800306c <memmove>
	buffer[0] = 0x0E;
 80022ce:	4b69      	ldr	r3, [pc, #420]	@ (8002474 <makeTcpSynAck+0x1c0>)
 80022d0:	220e      	movs	r2, #14
 80022d2:	701a      	strb	r2, [r3, #0]
	// Ethernet MAC addresses
	memcpy(&buffer[1 + ETH_DST_MAC], &buffer[1 + ETH_SRC_MAC], 6);
 80022d4:	4969      	ldr	r1, [pc, #420]	@ (800247c <makeTcpSynAck+0x1c8>)
 80022d6:	4b68      	ldr	r3, [pc, #416]	@ (8002478 <makeTcpSynAck+0x1c4>)
 80022d8:	2206      	movs	r2, #6
 80022da:	0018      	movs	r0, r3
 80022dc:	f000 ff6f 	bl	80031be <memcpy>
	memcpy(&buffer[1 + ETH_SRC_MAC], device_mac, 6);
 80022e0:	4b64      	ldr	r3, [pc, #400]	@ (8002474 <makeTcpSynAck+0x1c0>)
 80022e2:	2207      	movs	r2, #7
 80022e4:	4966      	ldr	r1, [pc, #408]	@ (8002480 <makeTcpSynAck+0x1cc>)
 80022e6:	189b      	adds	r3, r3, r2
 80022e8:	2206      	movs	r2, #6
 80022ea:	0018      	movs	r0, r3
 80022ec:	f000 ff67 	bl	80031be <memcpy>

	// IP source and destination addresses
	memcpy(&buffer[1 + IP_DST_P], &buffer[1 + IP_SRC_P], 4);
 80022f0:	4964      	ldr	r1, [pc, #400]	@ (8002484 <makeTcpSynAck+0x1d0>)
 80022f2:	4b65      	ldr	r3, [pc, #404]	@ (8002488 <makeTcpSynAck+0x1d4>)
 80022f4:	2204      	movs	r2, #4
 80022f6:	0018      	movs	r0, r3
 80022f8:	f000 ff61 	bl	80031be <memcpy>
	memcpy(&buffer[1 + IP_SRC_P], device_ip, 4);
 80022fc:	4b5d      	ldr	r3, [pc, #372]	@ (8002474 <makeTcpSynAck+0x1c0>)
 80022fe:	221b      	movs	r2, #27
 8002300:	4962      	ldr	r1, [pc, #392]	@ (800248c <makeTcpSynAck+0x1d8>)
 8002302:	189b      	adds	r3, r3, r2
 8002304:	2204      	movs	r2, #4
 8002306:	0018      	movs	r0, r3
 8002308:	f000 ff59 	bl	80031be <memcpy>

	// TCP source and destination ports
	uint16_t srcPort = (buffer[1 + TCP_SRC_PORT_H_P] << 8)
 800230c:	4b59      	ldr	r3, [pc, #356]	@ (8002474 <makeTcpSynAck+0x1c0>)
 800230e:	2223      	movs	r2, #35	@ 0x23
 8002310:	5c9b      	ldrb	r3, [r3, r2]
 8002312:	021b      	lsls	r3, r3, #8
			| buffer[1 + TCP_SRC_PORT_L_P];
 8002314:	b21a      	sxth	r2, r3
 8002316:	4b57      	ldr	r3, [pc, #348]	@ (8002474 <makeTcpSynAck+0x1c0>)
 8002318:	2124      	movs	r1, #36	@ 0x24
 800231a:	5c5b      	ldrb	r3, [r3, r1]
 800231c:	b21b      	sxth	r3, r3
 800231e:	4313      	orrs	r3, r2
 8002320:	b21a      	sxth	r2, r3
	uint16_t srcPort = (buffer[1 + TCP_SRC_PORT_H_P] << 8)
 8002322:	2016      	movs	r0, #22
 8002324:	183b      	adds	r3, r7, r0
 8002326:	801a      	strh	r2, [r3, #0]
	uint16_t dstPort = (buffer[1 + TCP_DST_PORT_H_P] << 8)
 8002328:	4b52      	ldr	r3, [pc, #328]	@ (8002474 <makeTcpSynAck+0x1c0>)
 800232a:	2225      	movs	r2, #37	@ 0x25
 800232c:	5c9b      	ldrb	r3, [r3, r2]
 800232e:	021b      	lsls	r3, r3, #8
			| buffer[1 + TCP_DST_PORT_L_P];
 8002330:	b21a      	sxth	r2, r3
 8002332:	4b50      	ldr	r3, [pc, #320]	@ (8002474 <makeTcpSynAck+0x1c0>)
 8002334:	2126      	movs	r1, #38	@ 0x26
 8002336:	5c5b      	ldrb	r3, [r3, r1]
 8002338:	b21b      	sxth	r3, r3
 800233a:	4313      	orrs	r3, r2
 800233c:	b21a      	sxth	r2, r3
	uint16_t dstPort = (buffer[1 + TCP_DST_PORT_H_P] << 8)
 800233e:	2414      	movs	r4, #20
 8002340:	193b      	adds	r3, r7, r4
 8002342:	801a      	strh	r2, [r3, #0]
	buffer[1 + TCP_SRC_PORT_H_P] = dstPort >> 8;
 8002344:	193b      	adds	r3, r7, r4
 8002346:	881b      	ldrh	r3, [r3, #0]
 8002348:	0a1b      	lsrs	r3, r3, #8
 800234a:	b29b      	uxth	r3, r3
 800234c:	b2d9      	uxtb	r1, r3
 800234e:	4b49      	ldr	r3, [pc, #292]	@ (8002474 <makeTcpSynAck+0x1c0>)
 8002350:	2223      	movs	r2, #35	@ 0x23
 8002352:	5499      	strb	r1, [r3, r2]
	buffer[1 + TCP_SRC_PORT_L_P] = dstPort & 0xFF;
 8002354:	193b      	adds	r3, r7, r4
 8002356:	881b      	ldrh	r3, [r3, #0]
 8002358:	b2d9      	uxtb	r1, r3
 800235a:	4b46      	ldr	r3, [pc, #280]	@ (8002474 <makeTcpSynAck+0x1c0>)
 800235c:	2224      	movs	r2, #36	@ 0x24
 800235e:	5499      	strb	r1, [r3, r2]
	buffer[1 + TCP_DST_PORT_H_P] = srcPort >> 8;
 8002360:	183b      	adds	r3, r7, r0
 8002362:	881b      	ldrh	r3, [r3, #0]
 8002364:	0a1b      	lsrs	r3, r3, #8
 8002366:	b29b      	uxth	r3, r3
 8002368:	b2d9      	uxtb	r1, r3
 800236a:	4b42      	ldr	r3, [pc, #264]	@ (8002474 <makeTcpSynAck+0x1c0>)
 800236c:	2225      	movs	r2, #37	@ 0x25
 800236e:	5499      	strb	r1, [r3, r2]
	buffer[1 + TCP_DST_PORT_L_P] = srcPort & 0xFF;
 8002370:	183b      	adds	r3, r7, r0
 8002372:	881b      	ldrh	r3, [r3, #0]
 8002374:	b2d9      	uxtb	r1, r3
 8002376:	4b3f      	ldr	r3, [pc, #252]	@ (8002474 <makeTcpSynAck+0x1c0>)
 8002378:	2226      	movs	r2, #38	@ 0x26
 800237a:	5499      	strb	r1, [r3, r2]

	// TCP sequence and acknowledgment numbers
	uint32_t clientSeqNum = (buffer[1 + TCP_SEQ_H_P] << 24)
 800237c:	4b3d      	ldr	r3, [pc, #244]	@ (8002474 <makeTcpSynAck+0x1c0>)
 800237e:	2227      	movs	r2, #39	@ 0x27
 8002380:	5c9b      	ldrb	r3, [r3, r2]
 8002382:	061a      	lsls	r2, r3, #24
			| (buffer[1 + TCP_SEQ_H_P + 1] << 16)
 8002384:	4b3b      	ldr	r3, [pc, #236]	@ (8002474 <makeTcpSynAck+0x1c0>)
 8002386:	2128      	movs	r1, #40	@ 0x28
 8002388:	5c5b      	ldrb	r3, [r3, r1]
 800238a:	041b      	lsls	r3, r3, #16
 800238c:	431a      	orrs	r2, r3
			| (buffer[1 + TCP_SEQ_H_P + 2] << 8) | buffer[1 + TCP_SEQ_H_P + 3];
 800238e:	4b39      	ldr	r3, [pc, #228]	@ (8002474 <makeTcpSynAck+0x1c0>)
 8002390:	2129      	movs	r1, #41	@ 0x29
 8002392:	5c5b      	ldrb	r3, [r3, r1]
 8002394:	021b      	lsls	r3, r3, #8
 8002396:	4313      	orrs	r3, r2
 8002398:	4a36      	ldr	r2, [pc, #216]	@ (8002474 <makeTcpSynAck+0x1c0>)
 800239a:	212a      	movs	r1, #42	@ 0x2a
 800239c:	5c52      	ldrb	r2, [r2, r1]
 800239e:	4313      	orrs	r3, r2
	uint32_t clientSeqNum = (buffer[1 + TCP_SEQ_H_P] << 24)
 80023a0:	613b      	str	r3, [r7, #16]
	uint32_t serverSeqNum = 1000;
 80023a2:	23fa      	movs	r3, #250	@ 0xfa
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	60fb      	str	r3, [r7, #12]
	uint32_t ackNum = clientSeqNum + 1;
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	3301      	adds	r3, #1
 80023ac:	60bb      	str	r3, [r7, #8]

	buffer[1 + TCP_SEQ_H_P] = (serverSeqNum >> 24) & 0xFF;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	0e1b      	lsrs	r3, r3, #24
 80023b2:	b2d9      	uxtb	r1, r3
 80023b4:	4b2f      	ldr	r3, [pc, #188]	@ (8002474 <makeTcpSynAck+0x1c0>)
 80023b6:	2227      	movs	r2, #39	@ 0x27
 80023b8:	5499      	strb	r1, [r3, r2]
	buffer[1 + TCP_SEQ_H_P + 1] = (serverSeqNum >> 16) & 0xFF;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	0c1b      	lsrs	r3, r3, #16
 80023be:	b2d9      	uxtb	r1, r3
 80023c0:	4b2c      	ldr	r3, [pc, #176]	@ (8002474 <makeTcpSynAck+0x1c0>)
 80023c2:	2228      	movs	r2, #40	@ 0x28
 80023c4:	5499      	strb	r1, [r3, r2]
	buffer[1 + TCP_SEQ_H_P + 2] = (serverSeqNum >> 8) & 0xFF;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	0a1b      	lsrs	r3, r3, #8
 80023ca:	b2d9      	uxtb	r1, r3
 80023cc:	4b29      	ldr	r3, [pc, #164]	@ (8002474 <makeTcpSynAck+0x1c0>)
 80023ce:	2229      	movs	r2, #41	@ 0x29
 80023d0:	5499      	strb	r1, [r3, r2]
	buffer[1 + TCP_SEQ_H_P + 3] = serverSeqNum & 0xFF;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	b2d9      	uxtb	r1, r3
 80023d6:	4b27      	ldr	r3, [pc, #156]	@ (8002474 <makeTcpSynAck+0x1c0>)
 80023d8:	222a      	movs	r2, #42	@ 0x2a
 80023da:	5499      	strb	r1, [r3, r2]
	buffer[1 + TCP_SEQ_H_P + 4] = (ackNum >> 24) & 0xFF;
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	0e1b      	lsrs	r3, r3, #24
 80023e0:	b2d9      	uxtb	r1, r3
 80023e2:	4b24      	ldr	r3, [pc, #144]	@ (8002474 <makeTcpSynAck+0x1c0>)
 80023e4:	222b      	movs	r2, #43	@ 0x2b
 80023e6:	5499      	strb	r1, [r3, r2]
	buffer[1 + TCP_SEQ_H_P + 5] = (ackNum >> 16) & 0xFF;
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	0c1b      	lsrs	r3, r3, #16
 80023ec:	b2d9      	uxtb	r1, r3
 80023ee:	4b21      	ldr	r3, [pc, #132]	@ (8002474 <makeTcpSynAck+0x1c0>)
 80023f0:	222c      	movs	r2, #44	@ 0x2c
 80023f2:	5499      	strb	r1, [r3, r2]
	buffer[1 + TCP_SEQ_H_P + 6] = (ackNum >> 8) & 0xFF;
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	0a1b      	lsrs	r3, r3, #8
 80023f8:	b2d9      	uxtb	r1, r3
 80023fa:	4b1e      	ldr	r3, [pc, #120]	@ (8002474 <makeTcpSynAck+0x1c0>)
 80023fc:	222d      	movs	r2, #45	@ 0x2d
 80023fe:	5499      	strb	r1, [r3, r2]
	buffer[1 + TCP_SEQ_H_P + 7] = ackNum & 0xFF;
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	b2d9      	uxtb	r1, r3
 8002404:	4b1b      	ldr	r3, [pc, #108]	@ (8002474 <makeTcpSynAck+0x1c0>)
 8002406:	222e      	movs	r2, #46	@ 0x2e
 8002408:	5499      	strb	r1, [r3, r2]

	// IP total length
	uint16_t totalLength = IP_HEADER_LEN + TCP_HEADER_LEN;
 800240a:	1dbb      	adds	r3, r7, #6
 800240c:	2228      	movs	r2, #40	@ 0x28
 800240e:	801a      	strh	r2, [r3, #0]
	buffer[1 + IP_TOTLEN_H_P] = (totalLength >> 8) & 0xFF;
 8002410:	1dbb      	adds	r3, r7, #6
 8002412:	881b      	ldrh	r3, [r3, #0]
 8002414:	0a1b      	lsrs	r3, r3, #8
 8002416:	b29b      	uxth	r3, r3
 8002418:	b2da      	uxtb	r2, r3
 800241a:	4b16      	ldr	r3, [pc, #88]	@ (8002474 <makeTcpSynAck+0x1c0>)
 800241c:	745a      	strb	r2, [r3, #17]
	buffer[1 + IP_TOTLEN_L_P] = totalLength & 0xFF;
 800241e:	1dbb      	adds	r3, r7, #6
 8002420:	881b      	ldrh	r3, [r3, #0]
 8002422:	b2da      	uxtb	r2, r3
 8002424:	4b13      	ldr	r3, [pc, #76]	@ (8002474 <makeTcpSynAck+0x1c0>)
 8002426:	749a      	strb	r2, [r3, #18]

	// TCP flags, window size, and header length
	buffer[1 + TCP_FLAGS_P] = TCP_FLAG_SYN | TCP_FLAG_ACK;
 8002428:	4b12      	ldr	r3, [pc, #72]	@ (8002474 <makeTcpSynAck+0x1c0>)
 800242a:	2230      	movs	r2, #48	@ 0x30
 800242c:	2112      	movs	r1, #18
 800242e:	5499      	strb	r1, [r3, r2]
	buffer[1 + TCP_WIN_SIZE_H_P] = 0xFF; // Maximum window size
 8002430:	4b10      	ldr	r3, [pc, #64]	@ (8002474 <makeTcpSynAck+0x1c0>)
 8002432:	2231      	movs	r2, #49	@ 0x31
 8002434:	21ff      	movs	r1, #255	@ 0xff
 8002436:	5499      	strb	r1, [r3, r2]
	buffer[1 + TCP_WIN_SIZE_L_P] = 0xFF;
 8002438:	4b0e      	ldr	r3, [pc, #56]	@ (8002474 <makeTcpSynAck+0x1c0>)
 800243a:	2232      	movs	r2, #50	@ 0x32
 800243c:	21ff      	movs	r1, #255	@ 0xff
 800243e:	5499      	strb	r1, [r3, r2]
	buffer[1 + TCP_HEADER_LEN_P] = 0x50; // 20 bytes (5 words)
 8002440:	4b0c      	ldr	r3, [pc, #48]	@ (8002474 <makeTcpSynAck+0x1c0>)
 8002442:	222f      	movs	r2, #47	@ 0x2f
 8002444:	2150      	movs	r1, #80	@ 0x50
 8002446:	5499      	strb	r1, [r3, r2]

	// IP and TCP checksums
	calculateIPChecksum(&buffer[1]); // Pass the buffer to calculate the IP checksum
 8002448:	4b0b      	ldr	r3, [pc, #44]	@ (8002478 <makeTcpSynAck+0x1c4>)
 800244a:	0018      	movs	r0, r3
 800244c:	f7ff faaa 	bl	80019a4 <calculateIPChecksum>
	calculateTcpChecksum(&buffer[1]); // Pass the buffer to calculate the TCP checksum
 8002450:	4b09      	ldr	r3, [pc, #36]	@ (8002478 <makeTcpSynAck+0x1c4>)
 8002452:	0018      	movs	r0, r3
 8002454:	f7ff fb08 	bl	8001a68 <calculateTcpChecksum>

	// Padding to meet minimum Ethernet size
	// Transmit the packet
	transmit_tcp_packet(buffer, 1 + 54);
 8002458:	4b06      	ldr	r3, [pc, #24]	@ (8002474 <makeTcpSynAck+0x1c0>)
 800245a:	2137      	movs	r1, #55	@ 0x37
 800245c:	0018      	movs	r0, r3
 800245e:	f7ff f8f3 	bl	8001648 <transmit_tcp_packet>

	// Update connection state
	connectionState = SYN_RECEIVED;
 8002462:	4b0b      	ldr	r3, [pc, #44]	@ (8002490 <makeTcpSynAck+0x1dc>)
 8002464:	2201      	movs	r2, #1
 8002466:	701a      	strb	r2, [r3, #0]
}
 8002468:	46c0      	nop			@ (mov r8, r8)
 800246a:	46bd      	mov	sp, r7
 800246c:	b007      	add	sp, #28
 800246e:	bd90      	pop	{r4, r7, pc}
 8002470:	080045f8 	.word	0x080045f8
 8002474:	200001ac 	.word	0x200001ac
 8002478:	200001ad 	.word	0x200001ad
 800247c:	200001b3 	.word	0x200001b3
 8002480:	20000000 	.word	0x20000000
 8002484:	200001c7 	.word	0x200001c7
 8002488:	200001cb 	.word	0x200001cb
 800248c:	20000008 	.word	0x20000008
 8002490:	20000791 	.word	0x20000791

08002494 <makeTcpAck>:

	// Transmit the packet
	transmit_tcp_packet(buffer, 1 + headerSize + responseLen);
}

void makeTcpAck() {
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
	printf("tcpack\n\r");
 8002498:	4b0c      	ldr	r3, [pc, #48]	@ (80024cc <makeTcpAck+0x38>)
 800249a:	0018      	movs	r0, r3
 800249c:	f000 fba0 	bl	8002be0 <iprintf>
	memmove(&buffer[1], &buffer[0], TCP_DATA_START_P);
 80024a0:	490b      	ldr	r1, [pc, #44]	@ (80024d0 <makeTcpAck+0x3c>)
 80024a2:	4b0c      	ldr	r3, [pc, #48]	@ (80024d4 <makeTcpAck+0x40>)
 80024a4:	2236      	movs	r2, #54	@ 0x36
 80024a6:	0018      	movs	r0, r3
 80024a8:	f000 fde0 	bl	800306c <memmove>

	// Set the 0th value to 0x0E
	buffer[0] = 0x0E;
 80024ac:	4b08      	ldr	r3, [pc, #32]	@ (80024d0 <makeTcpAck+0x3c>)
 80024ae:	220e      	movs	r2, #14
 80024b0:	701a      	strb	r2, [r3, #0]
	buffer[1 + TCP_FLAGS_P] = TCP_FLAG_ACK;
 80024b2:	4b07      	ldr	r3, [pc, #28]	@ (80024d0 <makeTcpAck+0x3c>)
 80024b4:	2230      	movs	r2, #48	@ 0x30
 80024b6:	2110      	movs	r1, #16
 80024b8:	5499      	strb	r1, [r3, r2]
	transmit_tcp_packet(buffer, 1 + TCP_DATA_START_P);
 80024ba:	4b05      	ldr	r3, [pc, #20]	@ (80024d0 <makeTcpAck+0x3c>)
 80024bc:	2137      	movs	r1, #55	@ 0x37
 80024be:	0018      	movs	r0, r3
 80024c0:	f7ff f8c2 	bl	8001648 <transmit_tcp_packet>
}
 80024c4:	46c0      	nop			@ (mov r8, r8)
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	46c0      	nop			@ (mov r8, r8)
 80024cc:	08004874 	.word	0x08004874
 80024d0:	200001ac 	.word	0x200001ac
 80024d4:	200001ad 	.word	0x200001ad

080024d8 <packetLoop>:
		trial_arp_request(); // Trigger ARP request
		lastArpTime = currentTime;
	}
}

void packetLoop() {
 80024d8:	b590      	push	{r4, r7, lr}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
	uint16_t plen = packetReceive();
 80024de:	1dbc      	adds	r4, r7, #6
 80024e0:	f7ff f94e 	bl	8001780 <packetReceive>
 80024e4:	0003      	movs	r3, r0
 80024e6:	8023      	strh	r3, [r4, #0]

	// Process received packets
	if (plen > 0) {
 80024e8:	1dbb      	adds	r3, r7, #6
 80024ea:	881b      	ldrh	r3, [r3, #0]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d100      	bne.n	80024f2 <packetLoop+0x1a>
 80024f0:	e09e      	b.n	8002630 <packetLoop+0x158>
		uint16_t ethType = (buffer[ETH_TYPE_H_P] << 8) | buffer[ETH_TYPE_L_P];
 80024f2:	4b51      	ldr	r3, [pc, #324]	@ (8002638 <packetLoop+0x160>)
 80024f4:	7b1b      	ldrb	r3, [r3, #12]
 80024f6:	021b      	lsls	r3, r3, #8
 80024f8:	b21a      	sxth	r2, r3
 80024fa:	4b4f      	ldr	r3, [pc, #316]	@ (8002638 <packetLoop+0x160>)
 80024fc:	7b5b      	ldrb	r3, [r3, #13]
 80024fe:	b21b      	sxth	r3, r3
 8002500:	4313      	orrs	r3, r2
 8002502:	b21a      	sxth	r2, r3
 8002504:	1d3b      	adds	r3, r7, #4
 8002506:	801a      	strh	r2, [r3, #0]
		if (ethType == ETH_TYPE_ARP) {
 8002508:	1d3b      	adds	r3, r7, #4
 800250a:	881b      	ldrh	r3, [r3, #0]
 800250c:	4a4b      	ldr	r2, [pc, #300]	@ (800263c <packetLoop+0x164>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d107      	bne.n	8002522 <packetLoop+0x4a>
			if (buffer[21] == 0x01) {
 8002512:	4b49      	ldr	r3, [pc, #292]	@ (8002638 <packetLoop+0x160>)
 8002514:	7d5b      	ldrb	r3, [r3, #21]
 8002516:	2b01      	cmp	r3, #1
 8002518:	d000      	beq.n	800251c <packetLoop+0x44>
 800251a:	e07e      	b.n	800261a <packetLoop+0x142>
				makeArpReply();
 800251c:	f7ff f9ea 	bl	80018f4 <makeArpReply>
			}
			return;
 8002520:	e07b      	b.n	800261a <packetLoop+0x142>
		}

		if (ethType == ETH_TYPE_IP && buffer[IP_PROTO_P] == IP_PROTO_TCP) {
 8002522:	1d3b      	adds	r3, r7, #4
 8002524:	881a      	ldrh	r2, [r3, #0]
 8002526:	2380      	movs	r3, #128	@ 0x80
 8002528:	011b      	lsls	r3, r3, #4
 800252a:	429a      	cmp	r2, r3
 800252c:	d000      	beq.n	8002530 <packetLoop+0x58>
 800252e:	e07f      	b.n	8002630 <packetLoop+0x158>
 8002530:	4b41      	ldr	r3, [pc, #260]	@ (8002638 <packetLoop+0x160>)
 8002532:	7ddb      	ldrb	r3, [r3, #23]
 8002534:	2b06      	cmp	r3, #6
 8002536:	d000      	beq.n	800253a <packetLoop+0x62>
 8002538:	e07a      	b.n	8002630 <packetLoop+0x158>
			uint8_t tcpFlags = buffer[TCP_FLAGS_P];
 800253a:	1cfb      	adds	r3, r7, #3
 800253c:	4a3e      	ldr	r2, [pc, #248]	@ (8002638 <packetLoop+0x160>)
 800253e:	212f      	movs	r1, #47	@ 0x2f
 8002540:	5c52      	ldrb	r2, [r2, r1]
 8002542:	701a      	strb	r2, [r3, #0]

			// Check for TCP(ACK_FIN)
			if ((tcpFlags & TCP_FLAG_ACK) && (tcpFlags & TCP_FLAG_FIN)) {
 8002544:	1cfb      	adds	r3, r7, #3
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	2210      	movs	r2, #16
 800254a:	4013      	ands	r3, r2
 800254c:	d00e      	beq.n	800256c <packetLoop+0x94>
 800254e:	1cfb      	adds	r3, r7, #3
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	2201      	movs	r2, #1
 8002554:	4013      	ands	r3, r2
 8002556:	d009      	beq.n	800256c <packetLoop+0x94>
				printf("TCP(ACK_FIN) packet detected\n\r");
 8002558:	4b39      	ldr	r3, [pc, #228]	@ (8002640 <packetLoop+0x168>)
 800255a:	0018      	movs	r0, r3
 800255c:	f000 fb40 	bl	8002be0 <iprintf>
				makeTcpAck3(); // Send an acknowledgment
 8002560:	f7ff fc7a 	bl	8001e58 <makeTcpAck3>
				connectionState = CLOSED;
 8002564:	4b37      	ldr	r3, [pc, #220]	@ (8002644 <packetLoop+0x16c>)
 8002566:	2204      	movs	r2, #4
 8002568:	701a      	strb	r2, [r3, #0]
				//enc_init(device_mac);
				return;
 800256a:	e061      	b.n	8002630 <packetLoop+0x158>
			}
			if ((tcpFlags & TCP_FLAG_SYN)) {
 800256c:	1cfb      	adds	r3, r7, #3
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	2202      	movs	r2, #2
 8002572:	4013      	ands	r3, r2
 8002574:	d006      	beq.n	8002584 <packetLoop+0xac>
				printf("TCP(SYN) packet detected\n\r");
 8002576:	4b34      	ldr	r3, [pc, #208]	@ (8002648 <packetLoop+0x170>)
 8002578:	0018      	movs	r0, r3
 800257a:	f000 fb31 	bl	8002be0 <iprintf>
				//makeTcpAck3(); // Send an acknowledgment
				connectionState = LISTEN;
 800257e:	4b31      	ldr	r3, [pc, #196]	@ (8002644 <packetLoop+0x16c>)
 8002580:	2200      	movs	r2, #0
 8002582:	701a      	strb	r2, [r3, #0]
				//enc_init(device_mac);
			}
			switch (connectionState) {
 8002584:	4b2f      	ldr	r3, [pc, #188]	@ (8002644 <packetLoop+0x16c>)
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	2b05      	cmp	r3, #5
 800258a:	d848      	bhi.n	800261e <packetLoop+0x146>
 800258c:	009a      	lsls	r2, r3, #2
 800258e:	4b2f      	ldr	r3, [pc, #188]	@ (800264c <packetLoop+0x174>)
 8002590:	18d3      	adds	r3, r2, r3
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	469f      	mov	pc, r3
			case LISTEN:
				printf("listen\n\r");
 8002596:	4b2e      	ldr	r3, [pc, #184]	@ (8002650 <packetLoop+0x178>)
 8002598:	0018      	movs	r0, r3
 800259a:	f000 fb21 	bl	8002be0 <iprintf>
				if (tcpFlags & TCP_FLAG_SYN)
 800259e:	1cfb      	adds	r3, r7, #3
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	2202      	movs	r2, #2
 80025a4:	4013      	ands	r3, r2
 80025a6:	d03c      	beq.n	8002622 <packetLoop+0x14a>
					makeTcpSynAck();
 80025a8:	f7ff fe84 	bl	80022b4 <makeTcpSynAck>
				break;
 80025ac:	e039      	b.n	8002622 <packetLoop+0x14a>
			case SYN_RECEIVED:
				printf("syn received\n\r");
 80025ae:	4b29      	ldr	r3, [pc, #164]	@ (8002654 <packetLoop+0x17c>)
 80025b0:	0018      	movs	r0, r3
 80025b2:	f000 fb15 	bl	8002be0 <iprintf>
				if (tcpFlags & TCP_FLAG_ACK)
 80025b6:	1cfb      	adds	r3, r7, #3
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	2210      	movs	r2, #16
 80025bc:	4013      	ands	r3, r2
 80025be:	d032      	beq.n	8002626 <packetLoop+0x14e>
					connectionState = ESTABLISHED;
 80025c0:	4b20      	ldr	r3, [pc, #128]	@ (8002644 <packetLoop+0x16c>)
 80025c2:	2202      	movs	r2, #2
 80025c4:	701a      	strb	r2, [r3, #0]
				break;
 80025c6:	e02e      	b.n	8002626 <packetLoop+0x14e>
			case ESTABLISHED:
				printf("established\n\r");
 80025c8:	4b23      	ldr	r3, [pc, #140]	@ (8002658 <packetLoop+0x180>)
 80025ca:	0018      	movs	r0, r3
 80025cc:	f000 fb08 	bl	8002be0 <iprintf>
				if (tcpFlags & TCP_FLAG_FIN) {
 80025d0:	1cfb      	adds	r3, r7, #3
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	2201      	movs	r2, #1
 80025d6:	4013      	ands	r3, r2
 80025d8:	d005      	beq.n	80025e6 <packetLoop+0x10e>
					makeTcpAck();
 80025da:	f7ff ff5b 	bl	8002494 <makeTcpAck>
					connectionState = FIN_WAIT;
 80025de:	4b19      	ldr	r3, [pc, #100]	@ (8002644 <packetLoop+0x16c>)
 80025e0:	2203      	movs	r2, #3
 80025e2:	701a      	strb	r2, [r3, #0]
				} else if (plen > TCP_DATA_START_P) {
					makeTcpAck2();

				}
				break;
 80025e4:	e021      	b.n	800262a <packetLoop+0x152>
				} else if (plen > TCP_DATA_START_P) {
 80025e6:	1dbb      	adds	r3, r7, #6
 80025e8:	881b      	ldrh	r3, [r3, #0]
 80025ea:	2b36      	cmp	r3, #54	@ 0x36
 80025ec:	d91d      	bls.n	800262a <packetLoop+0x152>
					makeTcpAck2();
 80025ee:	f7ff fd3f 	bl	8002070 <makeTcpAck2>
				break;
 80025f2:	e01a      	b.n	800262a <packetLoop+0x152>
			case FIN_WAIT:
				printf("fin wait\n\r");
 80025f4:	4b19      	ldr	r3, [pc, #100]	@ (800265c <packetLoop+0x184>)
 80025f6:	0018      	movs	r0, r3
 80025f8:	f000 faf2 	bl	8002be0 <iprintf>
				if (tcpFlags & TCP_FLAG_ACK)
 80025fc:	1cfb      	adds	r3, r7, #3
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	2210      	movs	r2, #16
 8002602:	4013      	ands	r3, r2
 8002604:	d013      	beq.n	800262e <packetLoop+0x156>
					connectionState = CLOSED;
 8002606:	4b0f      	ldr	r3, [pc, #60]	@ (8002644 <packetLoop+0x16c>)
 8002608:	2204      	movs	r2, #4
 800260a:	701a      	strb	r2, [r3, #0]
				break;
 800260c:	e00f      	b.n	800262e <packetLoop+0x156>
			case ACK_SENT:
				makeTcpFinPshAck();
 800260e:	f7ff faf3 	bl	8001bf8 <makeTcpFinPshAck>
				connectionState = CLOSED;
 8002612:	4b0c      	ldr	r3, [pc, #48]	@ (8002644 <packetLoop+0x16c>)
 8002614:	2204      	movs	r2, #4
 8002616:	701a      	strb	r2, [r3, #0]
				break;
 8002618:	e00a      	b.n	8002630 <packetLoop+0x158>
			return;
 800261a:	46c0      	nop			@ (mov r8, r8)
 800261c:	e008      	b.n	8002630 <packetLoop+0x158>
			default:
				break;
 800261e:	46c0      	nop			@ (mov r8, r8)
 8002620:	e006      	b.n	8002630 <packetLoop+0x158>
				break;
 8002622:	46c0      	nop			@ (mov r8, r8)
 8002624:	e004      	b.n	8002630 <packetLoop+0x158>
				break;
 8002626:	46c0      	nop			@ (mov r8, r8)
 8002628:	e002      	b.n	8002630 <packetLoop+0x158>
				break;
 800262a:	46c0      	nop			@ (mov r8, r8)
 800262c:	e000      	b.n	8002630 <packetLoop+0x158>
				break;
 800262e:	46c0      	nop			@ (mov r8, r8)
		}
	}

	// Call ARP refresh periodically
	//refreshArp();
}
 8002630:	46bd      	mov	sp, r7
 8002632:	b003      	add	sp, #12
 8002634:	bd90      	pop	{r4, r7, pc}
 8002636:	46c0      	nop			@ (mov r8, r8)
 8002638:	200001ac 	.word	0x200001ac
 800263c:	00000806 	.word	0x00000806
 8002640:	080048ac 	.word	0x080048ac
 8002644:	20000791 	.word	0x20000791
 8002648:	080048cc 	.word	0x080048cc
 800264c:	08004920 	.word	0x08004920
 8002650:	080048e8 	.word	0x080048e8
 8002654:	080048f4 	.word	0x080048f4
 8002658:	08004904 	.word	0x08004904
 800265c:	08004914 	.word	0x08004914

08002660 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002660:	480e      	ldr	r0, [pc, #56]	@ (800269c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002662:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002664:	f000 f866 	bl	8002734 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  ldr r0, =_sdata
 8002668:	480d      	ldr	r0, [pc, #52]	@ (80026a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800266a:	490e      	ldr	r1, [pc, #56]	@ (80026a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800266c:	4a0e      	ldr	r2, [pc, #56]	@ (80026a8 <LoopForever+0xe>)
  movs r3, #0
 800266e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002670:	e002      	b.n	8002678 <LoopCopyDataInit>

08002672 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002672:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002674:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002676:	3304      	adds	r3, #4

08002678 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002678:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800267a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800267c:	d3f9      	bcc.n	8002672 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800267e:	4a0b      	ldr	r2, [pc, #44]	@ (80026ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8002680:	4c0b      	ldr	r4, [pc, #44]	@ (80026b0 <LoopForever+0x16>)
  movs r3, #0
 8002682:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002684:	e001      	b.n	800268a <LoopFillZerobss>

08002686 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002686:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002688:	3204      	adds	r2, #4

0800268a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800268a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800268c:	d3fb      	bcc.n	8002686 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800268e:	f000 fd6f 	bl	8003170 <__libc_init_array>
/* LP - Update system core clocks */
  bl SystemCoreClockUpdate
 8002692:	f000 f895 	bl	80027c0 <SystemCoreClockUpdate>
/* Call the application's entry point.*/
  bl main
 8002696:	f7fe fd07 	bl	80010a8 <main>

0800269a <LoopForever>:

LoopForever:
  b LoopForever
 800269a:	e7fe      	b.n	800269a <LoopForever>
  ldr   r0, =_estack
 800269c:	20008000 	.word	0x20008000
/* Copy the data segment initializers from flash to SRAM */  ldr r0, =_sdata
 80026a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026a4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80026a8:	08004984 	.word	0x08004984
  ldr r2, =_sbss
 80026ac:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80026b0:	200008e4 	.word	0x200008e4

080026b4 <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80026b4:	e7fe      	b.n	80026b4 <ADC_COMP_IRQHandler>
	...

080026b8 <Set_Clocks_To_48MHz>:
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	4b1a      	ldr	r3, [pc, #104]	@ (8002728 <Set_Clocks_To_48MHz+0x70>)
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	4b19      	ldr	r3, [pc, #100]	@ (8002728 <Set_Clocks_To_48MHz+0x70>)
 80026c2:	2101      	movs	r1, #1
 80026c4:	430a      	orrs	r2, r1
 80026c6:	601a      	str	r2, [r3, #0]
 80026c8:	4b18      	ldr	r3, [pc, #96]	@ (800272c <Set_Clocks_To_48MHz+0x74>)
 80026ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80026cc:	4b17      	ldr	r3, [pc, #92]	@ (800272c <Set_Clocks_To_48MHz+0x74>)
 80026ce:	2180      	movs	r1, #128	@ 0x80
 80026d0:	0249      	lsls	r1, r1, #9
 80026d2:	430a      	orrs	r2, r1
 80026d4:	635a      	str	r2, [r3, #52]	@ 0x34
 80026d6:	46c0      	nop			@ (mov r8, r8)
 80026d8:	4b14      	ldr	r3, [pc, #80]	@ (800272c <Set_Clocks_To_48MHz+0x74>)
 80026da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80026dc:	2380      	movs	r3, #128	@ 0x80
 80026de:	029b      	lsls	r3, r3, #10
 80026e0:	4013      	ands	r3, r2
 80026e2:	d0f9      	beq.n	80026d8 <Set_Clocks_To_48MHz+0x20>
 80026e4:	4b11      	ldr	r3, [pc, #68]	@ (800272c <Set_Clocks_To_48MHz+0x74>)
 80026e6:	685a      	ldr	r2, [r3, #4]
 80026e8:	4b10      	ldr	r3, [pc, #64]	@ (800272c <Set_Clocks_To_48MHz+0x74>)
 80026ea:	21f0      	movs	r1, #240	@ 0xf0
 80026ec:	438a      	bics	r2, r1
 80026ee:	605a      	str	r2, [r3, #4]
 80026f0:	4b0e      	ldr	r3, [pc, #56]	@ (800272c <Set_Clocks_To_48MHz+0x74>)
 80026f2:	685a      	ldr	r2, [r3, #4]
 80026f4:	4b0d      	ldr	r3, [pc, #52]	@ (800272c <Set_Clocks_To_48MHz+0x74>)
 80026f6:	2103      	movs	r1, #3
 80026f8:	430a      	orrs	r2, r1
 80026fa:	605a      	str	r2, [r3, #4]
 80026fc:	46c0      	nop			@ (mov r8, r8)
 80026fe:	4b0b      	ldr	r3, [pc, #44]	@ (800272c <Set_Clocks_To_48MHz+0x74>)
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	089a      	lsrs	r2, r3, #2
 8002704:	4b09      	ldr	r3, [pc, #36]	@ (800272c <Set_Clocks_To_48MHz+0x74>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	4053      	eors	r3, r2
 800270a:	2203      	movs	r2, #3
 800270c:	4013      	ands	r3, r2
 800270e:	d1f6      	bne.n	80026fe <Set_Clocks_To_48MHz+0x46>
 8002710:	4b06      	ldr	r3, [pc, #24]	@ (800272c <Set_Clocks_To_48MHz+0x74>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	4a06      	ldr	r2, [pc, #24]	@ (8002730 <Set_Clocks_To_48MHz+0x78>)
 8002716:	401a      	ands	r2, r3
 8002718:	4b04      	ldr	r3, [pc, #16]	@ (800272c <Set_Clocks_To_48MHz+0x74>)
 800271a:	2180      	movs	r1, #128	@ 0x80
 800271c:	00c9      	lsls	r1, r1, #3
 800271e:	430a      	orrs	r2, r1
 8002720:	605a      	str	r2, [r3, #4]
 8002722:	46c0      	nop			@ (mov r8, r8)
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	40022000 	.word	0x40022000
 800272c:	40021000 	.word	0x40021000
 8002730:	fffff8ff 	.word	0xfffff8ff

08002734 <SystemInit>:
 8002734:	b580      	push	{r7, lr}
 8002736:	af00      	add	r7, sp, #0
 8002738:	4b1b      	ldr	r3, [pc, #108]	@ (80027a8 <SystemInit+0x74>)
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	4b1a      	ldr	r3, [pc, #104]	@ (80027a8 <SystemInit+0x74>)
 800273e:	2101      	movs	r1, #1
 8002740:	430a      	orrs	r2, r1
 8002742:	601a      	str	r2, [r3, #0]
 8002744:	4b18      	ldr	r3, [pc, #96]	@ (80027a8 <SystemInit+0x74>)
 8002746:	685a      	ldr	r2, [r3, #4]
 8002748:	4b17      	ldr	r3, [pc, #92]	@ (80027a8 <SystemInit+0x74>)
 800274a:	4918      	ldr	r1, [pc, #96]	@ (80027ac <SystemInit+0x78>)
 800274c:	400a      	ands	r2, r1
 800274e:	605a      	str	r2, [r3, #4]
 8002750:	4b15      	ldr	r3, [pc, #84]	@ (80027a8 <SystemInit+0x74>)
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	4b14      	ldr	r3, [pc, #80]	@ (80027a8 <SystemInit+0x74>)
 8002756:	4916      	ldr	r1, [pc, #88]	@ (80027b0 <SystemInit+0x7c>)
 8002758:	400a      	ands	r2, r1
 800275a:	601a      	str	r2, [r3, #0]
 800275c:	4b12      	ldr	r3, [pc, #72]	@ (80027a8 <SystemInit+0x74>)
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	4b11      	ldr	r3, [pc, #68]	@ (80027a8 <SystemInit+0x74>)
 8002762:	4914      	ldr	r1, [pc, #80]	@ (80027b4 <SystemInit+0x80>)
 8002764:	400a      	ands	r2, r1
 8002766:	601a      	str	r2, [r3, #0]
 8002768:	4b0f      	ldr	r3, [pc, #60]	@ (80027a8 <SystemInit+0x74>)
 800276a:	685a      	ldr	r2, [r3, #4]
 800276c:	4b0e      	ldr	r3, [pc, #56]	@ (80027a8 <SystemInit+0x74>)
 800276e:	4912      	ldr	r1, [pc, #72]	@ (80027b8 <SystemInit+0x84>)
 8002770:	400a      	ands	r2, r1
 8002772:	605a      	str	r2, [r3, #4]
 8002774:	4b0c      	ldr	r3, [pc, #48]	@ (80027a8 <SystemInit+0x74>)
 8002776:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002778:	4b0b      	ldr	r3, [pc, #44]	@ (80027a8 <SystemInit+0x74>)
 800277a:	210f      	movs	r1, #15
 800277c:	438a      	bics	r2, r1
 800277e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002780:	4b09      	ldr	r3, [pc, #36]	@ (80027a8 <SystemInit+0x74>)
 8002782:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002784:	4b08      	ldr	r3, [pc, #32]	@ (80027a8 <SystemInit+0x74>)
 8002786:	490d      	ldr	r1, [pc, #52]	@ (80027bc <SystemInit+0x88>)
 8002788:	400a      	ands	r2, r1
 800278a:	631a      	str	r2, [r3, #48]	@ 0x30
 800278c:	4b06      	ldr	r3, [pc, #24]	@ (80027a8 <SystemInit+0x74>)
 800278e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002790:	4b05      	ldr	r3, [pc, #20]	@ (80027a8 <SystemInit+0x74>)
 8002792:	2101      	movs	r1, #1
 8002794:	438a      	bics	r2, r1
 8002796:	635a      	str	r2, [r3, #52]	@ 0x34
 8002798:	4b03      	ldr	r3, [pc, #12]	@ (80027a8 <SystemInit+0x74>)
 800279a:	2200      	movs	r2, #0
 800279c:	609a      	str	r2, [r3, #8]
 800279e:	f7ff ff8b 	bl	80026b8 <Set_Clocks_To_48MHz>
 80027a2:	46c0      	nop			@ (mov r8, r8)
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	40021000 	.word	0x40021000
 80027ac:	08ffb80c 	.word	0x08ffb80c
 80027b0:	fef6ffff 	.word	0xfef6ffff
 80027b4:	fffbffff 	.word	0xfffbffff
 80027b8:	ffc0ffff 	.word	0xffc0ffff
 80027bc:	fff0feac 	.word	0xfff0feac

080027c0 <SystemCoreClockUpdate>:
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	2300      	movs	r3, #0
 80027c8:	60fb      	str	r3, [r7, #12]
 80027ca:	2300      	movs	r3, #0
 80027cc:	60bb      	str	r3, [r7, #8]
 80027ce:	2300      	movs	r3, #0
 80027d0:	607b      	str	r3, [r7, #4]
 80027d2:	2300      	movs	r3, #0
 80027d4:	603b      	str	r3, [r7, #0]
 80027d6:	4b3d      	ldr	r3, [pc, #244]	@ (80028cc <SystemCoreClockUpdate+0x10c>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	220c      	movs	r2, #12
 80027dc:	4013      	ands	r3, r2
 80027de:	60fb      	str	r3, [r7, #12]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2b0c      	cmp	r3, #12
 80027e4:	d00f      	beq.n	8002806 <SystemCoreClockUpdate+0x46>
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2b0c      	cmp	r3, #12
 80027ea:	d859      	bhi.n	80028a0 <SystemCoreClockUpdate+0xe0>
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2b08      	cmp	r3, #8
 80027f0:	d015      	beq.n	800281e <SystemCoreClockUpdate+0x5e>
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2b08      	cmp	r3, #8
 80027f6:	d853      	bhi.n	80028a0 <SystemCoreClockUpdate+0xe0>
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d007      	beq.n	800280e <SystemCoreClockUpdate+0x4e>
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2b04      	cmp	r3, #4
 8002802:	d008      	beq.n	8002816 <SystemCoreClockUpdate+0x56>
 8002804:	e04c      	b.n	80028a0 <SystemCoreClockUpdate+0xe0>
 8002806:	4b32      	ldr	r3, [pc, #200]	@ (80028d0 <SystemCoreClockUpdate+0x110>)
 8002808:	4a32      	ldr	r2, [pc, #200]	@ (80028d4 <SystemCoreClockUpdate+0x114>)
 800280a:	601a      	str	r2, [r3, #0]
 800280c:	e04c      	b.n	80028a8 <SystemCoreClockUpdate+0xe8>
 800280e:	4b30      	ldr	r3, [pc, #192]	@ (80028d0 <SystemCoreClockUpdate+0x110>)
 8002810:	4a31      	ldr	r2, [pc, #196]	@ (80028d8 <SystemCoreClockUpdate+0x118>)
 8002812:	601a      	str	r2, [r3, #0]
 8002814:	e048      	b.n	80028a8 <SystemCoreClockUpdate+0xe8>
 8002816:	4b2e      	ldr	r3, [pc, #184]	@ (80028d0 <SystemCoreClockUpdate+0x110>)
 8002818:	4a2f      	ldr	r2, [pc, #188]	@ (80028d8 <SystemCoreClockUpdate+0x118>)
 800281a:	601a      	str	r2, [r3, #0]
 800281c:	e044      	b.n	80028a8 <SystemCoreClockUpdate+0xe8>
 800281e:	4b2b      	ldr	r3, [pc, #172]	@ (80028cc <SystemCoreClockUpdate+0x10c>)
 8002820:	685a      	ldr	r2, [r3, #4]
 8002822:	23f0      	movs	r3, #240	@ 0xf0
 8002824:	039b      	lsls	r3, r3, #14
 8002826:	4013      	ands	r3, r2
 8002828:	60bb      	str	r3, [r7, #8]
 800282a:	4b28      	ldr	r3, [pc, #160]	@ (80028cc <SystemCoreClockUpdate+0x10c>)
 800282c:	685a      	ldr	r2, [r3, #4]
 800282e:	23c0      	movs	r3, #192	@ 0xc0
 8002830:	025b      	lsls	r3, r3, #9
 8002832:	4013      	ands	r3, r2
 8002834:	607b      	str	r3, [r7, #4]
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	0c9b      	lsrs	r3, r3, #18
 800283a:	3302      	adds	r3, #2
 800283c:	60bb      	str	r3, [r7, #8]
 800283e:	4b23      	ldr	r3, [pc, #140]	@ (80028cc <SystemCoreClockUpdate+0x10c>)
 8002840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002842:	220f      	movs	r2, #15
 8002844:	4013      	ands	r3, r2
 8002846:	3301      	adds	r3, #1
 8002848:	603b      	str	r3, [r7, #0]
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	2380      	movs	r3, #128	@ 0x80
 800284e:	025b      	lsls	r3, r3, #9
 8002850:	429a      	cmp	r2, r3
 8002852:	d10a      	bne.n	800286a <SystemCoreClockUpdate+0xaa>
 8002854:	6839      	ldr	r1, [r7, #0]
 8002856:	4820      	ldr	r0, [pc, #128]	@ (80028d8 <SystemCoreClockUpdate+0x118>)
 8002858:	f7fd fc68 	bl	800012c <__udivsi3>
 800285c:	0003      	movs	r3, r0
 800285e:	001a      	movs	r2, r3
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	435a      	muls	r2, r3
 8002864:	4b1a      	ldr	r3, [pc, #104]	@ (80028d0 <SystemCoreClockUpdate+0x110>)
 8002866:	601a      	str	r2, [r3, #0]
 8002868:	e01e      	b.n	80028a8 <SystemCoreClockUpdate+0xe8>
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	23c0      	movs	r3, #192	@ 0xc0
 800286e:	025b      	lsls	r3, r3, #9
 8002870:	429a      	cmp	r2, r3
 8002872:	d10a      	bne.n	800288a <SystemCoreClockUpdate+0xca>
 8002874:	6839      	ldr	r1, [r7, #0]
 8002876:	4817      	ldr	r0, [pc, #92]	@ (80028d4 <SystemCoreClockUpdate+0x114>)
 8002878:	f7fd fc58 	bl	800012c <__udivsi3>
 800287c:	0003      	movs	r3, r0
 800287e:	001a      	movs	r2, r3
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	435a      	muls	r2, r3
 8002884:	4b12      	ldr	r3, [pc, #72]	@ (80028d0 <SystemCoreClockUpdate+0x110>)
 8002886:	601a      	str	r2, [r3, #0]
 8002888:	e00e      	b.n	80028a8 <SystemCoreClockUpdate+0xe8>
 800288a:	6839      	ldr	r1, [r7, #0]
 800288c:	4812      	ldr	r0, [pc, #72]	@ (80028d8 <SystemCoreClockUpdate+0x118>)
 800288e:	f7fd fc4d 	bl	800012c <__udivsi3>
 8002892:	0003      	movs	r3, r0
 8002894:	001a      	movs	r2, r3
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	435a      	muls	r2, r3
 800289a:	4b0d      	ldr	r3, [pc, #52]	@ (80028d0 <SystemCoreClockUpdate+0x110>)
 800289c:	601a      	str	r2, [r3, #0]
 800289e:	e003      	b.n	80028a8 <SystemCoreClockUpdate+0xe8>
 80028a0:	4b0b      	ldr	r3, [pc, #44]	@ (80028d0 <SystemCoreClockUpdate+0x110>)
 80028a2:	4a0d      	ldr	r2, [pc, #52]	@ (80028d8 <SystemCoreClockUpdate+0x118>)
 80028a4:	601a      	str	r2, [r3, #0]
 80028a6:	46c0      	nop			@ (mov r8, r8)
 80028a8:	4b08      	ldr	r3, [pc, #32]	@ (80028cc <SystemCoreClockUpdate+0x10c>)
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	091b      	lsrs	r3, r3, #4
 80028ae:	220f      	movs	r2, #15
 80028b0:	4013      	ands	r3, r2
 80028b2:	4a0a      	ldr	r2, [pc, #40]	@ (80028dc <SystemCoreClockUpdate+0x11c>)
 80028b4:	5cd3      	ldrb	r3, [r2, r3]
 80028b6:	60fb      	str	r3, [r7, #12]
 80028b8:	4b05      	ldr	r3, [pc, #20]	@ (80028d0 <SystemCoreClockUpdate+0x110>)
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	40da      	lsrs	r2, r3
 80028c0:	4b03      	ldr	r3, [pc, #12]	@ (80028d0 <SystemCoreClockUpdate+0x110>)
 80028c2:	601a      	str	r2, [r3, #0]
 80028c4:	46c0      	nop			@ (mov r8, r8)
 80028c6:	46bd      	mov	sp, r7
 80028c8:	b004      	add	sp, #16
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	40021000 	.word	0x40021000
 80028d0:	2000000c 	.word	0x2000000c
 80028d4:	02dc6c00 	.word	0x02dc6c00
 80028d8:	007a1200 	.word	0x007a1200
 80028dc:	08004938 	.word	0x08004938

080028e0 <malloc>:
 80028e0:	b510      	push	{r4, lr}
 80028e2:	4b03      	ldr	r3, [pc, #12]	@ (80028f0 <malloc+0x10>)
 80028e4:	0001      	movs	r1, r0
 80028e6:	6818      	ldr	r0, [r3, #0]
 80028e8:	f000 f826 	bl	8002938 <_malloc_r>
 80028ec:	bd10      	pop	{r4, pc}
 80028ee:	46c0      	nop			@ (mov r8, r8)
 80028f0:	2000001c 	.word	0x2000001c

080028f4 <sbrk_aligned>:
 80028f4:	b570      	push	{r4, r5, r6, lr}
 80028f6:	4e0f      	ldr	r6, [pc, #60]	@ (8002934 <sbrk_aligned+0x40>)
 80028f8:	000d      	movs	r5, r1
 80028fa:	6831      	ldr	r1, [r6, #0]
 80028fc:	0004      	movs	r4, r0
 80028fe:	2900      	cmp	r1, #0
 8002900:	d102      	bne.n	8002908 <sbrk_aligned+0x14>
 8002902:	f000 fc09 	bl	8003118 <_sbrk_r>
 8002906:	6030      	str	r0, [r6, #0]
 8002908:	0029      	movs	r1, r5
 800290a:	0020      	movs	r0, r4
 800290c:	f000 fc04 	bl	8003118 <_sbrk_r>
 8002910:	1c43      	adds	r3, r0, #1
 8002912:	d103      	bne.n	800291c <sbrk_aligned+0x28>
 8002914:	2501      	movs	r5, #1
 8002916:	426d      	negs	r5, r5
 8002918:	0028      	movs	r0, r5
 800291a:	bd70      	pop	{r4, r5, r6, pc}
 800291c:	2303      	movs	r3, #3
 800291e:	1cc5      	adds	r5, r0, #3
 8002920:	439d      	bics	r5, r3
 8002922:	42a8      	cmp	r0, r5
 8002924:	d0f8      	beq.n	8002918 <sbrk_aligned+0x24>
 8002926:	1a29      	subs	r1, r5, r0
 8002928:	0020      	movs	r0, r4
 800292a:	f000 fbf5 	bl	8003118 <_sbrk_r>
 800292e:	3001      	adds	r0, #1
 8002930:	d1f2      	bne.n	8002918 <sbrk_aligned+0x24>
 8002932:	e7ef      	b.n	8002914 <sbrk_aligned+0x20>
 8002934:	20000798 	.word	0x20000798

08002938 <_malloc_r>:
 8002938:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800293a:	2203      	movs	r2, #3
 800293c:	1ccb      	adds	r3, r1, #3
 800293e:	4393      	bics	r3, r2
 8002940:	3308      	adds	r3, #8
 8002942:	0005      	movs	r5, r0
 8002944:	001f      	movs	r7, r3
 8002946:	2b0c      	cmp	r3, #12
 8002948:	d234      	bcs.n	80029b4 <_malloc_r+0x7c>
 800294a:	270c      	movs	r7, #12
 800294c:	42b9      	cmp	r1, r7
 800294e:	d833      	bhi.n	80029b8 <_malloc_r+0x80>
 8002950:	0028      	movs	r0, r5
 8002952:	f000 f871 	bl	8002a38 <__malloc_lock>
 8002956:	4e37      	ldr	r6, [pc, #220]	@ (8002a34 <_malloc_r+0xfc>)
 8002958:	6833      	ldr	r3, [r6, #0]
 800295a:	001c      	movs	r4, r3
 800295c:	2c00      	cmp	r4, #0
 800295e:	d12f      	bne.n	80029c0 <_malloc_r+0x88>
 8002960:	0039      	movs	r1, r7
 8002962:	0028      	movs	r0, r5
 8002964:	f7ff ffc6 	bl	80028f4 <sbrk_aligned>
 8002968:	0004      	movs	r4, r0
 800296a:	1c43      	adds	r3, r0, #1
 800296c:	d15f      	bne.n	8002a2e <_malloc_r+0xf6>
 800296e:	6834      	ldr	r4, [r6, #0]
 8002970:	9400      	str	r4, [sp, #0]
 8002972:	9b00      	ldr	r3, [sp, #0]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d14a      	bne.n	8002a0e <_malloc_r+0xd6>
 8002978:	2c00      	cmp	r4, #0
 800297a:	d052      	beq.n	8002a22 <_malloc_r+0xea>
 800297c:	6823      	ldr	r3, [r4, #0]
 800297e:	0028      	movs	r0, r5
 8002980:	18e3      	adds	r3, r4, r3
 8002982:	9900      	ldr	r1, [sp, #0]
 8002984:	9301      	str	r3, [sp, #4]
 8002986:	f000 fbc7 	bl	8003118 <_sbrk_r>
 800298a:	9b01      	ldr	r3, [sp, #4]
 800298c:	4283      	cmp	r3, r0
 800298e:	d148      	bne.n	8002a22 <_malloc_r+0xea>
 8002990:	6823      	ldr	r3, [r4, #0]
 8002992:	0028      	movs	r0, r5
 8002994:	1aff      	subs	r7, r7, r3
 8002996:	0039      	movs	r1, r7
 8002998:	f7ff ffac 	bl	80028f4 <sbrk_aligned>
 800299c:	3001      	adds	r0, #1
 800299e:	d040      	beq.n	8002a22 <_malloc_r+0xea>
 80029a0:	6823      	ldr	r3, [r4, #0]
 80029a2:	19db      	adds	r3, r3, r7
 80029a4:	6023      	str	r3, [r4, #0]
 80029a6:	6833      	ldr	r3, [r6, #0]
 80029a8:	685a      	ldr	r2, [r3, #4]
 80029aa:	2a00      	cmp	r2, #0
 80029ac:	d133      	bne.n	8002a16 <_malloc_r+0xde>
 80029ae:	9b00      	ldr	r3, [sp, #0]
 80029b0:	6033      	str	r3, [r6, #0]
 80029b2:	e019      	b.n	80029e8 <_malloc_r+0xb0>
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	dac9      	bge.n	800294c <_malloc_r+0x14>
 80029b8:	230c      	movs	r3, #12
 80029ba:	602b      	str	r3, [r5, #0]
 80029bc:	2000      	movs	r0, #0
 80029be:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80029c0:	6821      	ldr	r1, [r4, #0]
 80029c2:	1bc9      	subs	r1, r1, r7
 80029c4:	d420      	bmi.n	8002a08 <_malloc_r+0xd0>
 80029c6:	290b      	cmp	r1, #11
 80029c8:	d90a      	bls.n	80029e0 <_malloc_r+0xa8>
 80029ca:	19e2      	adds	r2, r4, r7
 80029cc:	6027      	str	r7, [r4, #0]
 80029ce:	42a3      	cmp	r3, r4
 80029d0:	d104      	bne.n	80029dc <_malloc_r+0xa4>
 80029d2:	6032      	str	r2, [r6, #0]
 80029d4:	6863      	ldr	r3, [r4, #4]
 80029d6:	6011      	str	r1, [r2, #0]
 80029d8:	6053      	str	r3, [r2, #4]
 80029da:	e005      	b.n	80029e8 <_malloc_r+0xb0>
 80029dc:	605a      	str	r2, [r3, #4]
 80029de:	e7f9      	b.n	80029d4 <_malloc_r+0x9c>
 80029e0:	6862      	ldr	r2, [r4, #4]
 80029e2:	42a3      	cmp	r3, r4
 80029e4:	d10e      	bne.n	8002a04 <_malloc_r+0xcc>
 80029e6:	6032      	str	r2, [r6, #0]
 80029e8:	0028      	movs	r0, r5
 80029ea:	f000 f82d 	bl	8002a48 <__malloc_unlock>
 80029ee:	0020      	movs	r0, r4
 80029f0:	2207      	movs	r2, #7
 80029f2:	300b      	adds	r0, #11
 80029f4:	1d23      	adds	r3, r4, #4
 80029f6:	4390      	bics	r0, r2
 80029f8:	1ac2      	subs	r2, r0, r3
 80029fa:	4298      	cmp	r0, r3
 80029fc:	d0df      	beq.n	80029be <_malloc_r+0x86>
 80029fe:	1a1b      	subs	r3, r3, r0
 8002a00:	50a3      	str	r3, [r4, r2]
 8002a02:	e7dc      	b.n	80029be <_malloc_r+0x86>
 8002a04:	605a      	str	r2, [r3, #4]
 8002a06:	e7ef      	b.n	80029e8 <_malloc_r+0xb0>
 8002a08:	0023      	movs	r3, r4
 8002a0a:	6864      	ldr	r4, [r4, #4]
 8002a0c:	e7a6      	b.n	800295c <_malloc_r+0x24>
 8002a0e:	9c00      	ldr	r4, [sp, #0]
 8002a10:	6863      	ldr	r3, [r4, #4]
 8002a12:	9300      	str	r3, [sp, #0]
 8002a14:	e7ad      	b.n	8002972 <_malloc_r+0x3a>
 8002a16:	001a      	movs	r2, r3
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	42a3      	cmp	r3, r4
 8002a1c:	d1fb      	bne.n	8002a16 <_malloc_r+0xde>
 8002a1e:	2300      	movs	r3, #0
 8002a20:	e7da      	b.n	80029d8 <_malloc_r+0xa0>
 8002a22:	230c      	movs	r3, #12
 8002a24:	0028      	movs	r0, r5
 8002a26:	602b      	str	r3, [r5, #0]
 8002a28:	f000 f80e 	bl	8002a48 <__malloc_unlock>
 8002a2c:	e7c6      	b.n	80029bc <_malloc_r+0x84>
 8002a2e:	6007      	str	r7, [r0, #0]
 8002a30:	e7da      	b.n	80029e8 <_malloc_r+0xb0>
 8002a32:	46c0      	nop			@ (mov r8, r8)
 8002a34:	2000079c 	.word	0x2000079c

08002a38 <__malloc_lock>:
 8002a38:	b510      	push	{r4, lr}
 8002a3a:	4802      	ldr	r0, [pc, #8]	@ (8002a44 <__malloc_lock+0xc>)
 8002a3c:	f000 fbbd 	bl	80031ba <__retarget_lock_acquire_recursive>
 8002a40:	bd10      	pop	{r4, pc}
 8002a42:	46c0      	nop			@ (mov r8, r8)
 8002a44:	200008e0 	.word	0x200008e0

08002a48 <__malloc_unlock>:
 8002a48:	b510      	push	{r4, lr}
 8002a4a:	4802      	ldr	r0, [pc, #8]	@ (8002a54 <__malloc_unlock+0xc>)
 8002a4c:	f000 fbb6 	bl	80031bc <__retarget_lock_release_recursive>
 8002a50:	bd10      	pop	{r4, pc}
 8002a52:	46c0      	nop			@ (mov r8, r8)
 8002a54:	200008e0 	.word	0x200008e0

08002a58 <std>:
 8002a58:	2300      	movs	r3, #0
 8002a5a:	b510      	push	{r4, lr}
 8002a5c:	0004      	movs	r4, r0
 8002a5e:	6003      	str	r3, [r0, #0]
 8002a60:	6043      	str	r3, [r0, #4]
 8002a62:	6083      	str	r3, [r0, #8]
 8002a64:	8181      	strh	r1, [r0, #12]
 8002a66:	6643      	str	r3, [r0, #100]	@ 0x64
 8002a68:	81c2      	strh	r2, [r0, #14]
 8002a6a:	6103      	str	r3, [r0, #16]
 8002a6c:	6143      	str	r3, [r0, #20]
 8002a6e:	6183      	str	r3, [r0, #24]
 8002a70:	0019      	movs	r1, r3
 8002a72:	2208      	movs	r2, #8
 8002a74:	305c      	adds	r0, #92	@ 0x5c
 8002a76:	f000 fb0c 	bl	8003092 <memset>
 8002a7a:	4b0b      	ldr	r3, [pc, #44]	@ (8002aa8 <std+0x50>)
 8002a7c:	6224      	str	r4, [r4, #32]
 8002a7e:	6263      	str	r3, [r4, #36]	@ 0x24
 8002a80:	4b0a      	ldr	r3, [pc, #40]	@ (8002aac <std+0x54>)
 8002a82:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002a84:	4b0a      	ldr	r3, [pc, #40]	@ (8002ab0 <std+0x58>)
 8002a86:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002a88:	4b0a      	ldr	r3, [pc, #40]	@ (8002ab4 <std+0x5c>)
 8002a8a:	6323      	str	r3, [r4, #48]	@ 0x30
 8002a8c:	4b0a      	ldr	r3, [pc, #40]	@ (8002ab8 <std+0x60>)
 8002a8e:	429c      	cmp	r4, r3
 8002a90:	d005      	beq.n	8002a9e <std+0x46>
 8002a92:	4b0a      	ldr	r3, [pc, #40]	@ (8002abc <std+0x64>)
 8002a94:	429c      	cmp	r4, r3
 8002a96:	d002      	beq.n	8002a9e <std+0x46>
 8002a98:	4b09      	ldr	r3, [pc, #36]	@ (8002ac0 <std+0x68>)
 8002a9a:	429c      	cmp	r4, r3
 8002a9c:	d103      	bne.n	8002aa6 <std+0x4e>
 8002a9e:	0020      	movs	r0, r4
 8002aa0:	3058      	adds	r0, #88	@ 0x58
 8002aa2:	f000 fb89 	bl	80031b8 <__retarget_lock_init_recursive>
 8002aa6:	bd10      	pop	{r4, pc}
 8002aa8:	08002e95 	.word	0x08002e95
 8002aac:	08002ebd 	.word	0x08002ebd
 8002ab0:	08002ef5 	.word	0x08002ef5
 8002ab4:	08002f21 	.word	0x08002f21
 8002ab8:	200007a0 	.word	0x200007a0
 8002abc:	20000808 	.word	0x20000808
 8002ac0:	20000870 	.word	0x20000870

08002ac4 <stdio_exit_handler>:
 8002ac4:	b510      	push	{r4, lr}
 8002ac6:	4a03      	ldr	r2, [pc, #12]	@ (8002ad4 <stdio_exit_handler+0x10>)
 8002ac8:	4903      	ldr	r1, [pc, #12]	@ (8002ad8 <stdio_exit_handler+0x14>)
 8002aca:	4804      	ldr	r0, [pc, #16]	@ (8002adc <stdio_exit_handler+0x18>)
 8002acc:	f000 f86c 	bl	8002ba8 <_fwalk_sglue>
 8002ad0:	bd10      	pop	{r4, pc}
 8002ad2:	46c0      	nop			@ (mov r8, r8)
 8002ad4:	20000010 	.word	0x20000010
 8002ad8:	08003bb1 	.word	0x08003bb1
 8002adc:	20000020 	.word	0x20000020

08002ae0 <cleanup_stdio>:
 8002ae0:	6841      	ldr	r1, [r0, #4]
 8002ae2:	4b0b      	ldr	r3, [pc, #44]	@ (8002b10 <cleanup_stdio+0x30>)
 8002ae4:	b510      	push	{r4, lr}
 8002ae6:	0004      	movs	r4, r0
 8002ae8:	4299      	cmp	r1, r3
 8002aea:	d001      	beq.n	8002af0 <cleanup_stdio+0x10>
 8002aec:	f001 f860 	bl	8003bb0 <_fflush_r>
 8002af0:	68a1      	ldr	r1, [r4, #8]
 8002af2:	4b08      	ldr	r3, [pc, #32]	@ (8002b14 <cleanup_stdio+0x34>)
 8002af4:	4299      	cmp	r1, r3
 8002af6:	d002      	beq.n	8002afe <cleanup_stdio+0x1e>
 8002af8:	0020      	movs	r0, r4
 8002afa:	f001 f859 	bl	8003bb0 <_fflush_r>
 8002afe:	68e1      	ldr	r1, [r4, #12]
 8002b00:	4b05      	ldr	r3, [pc, #20]	@ (8002b18 <cleanup_stdio+0x38>)
 8002b02:	4299      	cmp	r1, r3
 8002b04:	d002      	beq.n	8002b0c <cleanup_stdio+0x2c>
 8002b06:	0020      	movs	r0, r4
 8002b08:	f001 f852 	bl	8003bb0 <_fflush_r>
 8002b0c:	bd10      	pop	{r4, pc}
 8002b0e:	46c0      	nop			@ (mov r8, r8)
 8002b10:	200007a0 	.word	0x200007a0
 8002b14:	20000808 	.word	0x20000808
 8002b18:	20000870 	.word	0x20000870

08002b1c <global_stdio_init.part.0>:
 8002b1c:	b510      	push	{r4, lr}
 8002b1e:	4b09      	ldr	r3, [pc, #36]	@ (8002b44 <global_stdio_init.part.0+0x28>)
 8002b20:	4a09      	ldr	r2, [pc, #36]	@ (8002b48 <global_stdio_init.part.0+0x2c>)
 8002b22:	2104      	movs	r1, #4
 8002b24:	601a      	str	r2, [r3, #0]
 8002b26:	4809      	ldr	r0, [pc, #36]	@ (8002b4c <global_stdio_init.part.0+0x30>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f7ff ff95 	bl	8002a58 <std>
 8002b2e:	2201      	movs	r2, #1
 8002b30:	2109      	movs	r1, #9
 8002b32:	4807      	ldr	r0, [pc, #28]	@ (8002b50 <global_stdio_init.part.0+0x34>)
 8002b34:	f7ff ff90 	bl	8002a58 <std>
 8002b38:	2202      	movs	r2, #2
 8002b3a:	2112      	movs	r1, #18
 8002b3c:	4805      	ldr	r0, [pc, #20]	@ (8002b54 <global_stdio_init.part.0+0x38>)
 8002b3e:	f7ff ff8b 	bl	8002a58 <std>
 8002b42:	bd10      	pop	{r4, pc}
 8002b44:	200008d8 	.word	0x200008d8
 8002b48:	08002ac5 	.word	0x08002ac5
 8002b4c:	200007a0 	.word	0x200007a0
 8002b50:	20000808 	.word	0x20000808
 8002b54:	20000870 	.word	0x20000870

08002b58 <__sfp_lock_acquire>:
 8002b58:	b510      	push	{r4, lr}
 8002b5a:	4802      	ldr	r0, [pc, #8]	@ (8002b64 <__sfp_lock_acquire+0xc>)
 8002b5c:	f000 fb2d 	bl	80031ba <__retarget_lock_acquire_recursive>
 8002b60:	bd10      	pop	{r4, pc}
 8002b62:	46c0      	nop			@ (mov r8, r8)
 8002b64:	200008e1 	.word	0x200008e1

08002b68 <__sfp_lock_release>:
 8002b68:	b510      	push	{r4, lr}
 8002b6a:	4802      	ldr	r0, [pc, #8]	@ (8002b74 <__sfp_lock_release+0xc>)
 8002b6c:	f000 fb26 	bl	80031bc <__retarget_lock_release_recursive>
 8002b70:	bd10      	pop	{r4, pc}
 8002b72:	46c0      	nop			@ (mov r8, r8)
 8002b74:	200008e1 	.word	0x200008e1

08002b78 <__sinit>:
 8002b78:	b510      	push	{r4, lr}
 8002b7a:	0004      	movs	r4, r0
 8002b7c:	f7ff ffec 	bl	8002b58 <__sfp_lock_acquire>
 8002b80:	6a23      	ldr	r3, [r4, #32]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d002      	beq.n	8002b8c <__sinit+0x14>
 8002b86:	f7ff ffef 	bl	8002b68 <__sfp_lock_release>
 8002b8a:	bd10      	pop	{r4, pc}
 8002b8c:	4b04      	ldr	r3, [pc, #16]	@ (8002ba0 <__sinit+0x28>)
 8002b8e:	6223      	str	r3, [r4, #32]
 8002b90:	4b04      	ldr	r3, [pc, #16]	@ (8002ba4 <__sinit+0x2c>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d1f6      	bne.n	8002b86 <__sinit+0xe>
 8002b98:	f7ff ffc0 	bl	8002b1c <global_stdio_init.part.0>
 8002b9c:	e7f3      	b.n	8002b86 <__sinit+0xe>
 8002b9e:	46c0      	nop			@ (mov r8, r8)
 8002ba0:	08002ae1 	.word	0x08002ae1
 8002ba4:	200008d8 	.word	0x200008d8

08002ba8 <_fwalk_sglue>:
 8002ba8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002baa:	0014      	movs	r4, r2
 8002bac:	2600      	movs	r6, #0
 8002bae:	9000      	str	r0, [sp, #0]
 8002bb0:	9101      	str	r1, [sp, #4]
 8002bb2:	68a5      	ldr	r5, [r4, #8]
 8002bb4:	6867      	ldr	r7, [r4, #4]
 8002bb6:	3f01      	subs	r7, #1
 8002bb8:	d504      	bpl.n	8002bc4 <_fwalk_sglue+0x1c>
 8002bba:	6824      	ldr	r4, [r4, #0]
 8002bbc:	2c00      	cmp	r4, #0
 8002bbe:	d1f8      	bne.n	8002bb2 <_fwalk_sglue+0xa>
 8002bc0:	0030      	movs	r0, r6
 8002bc2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002bc4:	89ab      	ldrh	r3, [r5, #12]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d908      	bls.n	8002bdc <_fwalk_sglue+0x34>
 8002bca:	220e      	movs	r2, #14
 8002bcc:	5eab      	ldrsh	r3, [r5, r2]
 8002bce:	3301      	adds	r3, #1
 8002bd0:	d004      	beq.n	8002bdc <_fwalk_sglue+0x34>
 8002bd2:	0029      	movs	r1, r5
 8002bd4:	9800      	ldr	r0, [sp, #0]
 8002bd6:	9b01      	ldr	r3, [sp, #4]
 8002bd8:	4798      	blx	r3
 8002bda:	4306      	orrs	r6, r0
 8002bdc:	3568      	adds	r5, #104	@ 0x68
 8002bde:	e7ea      	b.n	8002bb6 <_fwalk_sglue+0xe>

08002be0 <iprintf>:
 8002be0:	b40f      	push	{r0, r1, r2, r3}
 8002be2:	b507      	push	{r0, r1, r2, lr}
 8002be4:	4905      	ldr	r1, [pc, #20]	@ (8002bfc <iprintf+0x1c>)
 8002be6:	ab04      	add	r3, sp, #16
 8002be8:	6808      	ldr	r0, [r1, #0]
 8002bea:	cb04      	ldmia	r3!, {r2}
 8002bec:	6881      	ldr	r1, [r0, #8]
 8002bee:	9301      	str	r3, [sp, #4]
 8002bf0:	f000 fcbe 	bl	8003570 <_vfiprintf_r>
 8002bf4:	b003      	add	sp, #12
 8002bf6:	bc08      	pop	{r3}
 8002bf8:	b004      	add	sp, #16
 8002bfa:	4718      	bx	r3
 8002bfc:	2000001c 	.word	0x2000001c

08002c00 <_puts_r>:
 8002c00:	6a03      	ldr	r3, [r0, #32]
 8002c02:	b570      	push	{r4, r5, r6, lr}
 8002c04:	0005      	movs	r5, r0
 8002c06:	000e      	movs	r6, r1
 8002c08:	6884      	ldr	r4, [r0, #8]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d101      	bne.n	8002c12 <_puts_r+0x12>
 8002c0e:	f7ff ffb3 	bl	8002b78 <__sinit>
 8002c12:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002c14:	07db      	lsls	r3, r3, #31
 8002c16:	d405      	bmi.n	8002c24 <_puts_r+0x24>
 8002c18:	89a3      	ldrh	r3, [r4, #12]
 8002c1a:	059b      	lsls	r3, r3, #22
 8002c1c:	d402      	bmi.n	8002c24 <_puts_r+0x24>
 8002c1e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002c20:	f000 facb 	bl	80031ba <__retarget_lock_acquire_recursive>
 8002c24:	89a3      	ldrh	r3, [r4, #12]
 8002c26:	071b      	lsls	r3, r3, #28
 8002c28:	d502      	bpl.n	8002c30 <_puts_r+0x30>
 8002c2a:	6923      	ldr	r3, [r4, #16]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d11f      	bne.n	8002c70 <_puts_r+0x70>
 8002c30:	0021      	movs	r1, r4
 8002c32:	0028      	movs	r0, r5
 8002c34:	f000 f9bc 	bl	8002fb0 <__swsetup_r>
 8002c38:	2800      	cmp	r0, #0
 8002c3a:	d019      	beq.n	8002c70 <_puts_r+0x70>
 8002c3c:	2501      	movs	r5, #1
 8002c3e:	426d      	negs	r5, r5
 8002c40:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002c42:	07db      	lsls	r3, r3, #31
 8002c44:	d405      	bmi.n	8002c52 <_puts_r+0x52>
 8002c46:	89a3      	ldrh	r3, [r4, #12]
 8002c48:	059b      	lsls	r3, r3, #22
 8002c4a:	d402      	bmi.n	8002c52 <_puts_r+0x52>
 8002c4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002c4e:	f000 fab5 	bl	80031bc <__retarget_lock_release_recursive>
 8002c52:	0028      	movs	r0, r5
 8002c54:	bd70      	pop	{r4, r5, r6, pc}
 8002c56:	3601      	adds	r6, #1
 8002c58:	60a3      	str	r3, [r4, #8]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	da04      	bge.n	8002c68 <_puts_r+0x68>
 8002c5e:	69a2      	ldr	r2, [r4, #24]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	dc16      	bgt.n	8002c92 <_puts_r+0x92>
 8002c64:	290a      	cmp	r1, #10
 8002c66:	d014      	beq.n	8002c92 <_puts_r+0x92>
 8002c68:	6823      	ldr	r3, [r4, #0]
 8002c6a:	1c5a      	adds	r2, r3, #1
 8002c6c:	6022      	str	r2, [r4, #0]
 8002c6e:	7019      	strb	r1, [r3, #0]
 8002c70:	68a3      	ldr	r3, [r4, #8]
 8002c72:	7831      	ldrb	r1, [r6, #0]
 8002c74:	3b01      	subs	r3, #1
 8002c76:	2900      	cmp	r1, #0
 8002c78:	d1ed      	bne.n	8002c56 <_puts_r+0x56>
 8002c7a:	60a3      	str	r3, [r4, #8]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	da0f      	bge.n	8002ca0 <_puts_r+0xa0>
 8002c80:	0022      	movs	r2, r4
 8002c82:	0028      	movs	r0, r5
 8002c84:	310a      	adds	r1, #10
 8002c86:	f000 f951 	bl	8002f2c <__swbuf_r>
 8002c8a:	3001      	adds	r0, #1
 8002c8c:	d0d6      	beq.n	8002c3c <_puts_r+0x3c>
 8002c8e:	250a      	movs	r5, #10
 8002c90:	e7d6      	b.n	8002c40 <_puts_r+0x40>
 8002c92:	0022      	movs	r2, r4
 8002c94:	0028      	movs	r0, r5
 8002c96:	f000 f949 	bl	8002f2c <__swbuf_r>
 8002c9a:	3001      	adds	r0, #1
 8002c9c:	d1e8      	bne.n	8002c70 <_puts_r+0x70>
 8002c9e:	e7cd      	b.n	8002c3c <_puts_r+0x3c>
 8002ca0:	6823      	ldr	r3, [r4, #0]
 8002ca2:	1c5a      	adds	r2, r3, #1
 8002ca4:	6022      	str	r2, [r4, #0]
 8002ca6:	220a      	movs	r2, #10
 8002ca8:	701a      	strb	r2, [r3, #0]
 8002caa:	e7f0      	b.n	8002c8e <_puts_r+0x8e>

08002cac <puts>:
 8002cac:	b510      	push	{r4, lr}
 8002cae:	4b03      	ldr	r3, [pc, #12]	@ (8002cbc <puts+0x10>)
 8002cb0:	0001      	movs	r1, r0
 8002cb2:	6818      	ldr	r0, [r3, #0]
 8002cb4:	f7ff ffa4 	bl	8002c00 <_puts_r>
 8002cb8:	bd10      	pop	{r4, pc}
 8002cba:	46c0      	nop			@ (mov r8, r8)
 8002cbc:	2000001c 	.word	0x2000001c

08002cc0 <setvbuf>:
 8002cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cc2:	001d      	movs	r5, r3
 8002cc4:	4b57      	ldr	r3, [pc, #348]	@ (8002e24 <setvbuf+0x164>)
 8002cc6:	b085      	sub	sp, #20
 8002cc8:	681e      	ldr	r6, [r3, #0]
 8002cca:	0004      	movs	r4, r0
 8002ccc:	000f      	movs	r7, r1
 8002cce:	9200      	str	r2, [sp, #0]
 8002cd0:	2e00      	cmp	r6, #0
 8002cd2:	d005      	beq.n	8002ce0 <setvbuf+0x20>
 8002cd4:	6a33      	ldr	r3, [r6, #32]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d102      	bne.n	8002ce0 <setvbuf+0x20>
 8002cda:	0030      	movs	r0, r6
 8002cdc:	f7ff ff4c 	bl	8002b78 <__sinit>
 8002ce0:	9b00      	ldr	r3, [sp, #0]
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d005      	beq.n	8002cf2 <setvbuf+0x32>
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d900      	bls.n	8002cec <setvbuf+0x2c>
 8002cea:	e097      	b.n	8002e1c <setvbuf+0x15c>
 8002cec:	2d00      	cmp	r5, #0
 8002cee:	da00      	bge.n	8002cf2 <setvbuf+0x32>
 8002cf0:	e094      	b.n	8002e1c <setvbuf+0x15c>
 8002cf2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002cf4:	07db      	lsls	r3, r3, #31
 8002cf6:	d405      	bmi.n	8002d04 <setvbuf+0x44>
 8002cf8:	89a3      	ldrh	r3, [r4, #12]
 8002cfa:	059b      	lsls	r3, r3, #22
 8002cfc:	d402      	bmi.n	8002d04 <setvbuf+0x44>
 8002cfe:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002d00:	f000 fa5b 	bl	80031ba <__retarget_lock_acquire_recursive>
 8002d04:	0021      	movs	r1, r4
 8002d06:	0030      	movs	r0, r6
 8002d08:	f000 ff52 	bl	8003bb0 <_fflush_r>
 8002d0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002d0e:	2900      	cmp	r1, #0
 8002d10:	d008      	beq.n	8002d24 <setvbuf+0x64>
 8002d12:	0023      	movs	r3, r4
 8002d14:	3344      	adds	r3, #68	@ 0x44
 8002d16:	4299      	cmp	r1, r3
 8002d18:	d002      	beq.n	8002d20 <setvbuf+0x60>
 8002d1a:	0030      	movs	r0, r6
 8002d1c:	f000 fa58 	bl	80031d0 <_free_r>
 8002d20:	2300      	movs	r3, #0
 8002d22:	6363      	str	r3, [r4, #52]	@ 0x34
 8002d24:	2300      	movs	r3, #0
 8002d26:	61a3      	str	r3, [r4, #24]
 8002d28:	6063      	str	r3, [r4, #4]
 8002d2a:	89a3      	ldrh	r3, [r4, #12]
 8002d2c:	061b      	lsls	r3, r3, #24
 8002d2e:	d503      	bpl.n	8002d38 <setvbuf+0x78>
 8002d30:	0030      	movs	r0, r6
 8002d32:	6921      	ldr	r1, [r4, #16]
 8002d34:	f000 fa4c 	bl	80031d0 <_free_r>
 8002d38:	89a3      	ldrh	r3, [r4, #12]
 8002d3a:	4a3b      	ldr	r2, [pc, #236]	@ (8002e28 <setvbuf+0x168>)
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	81a3      	strh	r3, [r4, #12]
 8002d40:	9b00      	ldr	r3, [sp, #0]
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d060      	beq.n	8002e08 <setvbuf+0x148>
 8002d46:	ab03      	add	r3, sp, #12
 8002d48:	0021      	movs	r1, r4
 8002d4a:	0030      	movs	r0, r6
 8002d4c:	aa02      	add	r2, sp, #8
 8002d4e:	f000 ff5b 	bl	8003c08 <__swhatbuf_r>
 8002d52:	89a3      	ldrh	r3, [r4, #12]
 8002d54:	4303      	orrs	r3, r0
 8002d56:	81a3      	strh	r3, [r4, #12]
 8002d58:	2d00      	cmp	r5, #0
 8002d5a:	d124      	bne.n	8002da6 <setvbuf+0xe6>
 8002d5c:	9d02      	ldr	r5, [sp, #8]
 8002d5e:	0028      	movs	r0, r5
 8002d60:	f7ff fdbe 	bl	80028e0 <malloc>
 8002d64:	9501      	str	r5, [sp, #4]
 8002d66:	1e07      	subs	r7, r0, #0
 8002d68:	d148      	bne.n	8002dfc <setvbuf+0x13c>
 8002d6a:	9b02      	ldr	r3, [sp, #8]
 8002d6c:	9301      	str	r3, [sp, #4]
 8002d6e:	42ab      	cmp	r3, r5
 8002d70:	d13f      	bne.n	8002df2 <setvbuf+0x132>
 8002d72:	2501      	movs	r5, #1
 8002d74:	426d      	negs	r5, r5
 8002d76:	220c      	movs	r2, #12
 8002d78:	5ea3      	ldrsh	r3, [r4, r2]
 8002d7a:	2202      	movs	r2, #2
 8002d7c:	431a      	orrs	r2, r3
 8002d7e:	81a2      	strh	r2, [r4, #12]
 8002d80:	2200      	movs	r2, #0
 8002d82:	60a2      	str	r2, [r4, #8]
 8002d84:	0022      	movs	r2, r4
 8002d86:	3247      	adds	r2, #71	@ 0x47
 8002d88:	6022      	str	r2, [r4, #0]
 8002d8a:	6122      	str	r2, [r4, #16]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 8002d90:	6162      	str	r2, [r4, #20]
 8002d92:	4211      	tst	r1, r2
 8002d94:	d104      	bne.n	8002da0 <setvbuf+0xe0>
 8002d96:	059b      	lsls	r3, r3, #22
 8002d98:	d402      	bmi.n	8002da0 <setvbuf+0xe0>
 8002d9a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002d9c:	f000 fa0e 	bl	80031bc <__retarget_lock_release_recursive>
 8002da0:	0028      	movs	r0, r5
 8002da2:	b005      	add	sp, #20
 8002da4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002da6:	2f00      	cmp	r7, #0
 8002da8:	d0d9      	beq.n	8002d5e <setvbuf+0x9e>
 8002daa:	6a33      	ldr	r3, [r6, #32]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d102      	bne.n	8002db6 <setvbuf+0xf6>
 8002db0:	0030      	movs	r0, r6
 8002db2:	f7ff fee1 	bl	8002b78 <__sinit>
 8002db6:	9b00      	ldr	r3, [sp, #0]
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d103      	bne.n	8002dc4 <setvbuf+0x104>
 8002dbc:	89a3      	ldrh	r3, [r4, #12]
 8002dbe:	9a00      	ldr	r2, [sp, #0]
 8002dc0:	431a      	orrs	r2, r3
 8002dc2:	81a2      	strh	r2, [r4, #12]
 8002dc4:	220c      	movs	r2, #12
 8002dc6:	5ea3      	ldrsh	r3, [r4, r2]
 8002dc8:	2208      	movs	r2, #8
 8002dca:	0019      	movs	r1, r3
 8002dcc:	6027      	str	r7, [r4, #0]
 8002dce:	6127      	str	r7, [r4, #16]
 8002dd0:	6165      	str	r5, [r4, #20]
 8002dd2:	4011      	ands	r1, r2
 8002dd4:	4213      	tst	r3, r2
 8002dd6:	d01b      	beq.n	8002e10 <setvbuf+0x150>
 8002dd8:	07da      	lsls	r2, r3, #31
 8002dda:	d517      	bpl.n	8002e0c <setvbuf+0x14c>
 8002ddc:	2200      	movs	r2, #0
 8002dde:	426d      	negs	r5, r5
 8002de0:	60a2      	str	r2, [r4, #8]
 8002de2:	61a5      	str	r5, [r4, #24]
 8002de4:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002de6:	07d2      	lsls	r2, r2, #31
 8002de8:	d401      	bmi.n	8002dee <setvbuf+0x12e>
 8002dea:	059b      	lsls	r3, r3, #22
 8002dec:	d512      	bpl.n	8002e14 <setvbuf+0x154>
 8002dee:	2500      	movs	r5, #0
 8002df0:	e7d6      	b.n	8002da0 <setvbuf+0xe0>
 8002df2:	9801      	ldr	r0, [sp, #4]
 8002df4:	f7ff fd74 	bl	80028e0 <malloc>
 8002df8:	1e07      	subs	r7, r0, #0
 8002dfa:	d0ba      	beq.n	8002d72 <setvbuf+0xb2>
 8002dfc:	2380      	movs	r3, #128	@ 0x80
 8002dfe:	89a2      	ldrh	r2, [r4, #12]
 8002e00:	9d01      	ldr	r5, [sp, #4]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	81a3      	strh	r3, [r4, #12]
 8002e06:	e7d0      	b.n	8002daa <setvbuf+0xea>
 8002e08:	2500      	movs	r5, #0
 8002e0a:	e7b4      	b.n	8002d76 <setvbuf+0xb6>
 8002e0c:	60a5      	str	r5, [r4, #8]
 8002e0e:	e7e9      	b.n	8002de4 <setvbuf+0x124>
 8002e10:	60a1      	str	r1, [r4, #8]
 8002e12:	e7e7      	b.n	8002de4 <setvbuf+0x124>
 8002e14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002e16:	f000 f9d1 	bl	80031bc <__retarget_lock_release_recursive>
 8002e1a:	e7e8      	b.n	8002dee <setvbuf+0x12e>
 8002e1c:	2501      	movs	r5, #1
 8002e1e:	426d      	negs	r5, r5
 8002e20:	e7be      	b.n	8002da0 <setvbuf+0xe0>
 8002e22:	46c0      	nop			@ (mov r8, r8)
 8002e24:	2000001c 	.word	0x2000001c
 8002e28:	fffff35c 	.word	0xfffff35c

08002e2c <sniprintf>:
 8002e2c:	b40c      	push	{r2, r3}
 8002e2e:	b530      	push	{r4, r5, lr}
 8002e30:	4b17      	ldr	r3, [pc, #92]	@ (8002e90 <sniprintf+0x64>)
 8002e32:	000c      	movs	r4, r1
 8002e34:	681d      	ldr	r5, [r3, #0]
 8002e36:	b09d      	sub	sp, #116	@ 0x74
 8002e38:	2900      	cmp	r1, #0
 8002e3a:	da08      	bge.n	8002e4e <sniprintf+0x22>
 8002e3c:	238b      	movs	r3, #139	@ 0x8b
 8002e3e:	2001      	movs	r0, #1
 8002e40:	602b      	str	r3, [r5, #0]
 8002e42:	4240      	negs	r0, r0
 8002e44:	b01d      	add	sp, #116	@ 0x74
 8002e46:	bc30      	pop	{r4, r5}
 8002e48:	bc08      	pop	{r3}
 8002e4a:	b002      	add	sp, #8
 8002e4c:	4718      	bx	r3
 8002e4e:	2382      	movs	r3, #130	@ 0x82
 8002e50:	466a      	mov	r2, sp
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	8293      	strh	r3, [r2, #20]
 8002e56:	2300      	movs	r3, #0
 8002e58:	9002      	str	r0, [sp, #8]
 8002e5a:	9006      	str	r0, [sp, #24]
 8002e5c:	4299      	cmp	r1, r3
 8002e5e:	d000      	beq.n	8002e62 <sniprintf+0x36>
 8002e60:	1e4b      	subs	r3, r1, #1
 8002e62:	9304      	str	r3, [sp, #16]
 8002e64:	9307      	str	r3, [sp, #28]
 8002e66:	2301      	movs	r3, #1
 8002e68:	466a      	mov	r2, sp
 8002e6a:	425b      	negs	r3, r3
 8002e6c:	82d3      	strh	r3, [r2, #22]
 8002e6e:	0028      	movs	r0, r5
 8002e70:	ab21      	add	r3, sp, #132	@ 0x84
 8002e72:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8002e74:	a902      	add	r1, sp, #8
 8002e76:	9301      	str	r3, [sp, #4]
 8002e78:	f000 fa54 	bl	8003324 <_svfiprintf_r>
 8002e7c:	1c43      	adds	r3, r0, #1
 8002e7e:	da01      	bge.n	8002e84 <sniprintf+0x58>
 8002e80:	238b      	movs	r3, #139	@ 0x8b
 8002e82:	602b      	str	r3, [r5, #0]
 8002e84:	2c00      	cmp	r4, #0
 8002e86:	d0dd      	beq.n	8002e44 <sniprintf+0x18>
 8002e88:	2200      	movs	r2, #0
 8002e8a:	9b02      	ldr	r3, [sp, #8]
 8002e8c:	701a      	strb	r2, [r3, #0]
 8002e8e:	e7d9      	b.n	8002e44 <sniprintf+0x18>
 8002e90:	2000001c 	.word	0x2000001c

08002e94 <__sread>:
 8002e94:	b570      	push	{r4, r5, r6, lr}
 8002e96:	000c      	movs	r4, r1
 8002e98:	250e      	movs	r5, #14
 8002e9a:	5f49      	ldrsh	r1, [r1, r5]
 8002e9c:	f000 f928 	bl	80030f0 <_read_r>
 8002ea0:	2800      	cmp	r0, #0
 8002ea2:	db03      	blt.n	8002eac <__sread+0x18>
 8002ea4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002ea6:	181b      	adds	r3, r3, r0
 8002ea8:	6563      	str	r3, [r4, #84]	@ 0x54
 8002eaa:	bd70      	pop	{r4, r5, r6, pc}
 8002eac:	89a3      	ldrh	r3, [r4, #12]
 8002eae:	4a02      	ldr	r2, [pc, #8]	@ (8002eb8 <__sread+0x24>)
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	81a3      	strh	r3, [r4, #12]
 8002eb4:	e7f9      	b.n	8002eaa <__sread+0x16>
 8002eb6:	46c0      	nop			@ (mov r8, r8)
 8002eb8:	ffffefff 	.word	0xffffefff

08002ebc <__swrite>:
 8002ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ebe:	001f      	movs	r7, r3
 8002ec0:	898b      	ldrh	r3, [r1, #12]
 8002ec2:	0005      	movs	r5, r0
 8002ec4:	000c      	movs	r4, r1
 8002ec6:	0016      	movs	r6, r2
 8002ec8:	05db      	lsls	r3, r3, #23
 8002eca:	d505      	bpl.n	8002ed8 <__swrite+0x1c>
 8002ecc:	230e      	movs	r3, #14
 8002ece:	5ec9      	ldrsh	r1, [r1, r3]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	2302      	movs	r3, #2
 8002ed4:	f000 f8f8 	bl	80030c8 <_lseek_r>
 8002ed8:	89a3      	ldrh	r3, [r4, #12]
 8002eda:	4a05      	ldr	r2, [pc, #20]	@ (8002ef0 <__swrite+0x34>)
 8002edc:	0028      	movs	r0, r5
 8002ede:	4013      	ands	r3, r2
 8002ee0:	81a3      	strh	r3, [r4, #12]
 8002ee2:	0032      	movs	r2, r6
 8002ee4:	230e      	movs	r3, #14
 8002ee6:	5ee1      	ldrsh	r1, [r4, r3]
 8002ee8:	003b      	movs	r3, r7
 8002eea:	f000 f927 	bl	800313c <_write_r>
 8002eee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ef0:	ffffefff 	.word	0xffffefff

08002ef4 <__sseek>:
 8002ef4:	b570      	push	{r4, r5, r6, lr}
 8002ef6:	000c      	movs	r4, r1
 8002ef8:	250e      	movs	r5, #14
 8002efa:	5f49      	ldrsh	r1, [r1, r5]
 8002efc:	f000 f8e4 	bl	80030c8 <_lseek_r>
 8002f00:	89a3      	ldrh	r3, [r4, #12]
 8002f02:	1c42      	adds	r2, r0, #1
 8002f04:	d103      	bne.n	8002f0e <__sseek+0x1a>
 8002f06:	4a05      	ldr	r2, [pc, #20]	@ (8002f1c <__sseek+0x28>)
 8002f08:	4013      	ands	r3, r2
 8002f0a:	81a3      	strh	r3, [r4, #12]
 8002f0c:	bd70      	pop	{r4, r5, r6, pc}
 8002f0e:	2280      	movs	r2, #128	@ 0x80
 8002f10:	0152      	lsls	r2, r2, #5
 8002f12:	4313      	orrs	r3, r2
 8002f14:	81a3      	strh	r3, [r4, #12]
 8002f16:	6560      	str	r0, [r4, #84]	@ 0x54
 8002f18:	e7f8      	b.n	8002f0c <__sseek+0x18>
 8002f1a:	46c0      	nop			@ (mov r8, r8)
 8002f1c:	ffffefff 	.word	0xffffefff

08002f20 <__sclose>:
 8002f20:	b510      	push	{r4, lr}
 8002f22:	230e      	movs	r3, #14
 8002f24:	5ec9      	ldrsh	r1, [r1, r3]
 8002f26:	f000 f8bd 	bl	80030a4 <_close_r>
 8002f2a:	bd10      	pop	{r4, pc}

08002f2c <__swbuf_r>:
 8002f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f2e:	0006      	movs	r6, r0
 8002f30:	000d      	movs	r5, r1
 8002f32:	0014      	movs	r4, r2
 8002f34:	2800      	cmp	r0, #0
 8002f36:	d004      	beq.n	8002f42 <__swbuf_r+0x16>
 8002f38:	6a03      	ldr	r3, [r0, #32]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d101      	bne.n	8002f42 <__swbuf_r+0x16>
 8002f3e:	f7ff fe1b 	bl	8002b78 <__sinit>
 8002f42:	69a3      	ldr	r3, [r4, #24]
 8002f44:	60a3      	str	r3, [r4, #8]
 8002f46:	89a3      	ldrh	r3, [r4, #12]
 8002f48:	071b      	lsls	r3, r3, #28
 8002f4a:	d502      	bpl.n	8002f52 <__swbuf_r+0x26>
 8002f4c:	6923      	ldr	r3, [r4, #16]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d109      	bne.n	8002f66 <__swbuf_r+0x3a>
 8002f52:	0021      	movs	r1, r4
 8002f54:	0030      	movs	r0, r6
 8002f56:	f000 f82b 	bl	8002fb0 <__swsetup_r>
 8002f5a:	2800      	cmp	r0, #0
 8002f5c:	d003      	beq.n	8002f66 <__swbuf_r+0x3a>
 8002f5e:	2501      	movs	r5, #1
 8002f60:	426d      	negs	r5, r5
 8002f62:	0028      	movs	r0, r5
 8002f64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f66:	6923      	ldr	r3, [r4, #16]
 8002f68:	6820      	ldr	r0, [r4, #0]
 8002f6a:	b2ef      	uxtb	r7, r5
 8002f6c:	1ac0      	subs	r0, r0, r3
 8002f6e:	6963      	ldr	r3, [r4, #20]
 8002f70:	b2ed      	uxtb	r5, r5
 8002f72:	4283      	cmp	r3, r0
 8002f74:	dc05      	bgt.n	8002f82 <__swbuf_r+0x56>
 8002f76:	0021      	movs	r1, r4
 8002f78:	0030      	movs	r0, r6
 8002f7a:	f000 fe19 	bl	8003bb0 <_fflush_r>
 8002f7e:	2800      	cmp	r0, #0
 8002f80:	d1ed      	bne.n	8002f5e <__swbuf_r+0x32>
 8002f82:	68a3      	ldr	r3, [r4, #8]
 8002f84:	3001      	adds	r0, #1
 8002f86:	3b01      	subs	r3, #1
 8002f88:	60a3      	str	r3, [r4, #8]
 8002f8a:	6823      	ldr	r3, [r4, #0]
 8002f8c:	1c5a      	adds	r2, r3, #1
 8002f8e:	6022      	str	r2, [r4, #0]
 8002f90:	701f      	strb	r7, [r3, #0]
 8002f92:	6963      	ldr	r3, [r4, #20]
 8002f94:	4283      	cmp	r3, r0
 8002f96:	d004      	beq.n	8002fa2 <__swbuf_r+0x76>
 8002f98:	89a3      	ldrh	r3, [r4, #12]
 8002f9a:	07db      	lsls	r3, r3, #31
 8002f9c:	d5e1      	bpl.n	8002f62 <__swbuf_r+0x36>
 8002f9e:	2d0a      	cmp	r5, #10
 8002fa0:	d1df      	bne.n	8002f62 <__swbuf_r+0x36>
 8002fa2:	0021      	movs	r1, r4
 8002fa4:	0030      	movs	r0, r6
 8002fa6:	f000 fe03 	bl	8003bb0 <_fflush_r>
 8002faa:	2800      	cmp	r0, #0
 8002fac:	d0d9      	beq.n	8002f62 <__swbuf_r+0x36>
 8002fae:	e7d6      	b.n	8002f5e <__swbuf_r+0x32>

08002fb0 <__swsetup_r>:
 8002fb0:	4b2d      	ldr	r3, [pc, #180]	@ (8003068 <__swsetup_r+0xb8>)
 8002fb2:	b570      	push	{r4, r5, r6, lr}
 8002fb4:	0005      	movs	r5, r0
 8002fb6:	6818      	ldr	r0, [r3, #0]
 8002fb8:	000c      	movs	r4, r1
 8002fba:	2800      	cmp	r0, #0
 8002fbc:	d004      	beq.n	8002fc8 <__swsetup_r+0x18>
 8002fbe:	6a03      	ldr	r3, [r0, #32]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d101      	bne.n	8002fc8 <__swsetup_r+0x18>
 8002fc4:	f7ff fdd8 	bl	8002b78 <__sinit>
 8002fc8:	230c      	movs	r3, #12
 8002fca:	5ee2      	ldrsh	r2, [r4, r3]
 8002fcc:	0713      	lsls	r3, r2, #28
 8002fce:	d423      	bmi.n	8003018 <__swsetup_r+0x68>
 8002fd0:	06d3      	lsls	r3, r2, #27
 8002fd2:	d407      	bmi.n	8002fe4 <__swsetup_r+0x34>
 8002fd4:	2309      	movs	r3, #9
 8002fd6:	602b      	str	r3, [r5, #0]
 8002fd8:	2340      	movs	r3, #64	@ 0x40
 8002fda:	2001      	movs	r0, #1
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	81a3      	strh	r3, [r4, #12]
 8002fe0:	4240      	negs	r0, r0
 8002fe2:	e03a      	b.n	800305a <__swsetup_r+0xaa>
 8002fe4:	0752      	lsls	r2, r2, #29
 8002fe6:	d513      	bpl.n	8003010 <__swsetup_r+0x60>
 8002fe8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002fea:	2900      	cmp	r1, #0
 8002fec:	d008      	beq.n	8003000 <__swsetup_r+0x50>
 8002fee:	0023      	movs	r3, r4
 8002ff0:	3344      	adds	r3, #68	@ 0x44
 8002ff2:	4299      	cmp	r1, r3
 8002ff4:	d002      	beq.n	8002ffc <__swsetup_r+0x4c>
 8002ff6:	0028      	movs	r0, r5
 8002ff8:	f000 f8ea 	bl	80031d0 <_free_r>
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	6363      	str	r3, [r4, #52]	@ 0x34
 8003000:	2224      	movs	r2, #36	@ 0x24
 8003002:	89a3      	ldrh	r3, [r4, #12]
 8003004:	4393      	bics	r3, r2
 8003006:	81a3      	strh	r3, [r4, #12]
 8003008:	2300      	movs	r3, #0
 800300a:	6063      	str	r3, [r4, #4]
 800300c:	6923      	ldr	r3, [r4, #16]
 800300e:	6023      	str	r3, [r4, #0]
 8003010:	2308      	movs	r3, #8
 8003012:	89a2      	ldrh	r2, [r4, #12]
 8003014:	4313      	orrs	r3, r2
 8003016:	81a3      	strh	r3, [r4, #12]
 8003018:	6923      	ldr	r3, [r4, #16]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d10b      	bne.n	8003036 <__swsetup_r+0x86>
 800301e:	21a0      	movs	r1, #160	@ 0xa0
 8003020:	2280      	movs	r2, #128	@ 0x80
 8003022:	89a3      	ldrh	r3, [r4, #12]
 8003024:	0089      	lsls	r1, r1, #2
 8003026:	0092      	lsls	r2, r2, #2
 8003028:	400b      	ands	r3, r1
 800302a:	4293      	cmp	r3, r2
 800302c:	d003      	beq.n	8003036 <__swsetup_r+0x86>
 800302e:	0021      	movs	r1, r4
 8003030:	0028      	movs	r0, r5
 8003032:	f000 fe13 	bl	8003c5c <__smakebuf_r>
 8003036:	230c      	movs	r3, #12
 8003038:	5ee2      	ldrsh	r2, [r4, r3]
 800303a:	2101      	movs	r1, #1
 800303c:	0013      	movs	r3, r2
 800303e:	400b      	ands	r3, r1
 8003040:	420a      	tst	r2, r1
 8003042:	d00b      	beq.n	800305c <__swsetup_r+0xac>
 8003044:	2300      	movs	r3, #0
 8003046:	60a3      	str	r3, [r4, #8]
 8003048:	6963      	ldr	r3, [r4, #20]
 800304a:	425b      	negs	r3, r3
 800304c:	61a3      	str	r3, [r4, #24]
 800304e:	2000      	movs	r0, #0
 8003050:	6923      	ldr	r3, [r4, #16]
 8003052:	4283      	cmp	r3, r0
 8003054:	d101      	bne.n	800305a <__swsetup_r+0xaa>
 8003056:	0613      	lsls	r3, r2, #24
 8003058:	d4be      	bmi.n	8002fd8 <__swsetup_r+0x28>
 800305a:	bd70      	pop	{r4, r5, r6, pc}
 800305c:	0791      	lsls	r1, r2, #30
 800305e:	d400      	bmi.n	8003062 <__swsetup_r+0xb2>
 8003060:	6963      	ldr	r3, [r4, #20]
 8003062:	60a3      	str	r3, [r4, #8]
 8003064:	e7f3      	b.n	800304e <__swsetup_r+0x9e>
 8003066:	46c0      	nop			@ (mov r8, r8)
 8003068:	2000001c 	.word	0x2000001c

0800306c <memmove>:
 800306c:	b510      	push	{r4, lr}
 800306e:	4288      	cmp	r0, r1
 8003070:	d806      	bhi.n	8003080 <memmove+0x14>
 8003072:	2300      	movs	r3, #0
 8003074:	429a      	cmp	r2, r3
 8003076:	d008      	beq.n	800308a <memmove+0x1e>
 8003078:	5ccc      	ldrb	r4, [r1, r3]
 800307a:	54c4      	strb	r4, [r0, r3]
 800307c:	3301      	adds	r3, #1
 800307e:	e7f9      	b.n	8003074 <memmove+0x8>
 8003080:	188b      	adds	r3, r1, r2
 8003082:	4298      	cmp	r0, r3
 8003084:	d2f5      	bcs.n	8003072 <memmove+0x6>
 8003086:	3a01      	subs	r2, #1
 8003088:	d200      	bcs.n	800308c <memmove+0x20>
 800308a:	bd10      	pop	{r4, pc}
 800308c:	5c8b      	ldrb	r3, [r1, r2]
 800308e:	5483      	strb	r3, [r0, r2]
 8003090:	e7f9      	b.n	8003086 <memmove+0x1a>

08003092 <memset>:
 8003092:	0003      	movs	r3, r0
 8003094:	1882      	adds	r2, r0, r2
 8003096:	4293      	cmp	r3, r2
 8003098:	d100      	bne.n	800309c <memset+0xa>
 800309a:	4770      	bx	lr
 800309c:	7019      	strb	r1, [r3, #0]
 800309e:	3301      	adds	r3, #1
 80030a0:	e7f9      	b.n	8003096 <memset+0x4>
	...

080030a4 <_close_r>:
 80030a4:	2300      	movs	r3, #0
 80030a6:	b570      	push	{r4, r5, r6, lr}
 80030a8:	4d06      	ldr	r5, [pc, #24]	@ (80030c4 <_close_r+0x20>)
 80030aa:	0004      	movs	r4, r0
 80030ac:	0008      	movs	r0, r1
 80030ae:	602b      	str	r3, [r5, #0]
 80030b0:	f7fe fa67 	bl	8001582 <_close>
 80030b4:	1c43      	adds	r3, r0, #1
 80030b6:	d103      	bne.n	80030c0 <_close_r+0x1c>
 80030b8:	682b      	ldr	r3, [r5, #0]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d000      	beq.n	80030c0 <_close_r+0x1c>
 80030be:	6023      	str	r3, [r4, #0]
 80030c0:	bd70      	pop	{r4, r5, r6, pc}
 80030c2:	46c0      	nop			@ (mov r8, r8)
 80030c4:	200008dc 	.word	0x200008dc

080030c8 <_lseek_r>:
 80030c8:	b570      	push	{r4, r5, r6, lr}
 80030ca:	0004      	movs	r4, r0
 80030cc:	0008      	movs	r0, r1
 80030ce:	0011      	movs	r1, r2
 80030d0:	001a      	movs	r2, r3
 80030d2:	2300      	movs	r3, #0
 80030d4:	4d05      	ldr	r5, [pc, #20]	@ (80030ec <_lseek_r+0x24>)
 80030d6:	602b      	str	r3, [r5, #0]
 80030d8:	f7fe fa74 	bl	80015c4 <_lseek>
 80030dc:	1c43      	adds	r3, r0, #1
 80030de:	d103      	bne.n	80030e8 <_lseek_r+0x20>
 80030e0:	682b      	ldr	r3, [r5, #0]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d000      	beq.n	80030e8 <_lseek_r+0x20>
 80030e6:	6023      	str	r3, [r4, #0]
 80030e8:	bd70      	pop	{r4, r5, r6, pc}
 80030ea:	46c0      	nop			@ (mov r8, r8)
 80030ec:	200008dc 	.word	0x200008dc

080030f0 <_read_r>:
 80030f0:	b570      	push	{r4, r5, r6, lr}
 80030f2:	0004      	movs	r4, r0
 80030f4:	0008      	movs	r0, r1
 80030f6:	0011      	movs	r1, r2
 80030f8:	001a      	movs	r2, r3
 80030fa:	2300      	movs	r3, #0
 80030fc:	4d05      	ldr	r5, [pc, #20]	@ (8003114 <_read_r+0x24>)
 80030fe:	602b      	str	r3, [r5, #0]
 8003100:	f7fe fa06 	bl	8001510 <_read>
 8003104:	1c43      	adds	r3, r0, #1
 8003106:	d103      	bne.n	8003110 <_read_r+0x20>
 8003108:	682b      	ldr	r3, [r5, #0]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d000      	beq.n	8003110 <_read_r+0x20>
 800310e:	6023      	str	r3, [r4, #0]
 8003110:	bd70      	pop	{r4, r5, r6, pc}
 8003112:	46c0      	nop			@ (mov r8, r8)
 8003114:	200008dc 	.word	0x200008dc

08003118 <_sbrk_r>:
 8003118:	2300      	movs	r3, #0
 800311a:	b570      	push	{r4, r5, r6, lr}
 800311c:	4d06      	ldr	r5, [pc, #24]	@ (8003138 <_sbrk_r+0x20>)
 800311e:	0004      	movs	r4, r0
 8003120:	0008      	movs	r0, r1
 8003122:	602b      	str	r3, [r5, #0]
 8003124:	f7fe fa5a 	bl	80015dc <_sbrk>
 8003128:	1c43      	adds	r3, r0, #1
 800312a:	d103      	bne.n	8003134 <_sbrk_r+0x1c>
 800312c:	682b      	ldr	r3, [r5, #0]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d000      	beq.n	8003134 <_sbrk_r+0x1c>
 8003132:	6023      	str	r3, [r4, #0]
 8003134:	bd70      	pop	{r4, r5, r6, pc}
 8003136:	46c0      	nop			@ (mov r8, r8)
 8003138:	200008dc 	.word	0x200008dc

0800313c <_write_r>:
 800313c:	b570      	push	{r4, r5, r6, lr}
 800313e:	0004      	movs	r4, r0
 8003140:	0008      	movs	r0, r1
 8003142:	0011      	movs	r1, r2
 8003144:	001a      	movs	r2, r3
 8003146:	2300      	movs	r3, #0
 8003148:	4d05      	ldr	r5, [pc, #20]	@ (8003160 <_write_r+0x24>)
 800314a:	602b      	str	r3, [r5, #0]
 800314c:	f7fe f9fd 	bl	800154a <_write>
 8003150:	1c43      	adds	r3, r0, #1
 8003152:	d103      	bne.n	800315c <_write_r+0x20>
 8003154:	682b      	ldr	r3, [r5, #0]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d000      	beq.n	800315c <_write_r+0x20>
 800315a:	6023      	str	r3, [r4, #0]
 800315c:	bd70      	pop	{r4, r5, r6, pc}
 800315e:	46c0      	nop			@ (mov r8, r8)
 8003160:	200008dc 	.word	0x200008dc

08003164 <__errno>:
 8003164:	4b01      	ldr	r3, [pc, #4]	@ (800316c <__errno+0x8>)
 8003166:	6818      	ldr	r0, [r3, #0]
 8003168:	4770      	bx	lr
 800316a:	46c0      	nop			@ (mov r8, r8)
 800316c:	2000001c 	.word	0x2000001c

08003170 <__libc_init_array>:
 8003170:	b570      	push	{r4, r5, r6, lr}
 8003172:	2600      	movs	r6, #0
 8003174:	4c0c      	ldr	r4, [pc, #48]	@ (80031a8 <__libc_init_array+0x38>)
 8003176:	4d0d      	ldr	r5, [pc, #52]	@ (80031ac <__libc_init_array+0x3c>)
 8003178:	1b64      	subs	r4, r4, r5
 800317a:	10a4      	asrs	r4, r4, #2
 800317c:	42a6      	cmp	r6, r4
 800317e:	d109      	bne.n	8003194 <__libc_init_array+0x24>
 8003180:	2600      	movs	r6, #0
 8003182:	f000 fe13 	bl	8003dac <_init>
 8003186:	4c0a      	ldr	r4, [pc, #40]	@ (80031b0 <__libc_init_array+0x40>)
 8003188:	4d0a      	ldr	r5, [pc, #40]	@ (80031b4 <__libc_init_array+0x44>)
 800318a:	1b64      	subs	r4, r4, r5
 800318c:	10a4      	asrs	r4, r4, #2
 800318e:	42a6      	cmp	r6, r4
 8003190:	d105      	bne.n	800319e <__libc_init_array+0x2e>
 8003192:	bd70      	pop	{r4, r5, r6, pc}
 8003194:	00b3      	lsls	r3, r6, #2
 8003196:	58eb      	ldr	r3, [r5, r3]
 8003198:	4798      	blx	r3
 800319a:	3601      	adds	r6, #1
 800319c:	e7ee      	b.n	800317c <__libc_init_array+0xc>
 800319e:	00b3      	lsls	r3, r6, #2
 80031a0:	58eb      	ldr	r3, [r5, r3]
 80031a2:	4798      	blx	r3
 80031a4:	3601      	adds	r6, #1
 80031a6:	e7f2      	b.n	800318e <__libc_init_array+0x1e>
 80031a8:	0800497c 	.word	0x0800497c
 80031ac:	0800497c 	.word	0x0800497c
 80031b0:	08004980 	.word	0x08004980
 80031b4:	0800497c 	.word	0x0800497c

080031b8 <__retarget_lock_init_recursive>:
 80031b8:	4770      	bx	lr

080031ba <__retarget_lock_acquire_recursive>:
 80031ba:	4770      	bx	lr

080031bc <__retarget_lock_release_recursive>:
 80031bc:	4770      	bx	lr

080031be <memcpy>:
 80031be:	2300      	movs	r3, #0
 80031c0:	b510      	push	{r4, lr}
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d100      	bne.n	80031c8 <memcpy+0xa>
 80031c6:	bd10      	pop	{r4, pc}
 80031c8:	5ccc      	ldrb	r4, [r1, r3]
 80031ca:	54c4      	strb	r4, [r0, r3]
 80031cc:	3301      	adds	r3, #1
 80031ce:	e7f8      	b.n	80031c2 <memcpy+0x4>

080031d0 <_free_r>:
 80031d0:	b570      	push	{r4, r5, r6, lr}
 80031d2:	0005      	movs	r5, r0
 80031d4:	1e0c      	subs	r4, r1, #0
 80031d6:	d010      	beq.n	80031fa <_free_r+0x2a>
 80031d8:	3c04      	subs	r4, #4
 80031da:	6823      	ldr	r3, [r4, #0]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	da00      	bge.n	80031e2 <_free_r+0x12>
 80031e0:	18e4      	adds	r4, r4, r3
 80031e2:	0028      	movs	r0, r5
 80031e4:	f7ff fc28 	bl	8002a38 <__malloc_lock>
 80031e8:	4a1d      	ldr	r2, [pc, #116]	@ (8003260 <_free_r+0x90>)
 80031ea:	6813      	ldr	r3, [r2, #0]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d105      	bne.n	80031fc <_free_r+0x2c>
 80031f0:	6063      	str	r3, [r4, #4]
 80031f2:	6014      	str	r4, [r2, #0]
 80031f4:	0028      	movs	r0, r5
 80031f6:	f7ff fc27 	bl	8002a48 <__malloc_unlock>
 80031fa:	bd70      	pop	{r4, r5, r6, pc}
 80031fc:	42a3      	cmp	r3, r4
 80031fe:	d908      	bls.n	8003212 <_free_r+0x42>
 8003200:	6820      	ldr	r0, [r4, #0]
 8003202:	1821      	adds	r1, r4, r0
 8003204:	428b      	cmp	r3, r1
 8003206:	d1f3      	bne.n	80031f0 <_free_r+0x20>
 8003208:	6819      	ldr	r1, [r3, #0]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	1809      	adds	r1, r1, r0
 800320e:	6021      	str	r1, [r4, #0]
 8003210:	e7ee      	b.n	80031f0 <_free_r+0x20>
 8003212:	001a      	movs	r2, r3
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d001      	beq.n	800321e <_free_r+0x4e>
 800321a:	42a3      	cmp	r3, r4
 800321c:	d9f9      	bls.n	8003212 <_free_r+0x42>
 800321e:	6811      	ldr	r1, [r2, #0]
 8003220:	1850      	adds	r0, r2, r1
 8003222:	42a0      	cmp	r0, r4
 8003224:	d10b      	bne.n	800323e <_free_r+0x6e>
 8003226:	6820      	ldr	r0, [r4, #0]
 8003228:	1809      	adds	r1, r1, r0
 800322a:	1850      	adds	r0, r2, r1
 800322c:	6011      	str	r1, [r2, #0]
 800322e:	4283      	cmp	r3, r0
 8003230:	d1e0      	bne.n	80031f4 <_free_r+0x24>
 8003232:	6818      	ldr	r0, [r3, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	1841      	adds	r1, r0, r1
 8003238:	6011      	str	r1, [r2, #0]
 800323a:	6053      	str	r3, [r2, #4]
 800323c:	e7da      	b.n	80031f4 <_free_r+0x24>
 800323e:	42a0      	cmp	r0, r4
 8003240:	d902      	bls.n	8003248 <_free_r+0x78>
 8003242:	230c      	movs	r3, #12
 8003244:	602b      	str	r3, [r5, #0]
 8003246:	e7d5      	b.n	80031f4 <_free_r+0x24>
 8003248:	6820      	ldr	r0, [r4, #0]
 800324a:	1821      	adds	r1, r4, r0
 800324c:	428b      	cmp	r3, r1
 800324e:	d103      	bne.n	8003258 <_free_r+0x88>
 8003250:	6819      	ldr	r1, [r3, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	1809      	adds	r1, r1, r0
 8003256:	6021      	str	r1, [r4, #0]
 8003258:	6063      	str	r3, [r4, #4]
 800325a:	6054      	str	r4, [r2, #4]
 800325c:	e7ca      	b.n	80031f4 <_free_r+0x24>
 800325e:	46c0      	nop			@ (mov r8, r8)
 8003260:	2000079c 	.word	0x2000079c

08003264 <__ssputs_r>:
 8003264:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003266:	688e      	ldr	r6, [r1, #8]
 8003268:	b085      	sub	sp, #20
 800326a:	001f      	movs	r7, r3
 800326c:	000c      	movs	r4, r1
 800326e:	680b      	ldr	r3, [r1, #0]
 8003270:	9002      	str	r0, [sp, #8]
 8003272:	9203      	str	r2, [sp, #12]
 8003274:	42be      	cmp	r6, r7
 8003276:	d830      	bhi.n	80032da <__ssputs_r+0x76>
 8003278:	210c      	movs	r1, #12
 800327a:	5e62      	ldrsh	r2, [r4, r1]
 800327c:	2190      	movs	r1, #144	@ 0x90
 800327e:	00c9      	lsls	r1, r1, #3
 8003280:	420a      	tst	r2, r1
 8003282:	d028      	beq.n	80032d6 <__ssputs_r+0x72>
 8003284:	2003      	movs	r0, #3
 8003286:	6921      	ldr	r1, [r4, #16]
 8003288:	1a5b      	subs	r3, r3, r1
 800328a:	9301      	str	r3, [sp, #4]
 800328c:	6963      	ldr	r3, [r4, #20]
 800328e:	4343      	muls	r3, r0
 8003290:	9801      	ldr	r0, [sp, #4]
 8003292:	0fdd      	lsrs	r5, r3, #31
 8003294:	18ed      	adds	r5, r5, r3
 8003296:	1c7b      	adds	r3, r7, #1
 8003298:	181b      	adds	r3, r3, r0
 800329a:	106d      	asrs	r5, r5, #1
 800329c:	42ab      	cmp	r3, r5
 800329e:	d900      	bls.n	80032a2 <__ssputs_r+0x3e>
 80032a0:	001d      	movs	r5, r3
 80032a2:	0552      	lsls	r2, r2, #21
 80032a4:	d528      	bpl.n	80032f8 <__ssputs_r+0x94>
 80032a6:	0029      	movs	r1, r5
 80032a8:	9802      	ldr	r0, [sp, #8]
 80032aa:	f7ff fb45 	bl	8002938 <_malloc_r>
 80032ae:	1e06      	subs	r6, r0, #0
 80032b0:	d02c      	beq.n	800330c <__ssputs_r+0xa8>
 80032b2:	9a01      	ldr	r2, [sp, #4]
 80032b4:	6921      	ldr	r1, [r4, #16]
 80032b6:	f7ff ff82 	bl	80031be <memcpy>
 80032ba:	89a2      	ldrh	r2, [r4, #12]
 80032bc:	4b18      	ldr	r3, [pc, #96]	@ (8003320 <__ssputs_r+0xbc>)
 80032be:	401a      	ands	r2, r3
 80032c0:	2380      	movs	r3, #128	@ 0x80
 80032c2:	4313      	orrs	r3, r2
 80032c4:	81a3      	strh	r3, [r4, #12]
 80032c6:	9b01      	ldr	r3, [sp, #4]
 80032c8:	6126      	str	r6, [r4, #16]
 80032ca:	18f6      	adds	r6, r6, r3
 80032cc:	6026      	str	r6, [r4, #0]
 80032ce:	003e      	movs	r6, r7
 80032d0:	6165      	str	r5, [r4, #20]
 80032d2:	1aed      	subs	r5, r5, r3
 80032d4:	60a5      	str	r5, [r4, #8]
 80032d6:	42be      	cmp	r6, r7
 80032d8:	d900      	bls.n	80032dc <__ssputs_r+0x78>
 80032da:	003e      	movs	r6, r7
 80032dc:	0032      	movs	r2, r6
 80032de:	9903      	ldr	r1, [sp, #12]
 80032e0:	6820      	ldr	r0, [r4, #0]
 80032e2:	f7ff fec3 	bl	800306c <memmove>
 80032e6:	2000      	movs	r0, #0
 80032e8:	68a3      	ldr	r3, [r4, #8]
 80032ea:	1b9b      	subs	r3, r3, r6
 80032ec:	60a3      	str	r3, [r4, #8]
 80032ee:	6823      	ldr	r3, [r4, #0]
 80032f0:	199b      	adds	r3, r3, r6
 80032f2:	6023      	str	r3, [r4, #0]
 80032f4:	b005      	add	sp, #20
 80032f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032f8:	002a      	movs	r2, r5
 80032fa:	9802      	ldr	r0, [sp, #8]
 80032fc:	f000 fd1f 	bl	8003d3e <_realloc_r>
 8003300:	1e06      	subs	r6, r0, #0
 8003302:	d1e0      	bne.n	80032c6 <__ssputs_r+0x62>
 8003304:	6921      	ldr	r1, [r4, #16]
 8003306:	9802      	ldr	r0, [sp, #8]
 8003308:	f7ff ff62 	bl	80031d0 <_free_r>
 800330c:	230c      	movs	r3, #12
 800330e:	2001      	movs	r0, #1
 8003310:	9a02      	ldr	r2, [sp, #8]
 8003312:	4240      	negs	r0, r0
 8003314:	6013      	str	r3, [r2, #0]
 8003316:	89a2      	ldrh	r2, [r4, #12]
 8003318:	3334      	adds	r3, #52	@ 0x34
 800331a:	4313      	orrs	r3, r2
 800331c:	81a3      	strh	r3, [r4, #12]
 800331e:	e7e9      	b.n	80032f4 <__ssputs_r+0x90>
 8003320:	fffffb7f 	.word	0xfffffb7f

08003324 <_svfiprintf_r>:
 8003324:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003326:	b0a1      	sub	sp, #132	@ 0x84
 8003328:	9003      	str	r0, [sp, #12]
 800332a:	001d      	movs	r5, r3
 800332c:	898b      	ldrh	r3, [r1, #12]
 800332e:	000f      	movs	r7, r1
 8003330:	0016      	movs	r6, r2
 8003332:	061b      	lsls	r3, r3, #24
 8003334:	d511      	bpl.n	800335a <_svfiprintf_r+0x36>
 8003336:	690b      	ldr	r3, [r1, #16]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d10e      	bne.n	800335a <_svfiprintf_r+0x36>
 800333c:	2140      	movs	r1, #64	@ 0x40
 800333e:	f7ff fafb 	bl	8002938 <_malloc_r>
 8003342:	6038      	str	r0, [r7, #0]
 8003344:	6138      	str	r0, [r7, #16]
 8003346:	2800      	cmp	r0, #0
 8003348:	d105      	bne.n	8003356 <_svfiprintf_r+0x32>
 800334a:	230c      	movs	r3, #12
 800334c:	9a03      	ldr	r2, [sp, #12]
 800334e:	6013      	str	r3, [r2, #0]
 8003350:	2001      	movs	r0, #1
 8003352:	4240      	negs	r0, r0
 8003354:	e0cf      	b.n	80034f6 <_svfiprintf_r+0x1d2>
 8003356:	2340      	movs	r3, #64	@ 0x40
 8003358:	617b      	str	r3, [r7, #20]
 800335a:	2300      	movs	r3, #0
 800335c:	ac08      	add	r4, sp, #32
 800335e:	6163      	str	r3, [r4, #20]
 8003360:	3320      	adds	r3, #32
 8003362:	7663      	strb	r3, [r4, #25]
 8003364:	3310      	adds	r3, #16
 8003366:	76a3      	strb	r3, [r4, #26]
 8003368:	9507      	str	r5, [sp, #28]
 800336a:	0035      	movs	r5, r6
 800336c:	782b      	ldrb	r3, [r5, #0]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d001      	beq.n	8003376 <_svfiprintf_r+0x52>
 8003372:	2b25      	cmp	r3, #37	@ 0x25
 8003374:	d148      	bne.n	8003408 <_svfiprintf_r+0xe4>
 8003376:	1bab      	subs	r3, r5, r6
 8003378:	9305      	str	r3, [sp, #20]
 800337a:	42b5      	cmp	r5, r6
 800337c:	d00b      	beq.n	8003396 <_svfiprintf_r+0x72>
 800337e:	0032      	movs	r2, r6
 8003380:	0039      	movs	r1, r7
 8003382:	9803      	ldr	r0, [sp, #12]
 8003384:	f7ff ff6e 	bl	8003264 <__ssputs_r>
 8003388:	3001      	adds	r0, #1
 800338a:	d100      	bne.n	800338e <_svfiprintf_r+0x6a>
 800338c:	e0ae      	b.n	80034ec <_svfiprintf_r+0x1c8>
 800338e:	6963      	ldr	r3, [r4, #20]
 8003390:	9a05      	ldr	r2, [sp, #20]
 8003392:	189b      	adds	r3, r3, r2
 8003394:	6163      	str	r3, [r4, #20]
 8003396:	782b      	ldrb	r3, [r5, #0]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d100      	bne.n	800339e <_svfiprintf_r+0x7a>
 800339c:	e0a6      	b.n	80034ec <_svfiprintf_r+0x1c8>
 800339e:	2201      	movs	r2, #1
 80033a0:	2300      	movs	r3, #0
 80033a2:	4252      	negs	r2, r2
 80033a4:	6062      	str	r2, [r4, #4]
 80033a6:	a904      	add	r1, sp, #16
 80033a8:	3254      	adds	r2, #84	@ 0x54
 80033aa:	1852      	adds	r2, r2, r1
 80033ac:	1c6e      	adds	r6, r5, #1
 80033ae:	6023      	str	r3, [r4, #0]
 80033b0:	60e3      	str	r3, [r4, #12]
 80033b2:	60a3      	str	r3, [r4, #8]
 80033b4:	7013      	strb	r3, [r2, #0]
 80033b6:	65a3      	str	r3, [r4, #88]	@ 0x58
 80033b8:	4b54      	ldr	r3, [pc, #336]	@ (800350c <_svfiprintf_r+0x1e8>)
 80033ba:	2205      	movs	r2, #5
 80033bc:	0018      	movs	r0, r3
 80033be:	7831      	ldrb	r1, [r6, #0]
 80033c0:	9305      	str	r3, [sp, #20]
 80033c2:	f000 fcb1 	bl	8003d28 <memchr>
 80033c6:	1c75      	adds	r5, r6, #1
 80033c8:	2800      	cmp	r0, #0
 80033ca:	d11f      	bne.n	800340c <_svfiprintf_r+0xe8>
 80033cc:	6822      	ldr	r2, [r4, #0]
 80033ce:	06d3      	lsls	r3, r2, #27
 80033d0:	d504      	bpl.n	80033dc <_svfiprintf_r+0xb8>
 80033d2:	2353      	movs	r3, #83	@ 0x53
 80033d4:	a904      	add	r1, sp, #16
 80033d6:	185b      	adds	r3, r3, r1
 80033d8:	2120      	movs	r1, #32
 80033da:	7019      	strb	r1, [r3, #0]
 80033dc:	0713      	lsls	r3, r2, #28
 80033de:	d504      	bpl.n	80033ea <_svfiprintf_r+0xc6>
 80033e0:	2353      	movs	r3, #83	@ 0x53
 80033e2:	a904      	add	r1, sp, #16
 80033e4:	185b      	adds	r3, r3, r1
 80033e6:	212b      	movs	r1, #43	@ 0x2b
 80033e8:	7019      	strb	r1, [r3, #0]
 80033ea:	7833      	ldrb	r3, [r6, #0]
 80033ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80033ee:	d016      	beq.n	800341e <_svfiprintf_r+0xfa>
 80033f0:	0035      	movs	r5, r6
 80033f2:	2100      	movs	r1, #0
 80033f4:	200a      	movs	r0, #10
 80033f6:	68e3      	ldr	r3, [r4, #12]
 80033f8:	782a      	ldrb	r2, [r5, #0]
 80033fa:	1c6e      	adds	r6, r5, #1
 80033fc:	3a30      	subs	r2, #48	@ 0x30
 80033fe:	2a09      	cmp	r2, #9
 8003400:	d950      	bls.n	80034a4 <_svfiprintf_r+0x180>
 8003402:	2900      	cmp	r1, #0
 8003404:	d111      	bne.n	800342a <_svfiprintf_r+0x106>
 8003406:	e017      	b.n	8003438 <_svfiprintf_r+0x114>
 8003408:	3501      	adds	r5, #1
 800340a:	e7af      	b.n	800336c <_svfiprintf_r+0x48>
 800340c:	9b05      	ldr	r3, [sp, #20]
 800340e:	6822      	ldr	r2, [r4, #0]
 8003410:	1ac0      	subs	r0, r0, r3
 8003412:	2301      	movs	r3, #1
 8003414:	4083      	lsls	r3, r0
 8003416:	4313      	orrs	r3, r2
 8003418:	002e      	movs	r6, r5
 800341a:	6023      	str	r3, [r4, #0]
 800341c:	e7cc      	b.n	80033b8 <_svfiprintf_r+0x94>
 800341e:	9b07      	ldr	r3, [sp, #28]
 8003420:	1d19      	adds	r1, r3, #4
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	9107      	str	r1, [sp, #28]
 8003426:	2b00      	cmp	r3, #0
 8003428:	db01      	blt.n	800342e <_svfiprintf_r+0x10a>
 800342a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800342c:	e004      	b.n	8003438 <_svfiprintf_r+0x114>
 800342e:	425b      	negs	r3, r3
 8003430:	60e3      	str	r3, [r4, #12]
 8003432:	2302      	movs	r3, #2
 8003434:	4313      	orrs	r3, r2
 8003436:	6023      	str	r3, [r4, #0]
 8003438:	782b      	ldrb	r3, [r5, #0]
 800343a:	2b2e      	cmp	r3, #46	@ 0x2e
 800343c:	d10c      	bne.n	8003458 <_svfiprintf_r+0x134>
 800343e:	786b      	ldrb	r3, [r5, #1]
 8003440:	2b2a      	cmp	r3, #42	@ 0x2a
 8003442:	d134      	bne.n	80034ae <_svfiprintf_r+0x18a>
 8003444:	9b07      	ldr	r3, [sp, #28]
 8003446:	3502      	adds	r5, #2
 8003448:	1d1a      	adds	r2, r3, #4
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	9207      	str	r2, [sp, #28]
 800344e:	2b00      	cmp	r3, #0
 8003450:	da01      	bge.n	8003456 <_svfiprintf_r+0x132>
 8003452:	2301      	movs	r3, #1
 8003454:	425b      	negs	r3, r3
 8003456:	9309      	str	r3, [sp, #36]	@ 0x24
 8003458:	4e2d      	ldr	r6, [pc, #180]	@ (8003510 <_svfiprintf_r+0x1ec>)
 800345a:	2203      	movs	r2, #3
 800345c:	0030      	movs	r0, r6
 800345e:	7829      	ldrb	r1, [r5, #0]
 8003460:	f000 fc62 	bl	8003d28 <memchr>
 8003464:	2800      	cmp	r0, #0
 8003466:	d006      	beq.n	8003476 <_svfiprintf_r+0x152>
 8003468:	2340      	movs	r3, #64	@ 0x40
 800346a:	1b80      	subs	r0, r0, r6
 800346c:	4083      	lsls	r3, r0
 800346e:	6822      	ldr	r2, [r4, #0]
 8003470:	3501      	adds	r5, #1
 8003472:	4313      	orrs	r3, r2
 8003474:	6023      	str	r3, [r4, #0]
 8003476:	7829      	ldrb	r1, [r5, #0]
 8003478:	2206      	movs	r2, #6
 800347a:	4826      	ldr	r0, [pc, #152]	@ (8003514 <_svfiprintf_r+0x1f0>)
 800347c:	1c6e      	adds	r6, r5, #1
 800347e:	7621      	strb	r1, [r4, #24]
 8003480:	f000 fc52 	bl	8003d28 <memchr>
 8003484:	2800      	cmp	r0, #0
 8003486:	d038      	beq.n	80034fa <_svfiprintf_r+0x1d6>
 8003488:	4b23      	ldr	r3, [pc, #140]	@ (8003518 <_svfiprintf_r+0x1f4>)
 800348a:	2b00      	cmp	r3, #0
 800348c:	d122      	bne.n	80034d4 <_svfiprintf_r+0x1b0>
 800348e:	2207      	movs	r2, #7
 8003490:	9b07      	ldr	r3, [sp, #28]
 8003492:	3307      	adds	r3, #7
 8003494:	4393      	bics	r3, r2
 8003496:	3308      	adds	r3, #8
 8003498:	9307      	str	r3, [sp, #28]
 800349a:	6963      	ldr	r3, [r4, #20]
 800349c:	9a04      	ldr	r2, [sp, #16]
 800349e:	189b      	adds	r3, r3, r2
 80034a0:	6163      	str	r3, [r4, #20]
 80034a2:	e762      	b.n	800336a <_svfiprintf_r+0x46>
 80034a4:	4343      	muls	r3, r0
 80034a6:	0035      	movs	r5, r6
 80034a8:	2101      	movs	r1, #1
 80034aa:	189b      	adds	r3, r3, r2
 80034ac:	e7a4      	b.n	80033f8 <_svfiprintf_r+0xd4>
 80034ae:	2300      	movs	r3, #0
 80034b0:	200a      	movs	r0, #10
 80034b2:	0019      	movs	r1, r3
 80034b4:	3501      	adds	r5, #1
 80034b6:	6063      	str	r3, [r4, #4]
 80034b8:	782a      	ldrb	r2, [r5, #0]
 80034ba:	1c6e      	adds	r6, r5, #1
 80034bc:	3a30      	subs	r2, #48	@ 0x30
 80034be:	2a09      	cmp	r2, #9
 80034c0:	d903      	bls.n	80034ca <_svfiprintf_r+0x1a6>
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d0c8      	beq.n	8003458 <_svfiprintf_r+0x134>
 80034c6:	9109      	str	r1, [sp, #36]	@ 0x24
 80034c8:	e7c6      	b.n	8003458 <_svfiprintf_r+0x134>
 80034ca:	4341      	muls	r1, r0
 80034cc:	0035      	movs	r5, r6
 80034ce:	2301      	movs	r3, #1
 80034d0:	1889      	adds	r1, r1, r2
 80034d2:	e7f1      	b.n	80034b8 <_svfiprintf_r+0x194>
 80034d4:	aa07      	add	r2, sp, #28
 80034d6:	9200      	str	r2, [sp, #0]
 80034d8:	0021      	movs	r1, r4
 80034da:	003a      	movs	r2, r7
 80034dc:	4b0f      	ldr	r3, [pc, #60]	@ (800351c <_svfiprintf_r+0x1f8>)
 80034de:	9803      	ldr	r0, [sp, #12]
 80034e0:	e000      	b.n	80034e4 <_svfiprintf_r+0x1c0>
 80034e2:	bf00      	nop
 80034e4:	9004      	str	r0, [sp, #16]
 80034e6:	9b04      	ldr	r3, [sp, #16]
 80034e8:	3301      	adds	r3, #1
 80034ea:	d1d6      	bne.n	800349a <_svfiprintf_r+0x176>
 80034ec:	89bb      	ldrh	r3, [r7, #12]
 80034ee:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80034f0:	065b      	lsls	r3, r3, #25
 80034f2:	d500      	bpl.n	80034f6 <_svfiprintf_r+0x1d2>
 80034f4:	e72c      	b.n	8003350 <_svfiprintf_r+0x2c>
 80034f6:	b021      	add	sp, #132	@ 0x84
 80034f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034fa:	aa07      	add	r2, sp, #28
 80034fc:	9200      	str	r2, [sp, #0]
 80034fe:	0021      	movs	r1, r4
 8003500:	003a      	movs	r2, r7
 8003502:	4b06      	ldr	r3, [pc, #24]	@ (800351c <_svfiprintf_r+0x1f8>)
 8003504:	9803      	ldr	r0, [sp, #12]
 8003506:	f000 f9bf 	bl	8003888 <_printf_i>
 800350a:	e7eb      	b.n	80034e4 <_svfiprintf_r+0x1c0>
 800350c:	08004948 	.word	0x08004948
 8003510:	0800494e 	.word	0x0800494e
 8003514:	08004952 	.word	0x08004952
 8003518:	00000000 	.word	0x00000000
 800351c:	08003265 	.word	0x08003265

08003520 <__sfputc_r>:
 8003520:	6893      	ldr	r3, [r2, #8]
 8003522:	b510      	push	{r4, lr}
 8003524:	3b01      	subs	r3, #1
 8003526:	6093      	str	r3, [r2, #8]
 8003528:	2b00      	cmp	r3, #0
 800352a:	da04      	bge.n	8003536 <__sfputc_r+0x16>
 800352c:	6994      	ldr	r4, [r2, #24]
 800352e:	42a3      	cmp	r3, r4
 8003530:	db07      	blt.n	8003542 <__sfputc_r+0x22>
 8003532:	290a      	cmp	r1, #10
 8003534:	d005      	beq.n	8003542 <__sfputc_r+0x22>
 8003536:	6813      	ldr	r3, [r2, #0]
 8003538:	1c58      	adds	r0, r3, #1
 800353a:	6010      	str	r0, [r2, #0]
 800353c:	7019      	strb	r1, [r3, #0]
 800353e:	0008      	movs	r0, r1
 8003540:	bd10      	pop	{r4, pc}
 8003542:	f7ff fcf3 	bl	8002f2c <__swbuf_r>
 8003546:	0001      	movs	r1, r0
 8003548:	e7f9      	b.n	800353e <__sfputc_r+0x1e>

0800354a <__sfputs_r>:
 800354a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800354c:	0006      	movs	r6, r0
 800354e:	000f      	movs	r7, r1
 8003550:	0014      	movs	r4, r2
 8003552:	18d5      	adds	r5, r2, r3
 8003554:	42ac      	cmp	r4, r5
 8003556:	d101      	bne.n	800355c <__sfputs_r+0x12>
 8003558:	2000      	movs	r0, #0
 800355a:	e007      	b.n	800356c <__sfputs_r+0x22>
 800355c:	7821      	ldrb	r1, [r4, #0]
 800355e:	003a      	movs	r2, r7
 8003560:	0030      	movs	r0, r6
 8003562:	f7ff ffdd 	bl	8003520 <__sfputc_r>
 8003566:	3401      	adds	r4, #1
 8003568:	1c43      	adds	r3, r0, #1
 800356a:	d1f3      	bne.n	8003554 <__sfputs_r+0xa>
 800356c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003570 <_vfiprintf_r>:
 8003570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003572:	b0a1      	sub	sp, #132	@ 0x84
 8003574:	000f      	movs	r7, r1
 8003576:	0015      	movs	r5, r2
 8003578:	001e      	movs	r6, r3
 800357a:	9003      	str	r0, [sp, #12]
 800357c:	2800      	cmp	r0, #0
 800357e:	d004      	beq.n	800358a <_vfiprintf_r+0x1a>
 8003580:	6a03      	ldr	r3, [r0, #32]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d101      	bne.n	800358a <_vfiprintf_r+0x1a>
 8003586:	f7ff faf7 	bl	8002b78 <__sinit>
 800358a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800358c:	07db      	lsls	r3, r3, #31
 800358e:	d405      	bmi.n	800359c <_vfiprintf_r+0x2c>
 8003590:	89bb      	ldrh	r3, [r7, #12]
 8003592:	059b      	lsls	r3, r3, #22
 8003594:	d402      	bmi.n	800359c <_vfiprintf_r+0x2c>
 8003596:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8003598:	f7ff fe0f 	bl	80031ba <__retarget_lock_acquire_recursive>
 800359c:	89bb      	ldrh	r3, [r7, #12]
 800359e:	071b      	lsls	r3, r3, #28
 80035a0:	d502      	bpl.n	80035a8 <_vfiprintf_r+0x38>
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d113      	bne.n	80035d0 <_vfiprintf_r+0x60>
 80035a8:	0039      	movs	r1, r7
 80035aa:	9803      	ldr	r0, [sp, #12]
 80035ac:	f7ff fd00 	bl	8002fb0 <__swsetup_r>
 80035b0:	2800      	cmp	r0, #0
 80035b2:	d00d      	beq.n	80035d0 <_vfiprintf_r+0x60>
 80035b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80035b6:	07db      	lsls	r3, r3, #31
 80035b8:	d503      	bpl.n	80035c2 <_vfiprintf_r+0x52>
 80035ba:	2001      	movs	r0, #1
 80035bc:	4240      	negs	r0, r0
 80035be:	b021      	add	sp, #132	@ 0x84
 80035c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035c2:	89bb      	ldrh	r3, [r7, #12]
 80035c4:	059b      	lsls	r3, r3, #22
 80035c6:	d4f8      	bmi.n	80035ba <_vfiprintf_r+0x4a>
 80035c8:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80035ca:	f7ff fdf7 	bl	80031bc <__retarget_lock_release_recursive>
 80035ce:	e7f4      	b.n	80035ba <_vfiprintf_r+0x4a>
 80035d0:	2300      	movs	r3, #0
 80035d2:	ac08      	add	r4, sp, #32
 80035d4:	6163      	str	r3, [r4, #20]
 80035d6:	3320      	adds	r3, #32
 80035d8:	7663      	strb	r3, [r4, #25]
 80035da:	3310      	adds	r3, #16
 80035dc:	76a3      	strb	r3, [r4, #26]
 80035de:	9607      	str	r6, [sp, #28]
 80035e0:	002e      	movs	r6, r5
 80035e2:	7833      	ldrb	r3, [r6, #0]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d001      	beq.n	80035ec <_vfiprintf_r+0x7c>
 80035e8:	2b25      	cmp	r3, #37	@ 0x25
 80035ea:	d148      	bne.n	800367e <_vfiprintf_r+0x10e>
 80035ec:	1b73      	subs	r3, r6, r5
 80035ee:	9305      	str	r3, [sp, #20]
 80035f0:	42ae      	cmp	r6, r5
 80035f2:	d00b      	beq.n	800360c <_vfiprintf_r+0x9c>
 80035f4:	002a      	movs	r2, r5
 80035f6:	0039      	movs	r1, r7
 80035f8:	9803      	ldr	r0, [sp, #12]
 80035fa:	f7ff ffa6 	bl	800354a <__sfputs_r>
 80035fe:	3001      	adds	r0, #1
 8003600:	d100      	bne.n	8003604 <_vfiprintf_r+0x94>
 8003602:	e0ae      	b.n	8003762 <_vfiprintf_r+0x1f2>
 8003604:	6963      	ldr	r3, [r4, #20]
 8003606:	9a05      	ldr	r2, [sp, #20]
 8003608:	189b      	adds	r3, r3, r2
 800360a:	6163      	str	r3, [r4, #20]
 800360c:	7833      	ldrb	r3, [r6, #0]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d100      	bne.n	8003614 <_vfiprintf_r+0xa4>
 8003612:	e0a6      	b.n	8003762 <_vfiprintf_r+0x1f2>
 8003614:	2201      	movs	r2, #1
 8003616:	2300      	movs	r3, #0
 8003618:	4252      	negs	r2, r2
 800361a:	6062      	str	r2, [r4, #4]
 800361c:	a904      	add	r1, sp, #16
 800361e:	3254      	adds	r2, #84	@ 0x54
 8003620:	1852      	adds	r2, r2, r1
 8003622:	1c75      	adds	r5, r6, #1
 8003624:	6023      	str	r3, [r4, #0]
 8003626:	60e3      	str	r3, [r4, #12]
 8003628:	60a3      	str	r3, [r4, #8]
 800362a:	7013      	strb	r3, [r2, #0]
 800362c:	65a3      	str	r3, [r4, #88]	@ 0x58
 800362e:	4b59      	ldr	r3, [pc, #356]	@ (8003794 <_vfiprintf_r+0x224>)
 8003630:	2205      	movs	r2, #5
 8003632:	0018      	movs	r0, r3
 8003634:	7829      	ldrb	r1, [r5, #0]
 8003636:	9305      	str	r3, [sp, #20]
 8003638:	f000 fb76 	bl	8003d28 <memchr>
 800363c:	1c6e      	adds	r6, r5, #1
 800363e:	2800      	cmp	r0, #0
 8003640:	d11f      	bne.n	8003682 <_vfiprintf_r+0x112>
 8003642:	6822      	ldr	r2, [r4, #0]
 8003644:	06d3      	lsls	r3, r2, #27
 8003646:	d504      	bpl.n	8003652 <_vfiprintf_r+0xe2>
 8003648:	2353      	movs	r3, #83	@ 0x53
 800364a:	a904      	add	r1, sp, #16
 800364c:	185b      	adds	r3, r3, r1
 800364e:	2120      	movs	r1, #32
 8003650:	7019      	strb	r1, [r3, #0]
 8003652:	0713      	lsls	r3, r2, #28
 8003654:	d504      	bpl.n	8003660 <_vfiprintf_r+0xf0>
 8003656:	2353      	movs	r3, #83	@ 0x53
 8003658:	a904      	add	r1, sp, #16
 800365a:	185b      	adds	r3, r3, r1
 800365c:	212b      	movs	r1, #43	@ 0x2b
 800365e:	7019      	strb	r1, [r3, #0]
 8003660:	782b      	ldrb	r3, [r5, #0]
 8003662:	2b2a      	cmp	r3, #42	@ 0x2a
 8003664:	d016      	beq.n	8003694 <_vfiprintf_r+0x124>
 8003666:	002e      	movs	r6, r5
 8003668:	2100      	movs	r1, #0
 800366a:	200a      	movs	r0, #10
 800366c:	68e3      	ldr	r3, [r4, #12]
 800366e:	7832      	ldrb	r2, [r6, #0]
 8003670:	1c75      	adds	r5, r6, #1
 8003672:	3a30      	subs	r2, #48	@ 0x30
 8003674:	2a09      	cmp	r2, #9
 8003676:	d950      	bls.n	800371a <_vfiprintf_r+0x1aa>
 8003678:	2900      	cmp	r1, #0
 800367a:	d111      	bne.n	80036a0 <_vfiprintf_r+0x130>
 800367c:	e017      	b.n	80036ae <_vfiprintf_r+0x13e>
 800367e:	3601      	adds	r6, #1
 8003680:	e7af      	b.n	80035e2 <_vfiprintf_r+0x72>
 8003682:	9b05      	ldr	r3, [sp, #20]
 8003684:	6822      	ldr	r2, [r4, #0]
 8003686:	1ac0      	subs	r0, r0, r3
 8003688:	2301      	movs	r3, #1
 800368a:	4083      	lsls	r3, r0
 800368c:	4313      	orrs	r3, r2
 800368e:	0035      	movs	r5, r6
 8003690:	6023      	str	r3, [r4, #0]
 8003692:	e7cc      	b.n	800362e <_vfiprintf_r+0xbe>
 8003694:	9b07      	ldr	r3, [sp, #28]
 8003696:	1d19      	adds	r1, r3, #4
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	9107      	str	r1, [sp, #28]
 800369c:	2b00      	cmp	r3, #0
 800369e:	db01      	blt.n	80036a4 <_vfiprintf_r+0x134>
 80036a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80036a2:	e004      	b.n	80036ae <_vfiprintf_r+0x13e>
 80036a4:	425b      	negs	r3, r3
 80036a6:	60e3      	str	r3, [r4, #12]
 80036a8:	2302      	movs	r3, #2
 80036aa:	4313      	orrs	r3, r2
 80036ac:	6023      	str	r3, [r4, #0]
 80036ae:	7833      	ldrb	r3, [r6, #0]
 80036b0:	2b2e      	cmp	r3, #46	@ 0x2e
 80036b2:	d10c      	bne.n	80036ce <_vfiprintf_r+0x15e>
 80036b4:	7873      	ldrb	r3, [r6, #1]
 80036b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80036b8:	d134      	bne.n	8003724 <_vfiprintf_r+0x1b4>
 80036ba:	9b07      	ldr	r3, [sp, #28]
 80036bc:	3602      	adds	r6, #2
 80036be:	1d1a      	adds	r2, r3, #4
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	9207      	str	r2, [sp, #28]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	da01      	bge.n	80036cc <_vfiprintf_r+0x15c>
 80036c8:	2301      	movs	r3, #1
 80036ca:	425b      	negs	r3, r3
 80036cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80036ce:	4d32      	ldr	r5, [pc, #200]	@ (8003798 <_vfiprintf_r+0x228>)
 80036d0:	2203      	movs	r2, #3
 80036d2:	0028      	movs	r0, r5
 80036d4:	7831      	ldrb	r1, [r6, #0]
 80036d6:	f000 fb27 	bl	8003d28 <memchr>
 80036da:	2800      	cmp	r0, #0
 80036dc:	d006      	beq.n	80036ec <_vfiprintf_r+0x17c>
 80036de:	2340      	movs	r3, #64	@ 0x40
 80036e0:	1b40      	subs	r0, r0, r5
 80036e2:	4083      	lsls	r3, r0
 80036e4:	6822      	ldr	r2, [r4, #0]
 80036e6:	3601      	adds	r6, #1
 80036e8:	4313      	orrs	r3, r2
 80036ea:	6023      	str	r3, [r4, #0]
 80036ec:	7831      	ldrb	r1, [r6, #0]
 80036ee:	2206      	movs	r2, #6
 80036f0:	482a      	ldr	r0, [pc, #168]	@ (800379c <_vfiprintf_r+0x22c>)
 80036f2:	1c75      	adds	r5, r6, #1
 80036f4:	7621      	strb	r1, [r4, #24]
 80036f6:	f000 fb17 	bl	8003d28 <memchr>
 80036fa:	2800      	cmp	r0, #0
 80036fc:	d040      	beq.n	8003780 <_vfiprintf_r+0x210>
 80036fe:	4b28      	ldr	r3, [pc, #160]	@ (80037a0 <_vfiprintf_r+0x230>)
 8003700:	2b00      	cmp	r3, #0
 8003702:	d122      	bne.n	800374a <_vfiprintf_r+0x1da>
 8003704:	2207      	movs	r2, #7
 8003706:	9b07      	ldr	r3, [sp, #28]
 8003708:	3307      	adds	r3, #7
 800370a:	4393      	bics	r3, r2
 800370c:	3308      	adds	r3, #8
 800370e:	9307      	str	r3, [sp, #28]
 8003710:	6963      	ldr	r3, [r4, #20]
 8003712:	9a04      	ldr	r2, [sp, #16]
 8003714:	189b      	adds	r3, r3, r2
 8003716:	6163      	str	r3, [r4, #20]
 8003718:	e762      	b.n	80035e0 <_vfiprintf_r+0x70>
 800371a:	4343      	muls	r3, r0
 800371c:	002e      	movs	r6, r5
 800371e:	2101      	movs	r1, #1
 8003720:	189b      	adds	r3, r3, r2
 8003722:	e7a4      	b.n	800366e <_vfiprintf_r+0xfe>
 8003724:	2300      	movs	r3, #0
 8003726:	200a      	movs	r0, #10
 8003728:	0019      	movs	r1, r3
 800372a:	3601      	adds	r6, #1
 800372c:	6063      	str	r3, [r4, #4]
 800372e:	7832      	ldrb	r2, [r6, #0]
 8003730:	1c75      	adds	r5, r6, #1
 8003732:	3a30      	subs	r2, #48	@ 0x30
 8003734:	2a09      	cmp	r2, #9
 8003736:	d903      	bls.n	8003740 <_vfiprintf_r+0x1d0>
 8003738:	2b00      	cmp	r3, #0
 800373a:	d0c8      	beq.n	80036ce <_vfiprintf_r+0x15e>
 800373c:	9109      	str	r1, [sp, #36]	@ 0x24
 800373e:	e7c6      	b.n	80036ce <_vfiprintf_r+0x15e>
 8003740:	4341      	muls	r1, r0
 8003742:	002e      	movs	r6, r5
 8003744:	2301      	movs	r3, #1
 8003746:	1889      	adds	r1, r1, r2
 8003748:	e7f1      	b.n	800372e <_vfiprintf_r+0x1be>
 800374a:	aa07      	add	r2, sp, #28
 800374c:	9200      	str	r2, [sp, #0]
 800374e:	0021      	movs	r1, r4
 8003750:	003a      	movs	r2, r7
 8003752:	4b14      	ldr	r3, [pc, #80]	@ (80037a4 <_vfiprintf_r+0x234>)
 8003754:	9803      	ldr	r0, [sp, #12]
 8003756:	e000      	b.n	800375a <_vfiprintf_r+0x1ea>
 8003758:	bf00      	nop
 800375a:	9004      	str	r0, [sp, #16]
 800375c:	9b04      	ldr	r3, [sp, #16]
 800375e:	3301      	adds	r3, #1
 8003760:	d1d6      	bne.n	8003710 <_vfiprintf_r+0x1a0>
 8003762:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003764:	07db      	lsls	r3, r3, #31
 8003766:	d405      	bmi.n	8003774 <_vfiprintf_r+0x204>
 8003768:	89bb      	ldrh	r3, [r7, #12]
 800376a:	059b      	lsls	r3, r3, #22
 800376c:	d402      	bmi.n	8003774 <_vfiprintf_r+0x204>
 800376e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8003770:	f7ff fd24 	bl	80031bc <__retarget_lock_release_recursive>
 8003774:	89bb      	ldrh	r3, [r7, #12]
 8003776:	065b      	lsls	r3, r3, #25
 8003778:	d500      	bpl.n	800377c <_vfiprintf_r+0x20c>
 800377a:	e71e      	b.n	80035ba <_vfiprintf_r+0x4a>
 800377c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800377e:	e71e      	b.n	80035be <_vfiprintf_r+0x4e>
 8003780:	aa07      	add	r2, sp, #28
 8003782:	9200      	str	r2, [sp, #0]
 8003784:	0021      	movs	r1, r4
 8003786:	003a      	movs	r2, r7
 8003788:	4b06      	ldr	r3, [pc, #24]	@ (80037a4 <_vfiprintf_r+0x234>)
 800378a:	9803      	ldr	r0, [sp, #12]
 800378c:	f000 f87c 	bl	8003888 <_printf_i>
 8003790:	e7e3      	b.n	800375a <_vfiprintf_r+0x1ea>
 8003792:	46c0      	nop			@ (mov r8, r8)
 8003794:	08004948 	.word	0x08004948
 8003798:	0800494e 	.word	0x0800494e
 800379c:	08004952 	.word	0x08004952
 80037a0:	00000000 	.word	0x00000000
 80037a4:	0800354b 	.word	0x0800354b

080037a8 <_printf_common>:
 80037a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80037aa:	0016      	movs	r6, r2
 80037ac:	9301      	str	r3, [sp, #4]
 80037ae:	688a      	ldr	r2, [r1, #8]
 80037b0:	690b      	ldr	r3, [r1, #16]
 80037b2:	000c      	movs	r4, r1
 80037b4:	9000      	str	r0, [sp, #0]
 80037b6:	4293      	cmp	r3, r2
 80037b8:	da00      	bge.n	80037bc <_printf_common+0x14>
 80037ba:	0013      	movs	r3, r2
 80037bc:	0022      	movs	r2, r4
 80037be:	6033      	str	r3, [r6, #0]
 80037c0:	3243      	adds	r2, #67	@ 0x43
 80037c2:	7812      	ldrb	r2, [r2, #0]
 80037c4:	2a00      	cmp	r2, #0
 80037c6:	d001      	beq.n	80037cc <_printf_common+0x24>
 80037c8:	3301      	adds	r3, #1
 80037ca:	6033      	str	r3, [r6, #0]
 80037cc:	6823      	ldr	r3, [r4, #0]
 80037ce:	069b      	lsls	r3, r3, #26
 80037d0:	d502      	bpl.n	80037d8 <_printf_common+0x30>
 80037d2:	6833      	ldr	r3, [r6, #0]
 80037d4:	3302      	adds	r3, #2
 80037d6:	6033      	str	r3, [r6, #0]
 80037d8:	6822      	ldr	r2, [r4, #0]
 80037da:	2306      	movs	r3, #6
 80037dc:	0015      	movs	r5, r2
 80037de:	401d      	ands	r5, r3
 80037e0:	421a      	tst	r2, r3
 80037e2:	d027      	beq.n	8003834 <_printf_common+0x8c>
 80037e4:	0023      	movs	r3, r4
 80037e6:	3343      	adds	r3, #67	@ 0x43
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	1e5a      	subs	r2, r3, #1
 80037ec:	4193      	sbcs	r3, r2
 80037ee:	6822      	ldr	r2, [r4, #0]
 80037f0:	0692      	lsls	r2, r2, #26
 80037f2:	d430      	bmi.n	8003856 <_printf_common+0xae>
 80037f4:	0022      	movs	r2, r4
 80037f6:	9901      	ldr	r1, [sp, #4]
 80037f8:	9800      	ldr	r0, [sp, #0]
 80037fa:	9d08      	ldr	r5, [sp, #32]
 80037fc:	3243      	adds	r2, #67	@ 0x43
 80037fe:	47a8      	blx	r5
 8003800:	3001      	adds	r0, #1
 8003802:	d025      	beq.n	8003850 <_printf_common+0xa8>
 8003804:	2206      	movs	r2, #6
 8003806:	6823      	ldr	r3, [r4, #0]
 8003808:	2500      	movs	r5, #0
 800380a:	4013      	ands	r3, r2
 800380c:	2b04      	cmp	r3, #4
 800380e:	d105      	bne.n	800381c <_printf_common+0x74>
 8003810:	6833      	ldr	r3, [r6, #0]
 8003812:	68e5      	ldr	r5, [r4, #12]
 8003814:	1aed      	subs	r5, r5, r3
 8003816:	43eb      	mvns	r3, r5
 8003818:	17db      	asrs	r3, r3, #31
 800381a:	401d      	ands	r5, r3
 800381c:	68a3      	ldr	r3, [r4, #8]
 800381e:	6922      	ldr	r2, [r4, #16]
 8003820:	4293      	cmp	r3, r2
 8003822:	dd01      	ble.n	8003828 <_printf_common+0x80>
 8003824:	1a9b      	subs	r3, r3, r2
 8003826:	18ed      	adds	r5, r5, r3
 8003828:	2600      	movs	r6, #0
 800382a:	42b5      	cmp	r5, r6
 800382c:	d120      	bne.n	8003870 <_printf_common+0xc8>
 800382e:	2000      	movs	r0, #0
 8003830:	e010      	b.n	8003854 <_printf_common+0xac>
 8003832:	3501      	adds	r5, #1
 8003834:	68e3      	ldr	r3, [r4, #12]
 8003836:	6832      	ldr	r2, [r6, #0]
 8003838:	1a9b      	subs	r3, r3, r2
 800383a:	42ab      	cmp	r3, r5
 800383c:	ddd2      	ble.n	80037e4 <_printf_common+0x3c>
 800383e:	0022      	movs	r2, r4
 8003840:	2301      	movs	r3, #1
 8003842:	9901      	ldr	r1, [sp, #4]
 8003844:	9800      	ldr	r0, [sp, #0]
 8003846:	9f08      	ldr	r7, [sp, #32]
 8003848:	3219      	adds	r2, #25
 800384a:	47b8      	blx	r7
 800384c:	3001      	adds	r0, #1
 800384e:	d1f0      	bne.n	8003832 <_printf_common+0x8a>
 8003850:	2001      	movs	r0, #1
 8003852:	4240      	negs	r0, r0
 8003854:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003856:	2030      	movs	r0, #48	@ 0x30
 8003858:	18e1      	adds	r1, r4, r3
 800385a:	3143      	adds	r1, #67	@ 0x43
 800385c:	7008      	strb	r0, [r1, #0]
 800385e:	0021      	movs	r1, r4
 8003860:	1c5a      	adds	r2, r3, #1
 8003862:	3145      	adds	r1, #69	@ 0x45
 8003864:	7809      	ldrb	r1, [r1, #0]
 8003866:	18a2      	adds	r2, r4, r2
 8003868:	3243      	adds	r2, #67	@ 0x43
 800386a:	3302      	adds	r3, #2
 800386c:	7011      	strb	r1, [r2, #0]
 800386e:	e7c1      	b.n	80037f4 <_printf_common+0x4c>
 8003870:	0022      	movs	r2, r4
 8003872:	2301      	movs	r3, #1
 8003874:	9901      	ldr	r1, [sp, #4]
 8003876:	9800      	ldr	r0, [sp, #0]
 8003878:	9f08      	ldr	r7, [sp, #32]
 800387a:	321a      	adds	r2, #26
 800387c:	47b8      	blx	r7
 800387e:	3001      	adds	r0, #1
 8003880:	d0e6      	beq.n	8003850 <_printf_common+0xa8>
 8003882:	3601      	adds	r6, #1
 8003884:	e7d1      	b.n	800382a <_printf_common+0x82>
	...

08003888 <_printf_i>:
 8003888:	b5f0      	push	{r4, r5, r6, r7, lr}
 800388a:	b08b      	sub	sp, #44	@ 0x2c
 800388c:	9206      	str	r2, [sp, #24]
 800388e:	000a      	movs	r2, r1
 8003890:	3243      	adds	r2, #67	@ 0x43
 8003892:	9307      	str	r3, [sp, #28]
 8003894:	9005      	str	r0, [sp, #20]
 8003896:	9203      	str	r2, [sp, #12]
 8003898:	7e0a      	ldrb	r2, [r1, #24]
 800389a:	000c      	movs	r4, r1
 800389c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800389e:	2a78      	cmp	r2, #120	@ 0x78
 80038a0:	d809      	bhi.n	80038b6 <_printf_i+0x2e>
 80038a2:	2a62      	cmp	r2, #98	@ 0x62
 80038a4:	d80b      	bhi.n	80038be <_printf_i+0x36>
 80038a6:	2a00      	cmp	r2, #0
 80038a8:	d100      	bne.n	80038ac <_printf_i+0x24>
 80038aa:	e0bc      	b.n	8003a26 <_printf_i+0x19e>
 80038ac:	497b      	ldr	r1, [pc, #492]	@ (8003a9c <_printf_i+0x214>)
 80038ae:	9104      	str	r1, [sp, #16]
 80038b0:	2a58      	cmp	r2, #88	@ 0x58
 80038b2:	d100      	bne.n	80038b6 <_printf_i+0x2e>
 80038b4:	e090      	b.n	80039d8 <_printf_i+0x150>
 80038b6:	0025      	movs	r5, r4
 80038b8:	3542      	adds	r5, #66	@ 0x42
 80038ba:	702a      	strb	r2, [r5, #0]
 80038bc:	e022      	b.n	8003904 <_printf_i+0x7c>
 80038be:	0010      	movs	r0, r2
 80038c0:	3863      	subs	r0, #99	@ 0x63
 80038c2:	2815      	cmp	r0, #21
 80038c4:	d8f7      	bhi.n	80038b6 <_printf_i+0x2e>
 80038c6:	f7fc fc27 	bl	8000118 <__gnu_thumb1_case_shi>
 80038ca:	0016      	.short	0x0016
 80038cc:	fff6001f 	.word	0xfff6001f
 80038d0:	fff6fff6 	.word	0xfff6fff6
 80038d4:	001ffff6 	.word	0x001ffff6
 80038d8:	fff6fff6 	.word	0xfff6fff6
 80038dc:	fff6fff6 	.word	0xfff6fff6
 80038e0:	003600a1 	.word	0x003600a1
 80038e4:	fff60080 	.word	0xfff60080
 80038e8:	00b2fff6 	.word	0x00b2fff6
 80038ec:	0036fff6 	.word	0x0036fff6
 80038f0:	fff6fff6 	.word	0xfff6fff6
 80038f4:	0084      	.short	0x0084
 80038f6:	0025      	movs	r5, r4
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	3542      	adds	r5, #66	@ 0x42
 80038fc:	1d11      	adds	r1, r2, #4
 80038fe:	6019      	str	r1, [r3, #0]
 8003900:	6813      	ldr	r3, [r2, #0]
 8003902:	702b      	strb	r3, [r5, #0]
 8003904:	2301      	movs	r3, #1
 8003906:	e0a0      	b.n	8003a4a <_printf_i+0x1c2>
 8003908:	6818      	ldr	r0, [r3, #0]
 800390a:	6809      	ldr	r1, [r1, #0]
 800390c:	1d02      	adds	r2, r0, #4
 800390e:	060d      	lsls	r5, r1, #24
 8003910:	d50b      	bpl.n	800392a <_printf_i+0xa2>
 8003912:	6806      	ldr	r6, [r0, #0]
 8003914:	601a      	str	r2, [r3, #0]
 8003916:	2e00      	cmp	r6, #0
 8003918:	da03      	bge.n	8003922 <_printf_i+0x9a>
 800391a:	232d      	movs	r3, #45	@ 0x2d
 800391c:	9a03      	ldr	r2, [sp, #12]
 800391e:	4276      	negs	r6, r6
 8003920:	7013      	strb	r3, [r2, #0]
 8003922:	4b5e      	ldr	r3, [pc, #376]	@ (8003a9c <_printf_i+0x214>)
 8003924:	270a      	movs	r7, #10
 8003926:	9304      	str	r3, [sp, #16]
 8003928:	e018      	b.n	800395c <_printf_i+0xd4>
 800392a:	6806      	ldr	r6, [r0, #0]
 800392c:	601a      	str	r2, [r3, #0]
 800392e:	0649      	lsls	r1, r1, #25
 8003930:	d5f1      	bpl.n	8003916 <_printf_i+0x8e>
 8003932:	b236      	sxth	r6, r6
 8003934:	e7ef      	b.n	8003916 <_printf_i+0x8e>
 8003936:	6808      	ldr	r0, [r1, #0]
 8003938:	6819      	ldr	r1, [r3, #0]
 800393a:	c940      	ldmia	r1!, {r6}
 800393c:	0605      	lsls	r5, r0, #24
 800393e:	d402      	bmi.n	8003946 <_printf_i+0xbe>
 8003940:	0640      	lsls	r0, r0, #25
 8003942:	d500      	bpl.n	8003946 <_printf_i+0xbe>
 8003944:	b2b6      	uxth	r6, r6
 8003946:	6019      	str	r1, [r3, #0]
 8003948:	4b54      	ldr	r3, [pc, #336]	@ (8003a9c <_printf_i+0x214>)
 800394a:	270a      	movs	r7, #10
 800394c:	9304      	str	r3, [sp, #16]
 800394e:	2a6f      	cmp	r2, #111	@ 0x6f
 8003950:	d100      	bne.n	8003954 <_printf_i+0xcc>
 8003952:	3f02      	subs	r7, #2
 8003954:	0023      	movs	r3, r4
 8003956:	2200      	movs	r2, #0
 8003958:	3343      	adds	r3, #67	@ 0x43
 800395a:	701a      	strb	r2, [r3, #0]
 800395c:	6863      	ldr	r3, [r4, #4]
 800395e:	60a3      	str	r3, [r4, #8]
 8003960:	2b00      	cmp	r3, #0
 8003962:	db03      	blt.n	800396c <_printf_i+0xe4>
 8003964:	2104      	movs	r1, #4
 8003966:	6822      	ldr	r2, [r4, #0]
 8003968:	438a      	bics	r2, r1
 800396a:	6022      	str	r2, [r4, #0]
 800396c:	2e00      	cmp	r6, #0
 800396e:	d102      	bne.n	8003976 <_printf_i+0xee>
 8003970:	9d03      	ldr	r5, [sp, #12]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00c      	beq.n	8003990 <_printf_i+0x108>
 8003976:	9d03      	ldr	r5, [sp, #12]
 8003978:	0030      	movs	r0, r6
 800397a:	0039      	movs	r1, r7
 800397c:	f7fc fc5c 	bl	8000238 <__aeabi_uidivmod>
 8003980:	9b04      	ldr	r3, [sp, #16]
 8003982:	3d01      	subs	r5, #1
 8003984:	5c5b      	ldrb	r3, [r3, r1]
 8003986:	702b      	strb	r3, [r5, #0]
 8003988:	0033      	movs	r3, r6
 800398a:	0006      	movs	r6, r0
 800398c:	429f      	cmp	r7, r3
 800398e:	d9f3      	bls.n	8003978 <_printf_i+0xf0>
 8003990:	2f08      	cmp	r7, #8
 8003992:	d109      	bne.n	80039a8 <_printf_i+0x120>
 8003994:	6823      	ldr	r3, [r4, #0]
 8003996:	07db      	lsls	r3, r3, #31
 8003998:	d506      	bpl.n	80039a8 <_printf_i+0x120>
 800399a:	6862      	ldr	r2, [r4, #4]
 800399c:	6923      	ldr	r3, [r4, #16]
 800399e:	429a      	cmp	r2, r3
 80039a0:	dc02      	bgt.n	80039a8 <_printf_i+0x120>
 80039a2:	2330      	movs	r3, #48	@ 0x30
 80039a4:	3d01      	subs	r5, #1
 80039a6:	702b      	strb	r3, [r5, #0]
 80039a8:	9b03      	ldr	r3, [sp, #12]
 80039aa:	1b5b      	subs	r3, r3, r5
 80039ac:	6123      	str	r3, [r4, #16]
 80039ae:	9b07      	ldr	r3, [sp, #28]
 80039b0:	0021      	movs	r1, r4
 80039b2:	9300      	str	r3, [sp, #0]
 80039b4:	9805      	ldr	r0, [sp, #20]
 80039b6:	9b06      	ldr	r3, [sp, #24]
 80039b8:	aa09      	add	r2, sp, #36	@ 0x24
 80039ba:	f7ff fef5 	bl	80037a8 <_printf_common>
 80039be:	3001      	adds	r0, #1
 80039c0:	d148      	bne.n	8003a54 <_printf_i+0x1cc>
 80039c2:	2001      	movs	r0, #1
 80039c4:	4240      	negs	r0, r0
 80039c6:	b00b      	add	sp, #44	@ 0x2c
 80039c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039ca:	2220      	movs	r2, #32
 80039cc:	6809      	ldr	r1, [r1, #0]
 80039ce:	430a      	orrs	r2, r1
 80039d0:	6022      	str	r2, [r4, #0]
 80039d2:	2278      	movs	r2, #120	@ 0x78
 80039d4:	4932      	ldr	r1, [pc, #200]	@ (8003aa0 <_printf_i+0x218>)
 80039d6:	9104      	str	r1, [sp, #16]
 80039d8:	0021      	movs	r1, r4
 80039da:	3145      	adds	r1, #69	@ 0x45
 80039dc:	700a      	strb	r2, [r1, #0]
 80039de:	6819      	ldr	r1, [r3, #0]
 80039e0:	6822      	ldr	r2, [r4, #0]
 80039e2:	c940      	ldmia	r1!, {r6}
 80039e4:	0610      	lsls	r0, r2, #24
 80039e6:	d402      	bmi.n	80039ee <_printf_i+0x166>
 80039e8:	0650      	lsls	r0, r2, #25
 80039ea:	d500      	bpl.n	80039ee <_printf_i+0x166>
 80039ec:	b2b6      	uxth	r6, r6
 80039ee:	6019      	str	r1, [r3, #0]
 80039f0:	07d3      	lsls	r3, r2, #31
 80039f2:	d502      	bpl.n	80039fa <_printf_i+0x172>
 80039f4:	2320      	movs	r3, #32
 80039f6:	4313      	orrs	r3, r2
 80039f8:	6023      	str	r3, [r4, #0]
 80039fa:	2e00      	cmp	r6, #0
 80039fc:	d001      	beq.n	8003a02 <_printf_i+0x17a>
 80039fe:	2710      	movs	r7, #16
 8003a00:	e7a8      	b.n	8003954 <_printf_i+0xcc>
 8003a02:	2220      	movs	r2, #32
 8003a04:	6823      	ldr	r3, [r4, #0]
 8003a06:	4393      	bics	r3, r2
 8003a08:	6023      	str	r3, [r4, #0]
 8003a0a:	e7f8      	b.n	80039fe <_printf_i+0x176>
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	680d      	ldr	r5, [r1, #0]
 8003a10:	1d10      	adds	r0, r2, #4
 8003a12:	6949      	ldr	r1, [r1, #20]
 8003a14:	6018      	str	r0, [r3, #0]
 8003a16:	6813      	ldr	r3, [r2, #0]
 8003a18:	062e      	lsls	r6, r5, #24
 8003a1a:	d501      	bpl.n	8003a20 <_printf_i+0x198>
 8003a1c:	6019      	str	r1, [r3, #0]
 8003a1e:	e002      	b.n	8003a26 <_printf_i+0x19e>
 8003a20:	066d      	lsls	r5, r5, #25
 8003a22:	d5fb      	bpl.n	8003a1c <_printf_i+0x194>
 8003a24:	8019      	strh	r1, [r3, #0]
 8003a26:	2300      	movs	r3, #0
 8003a28:	9d03      	ldr	r5, [sp, #12]
 8003a2a:	6123      	str	r3, [r4, #16]
 8003a2c:	e7bf      	b.n	80039ae <_printf_i+0x126>
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	1d11      	adds	r1, r2, #4
 8003a32:	6019      	str	r1, [r3, #0]
 8003a34:	6815      	ldr	r5, [r2, #0]
 8003a36:	2100      	movs	r1, #0
 8003a38:	0028      	movs	r0, r5
 8003a3a:	6862      	ldr	r2, [r4, #4]
 8003a3c:	f000 f974 	bl	8003d28 <memchr>
 8003a40:	2800      	cmp	r0, #0
 8003a42:	d001      	beq.n	8003a48 <_printf_i+0x1c0>
 8003a44:	1b40      	subs	r0, r0, r5
 8003a46:	6060      	str	r0, [r4, #4]
 8003a48:	6863      	ldr	r3, [r4, #4]
 8003a4a:	6123      	str	r3, [r4, #16]
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	9a03      	ldr	r2, [sp, #12]
 8003a50:	7013      	strb	r3, [r2, #0]
 8003a52:	e7ac      	b.n	80039ae <_printf_i+0x126>
 8003a54:	002a      	movs	r2, r5
 8003a56:	6923      	ldr	r3, [r4, #16]
 8003a58:	9906      	ldr	r1, [sp, #24]
 8003a5a:	9805      	ldr	r0, [sp, #20]
 8003a5c:	9d07      	ldr	r5, [sp, #28]
 8003a5e:	47a8      	blx	r5
 8003a60:	3001      	adds	r0, #1
 8003a62:	d0ae      	beq.n	80039c2 <_printf_i+0x13a>
 8003a64:	6823      	ldr	r3, [r4, #0]
 8003a66:	079b      	lsls	r3, r3, #30
 8003a68:	d415      	bmi.n	8003a96 <_printf_i+0x20e>
 8003a6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003a6c:	68e0      	ldr	r0, [r4, #12]
 8003a6e:	4298      	cmp	r0, r3
 8003a70:	daa9      	bge.n	80039c6 <_printf_i+0x13e>
 8003a72:	0018      	movs	r0, r3
 8003a74:	e7a7      	b.n	80039c6 <_printf_i+0x13e>
 8003a76:	0022      	movs	r2, r4
 8003a78:	2301      	movs	r3, #1
 8003a7a:	9906      	ldr	r1, [sp, #24]
 8003a7c:	9805      	ldr	r0, [sp, #20]
 8003a7e:	9e07      	ldr	r6, [sp, #28]
 8003a80:	3219      	adds	r2, #25
 8003a82:	47b0      	blx	r6
 8003a84:	3001      	adds	r0, #1
 8003a86:	d09c      	beq.n	80039c2 <_printf_i+0x13a>
 8003a88:	3501      	adds	r5, #1
 8003a8a:	68e3      	ldr	r3, [r4, #12]
 8003a8c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003a8e:	1a9b      	subs	r3, r3, r2
 8003a90:	42ab      	cmp	r3, r5
 8003a92:	dcf0      	bgt.n	8003a76 <_printf_i+0x1ee>
 8003a94:	e7e9      	b.n	8003a6a <_printf_i+0x1e2>
 8003a96:	2500      	movs	r5, #0
 8003a98:	e7f7      	b.n	8003a8a <_printf_i+0x202>
 8003a9a:	46c0      	nop			@ (mov r8, r8)
 8003a9c:	08004959 	.word	0x08004959
 8003aa0:	0800496a 	.word	0x0800496a

08003aa4 <__sflush_r>:
 8003aa4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003aa6:	220c      	movs	r2, #12
 8003aa8:	5e8b      	ldrsh	r3, [r1, r2]
 8003aaa:	0005      	movs	r5, r0
 8003aac:	000c      	movs	r4, r1
 8003aae:	071a      	lsls	r2, r3, #28
 8003ab0:	d456      	bmi.n	8003b60 <__sflush_r+0xbc>
 8003ab2:	684a      	ldr	r2, [r1, #4]
 8003ab4:	2a00      	cmp	r2, #0
 8003ab6:	dc02      	bgt.n	8003abe <__sflush_r+0x1a>
 8003ab8:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8003aba:	2a00      	cmp	r2, #0
 8003abc:	dd4e      	ble.n	8003b5c <__sflush_r+0xb8>
 8003abe:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8003ac0:	2f00      	cmp	r7, #0
 8003ac2:	d04b      	beq.n	8003b5c <__sflush_r+0xb8>
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	2080      	movs	r0, #128	@ 0x80
 8003ac8:	682e      	ldr	r6, [r5, #0]
 8003aca:	602a      	str	r2, [r5, #0]
 8003acc:	001a      	movs	r2, r3
 8003ace:	0140      	lsls	r0, r0, #5
 8003ad0:	6a21      	ldr	r1, [r4, #32]
 8003ad2:	4002      	ands	r2, r0
 8003ad4:	4203      	tst	r3, r0
 8003ad6:	d033      	beq.n	8003b40 <__sflush_r+0x9c>
 8003ad8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003ada:	89a3      	ldrh	r3, [r4, #12]
 8003adc:	075b      	lsls	r3, r3, #29
 8003ade:	d506      	bpl.n	8003aee <__sflush_r+0x4a>
 8003ae0:	6863      	ldr	r3, [r4, #4]
 8003ae2:	1ad2      	subs	r2, r2, r3
 8003ae4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d001      	beq.n	8003aee <__sflush_r+0x4a>
 8003aea:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003aec:	1ad2      	subs	r2, r2, r3
 8003aee:	2300      	movs	r3, #0
 8003af0:	0028      	movs	r0, r5
 8003af2:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8003af4:	6a21      	ldr	r1, [r4, #32]
 8003af6:	47b8      	blx	r7
 8003af8:	89a2      	ldrh	r2, [r4, #12]
 8003afa:	1c43      	adds	r3, r0, #1
 8003afc:	d106      	bne.n	8003b0c <__sflush_r+0x68>
 8003afe:	6829      	ldr	r1, [r5, #0]
 8003b00:	291d      	cmp	r1, #29
 8003b02:	d846      	bhi.n	8003b92 <__sflush_r+0xee>
 8003b04:	4b29      	ldr	r3, [pc, #164]	@ (8003bac <__sflush_r+0x108>)
 8003b06:	410b      	asrs	r3, r1
 8003b08:	07db      	lsls	r3, r3, #31
 8003b0a:	d442      	bmi.n	8003b92 <__sflush_r+0xee>
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	6063      	str	r3, [r4, #4]
 8003b10:	6923      	ldr	r3, [r4, #16]
 8003b12:	6023      	str	r3, [r4, #0]
 8003b14:	04d2      	lsls	r2, r2, #19
 8003b16:	d505      	bpl.n	8003b24 <__sflush_r+0x80>
 8003b18:	1c43      	adds	r3, r0, #1
 8003b1a:	d102      	bne.n	8003b22 <__sflush_r+0x7e>
 8003b1c:	682b      	ldr	r3, [r5, #0]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d100      	bne.n	8003b24 <__sflush_r+0x80>
 8003b22:	6560      	str	r0, [r4, #84]	@ 0x54
 8003b24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003b26:	602e      	str	r6, [r5, #0]
 8003b28:	2900      	cmp	r1, #0
 8003b2a:	d017      	beq.n	8003b5c <__sflush_r+0xb8>
 8003b2c:	0023      	movs	r3, r4
 8003b2e:	3344      	adds	r3, #68	@ 0x44
 8003b30:	4299      	cmp	r1, r3
 8003b32:	d002      	beq.n	8003b3a <__sflush_r+0x96>
 8003b34:	0028      	movs	r0, r5
 8003b36:	f7ff fb4b 	bl	80031d0 <_free_r>
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	6363      	str	r3, [r4, #52]	@ 0x34
 8003b3e:	e00d      	b.n	8003b5c <__sflush_r+0xb8>
 8003b40:	2301      	movs	r3, #1
 8003b42:	0028      	movs	r0, r5
 8003b44:	47b8      	blx	r7
 8003b46:	0002      	movs	r2, r0
 8003b48:	1c43      	adds	r3, r0, #1
 8003b4a:	d1c6      	bne.n	8003ada <__sflush_r+0x36>
 8003b4c:	682b      	ldr	r3, [r5, #0]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d0c3      	beq.n	8003ada <__sflush_r+0x36>
 8003b52:	2b1d      	cmp	r3, #29
 8003b54:	d001      	beq.n	8003b5a <__sflush_r+0xb6>
 8003b56:	2b16      	cmp	r3, #22
 8003b58:	d11a      	bne.n	8003b90 <__sflush_r+0xec>
 8003b5a:	602e      	str	r6, [r5, #0]
 8003b5c:	2000      	movs	r0, #0
 8003b5e:	e01e      	b.n	8003b9e <__sflush_r+0xfa>
 8003b60:	690e      	ldr	r6, [r1, #16]
 8003b62:	2e00      	cmp	r6, #0
 8003b64:	d0fa      	beq.n	8003b5c <__sflush_r+0xb8>
 8003b66:	680f      	ldr	r7, [r1, #0]
 8003b68:	600e      	str	r6, [r1, #0]
 8003b6a:	1bba      	subs	r2, r7, r6
 8003b6c:	9201      	str	r2, [sp, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	079b      	lsls	r3, r3, #30
 8003b72:	d100      	bne.n	8003b76 <__sflush_r+0xd2>
 8003b74:	694a      	ldr	r2, [r1, #20]
 8003b76:	60a2      	str	r2, [r4, #8]
 8003b78:	9b01      	ldr	r3, [sp, #4]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	ddee      	ble.n	8003b5c <__sflush_r+0xb8>
 8003b7e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003b80:	0032      	movs	r2, r6
 8003b82:	001f      	movs	r7, r3
 8003b84:	0028      	movs	r0, r5
 8003b86:	9b01      	ldr	r3, [sp, #4]
 8003b88:	6a21      	ldr	r1, [r4, #32]
 8003b8a:	47b8      	blx	r7
 8003b8c:	2800      	cmp	r0, #0
 8003b8e:	dc07      	bgt.n	8003ba0 <__sflush_r+0xfc>
 8003b90:	89a2      	ldrh	r2, [r4, #12]
 8003b92:	2340      	movs	r3, #64	@ 0x40
 8003b94:	2001      	movs	r0, #1
 8003b96:	4313      	orrs	r3, r2
 8003b98:	b21b      	sxth	r3, r3
 8003b9a:	81a3      	strh	r3, [r4, #12]
 8003b9c:	4240      	negs	r0, r0
 8003b9e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003ba0:	9b01      	ldr	r3, [sp, #4]
 8003ba2:	1836      	adds	r6, r6, r0
 8003ba4:	1a1b      	subs	r3, r3, r0
 8003ba6:	9301      	str	r3, [sp, #4]
 8003ba8:	e7e6      	b.n	8003b78 <__sflush_r+0xd4>
 8003baa:	46c0      	nop			@ (mov r8, r8)
 8003bac:	dfbffffe 	.word	0xdfbffffe

08003bb0 <_fflush_r>:
 8003bb0:	690b      	ldr	r3, [r1, #16]
 8003bb2:	b570      	push	{r4, r5, r6, lr}
 8003bb4:	0005      	movs	r5, r0
 8003bb6:	000c      	movs	r4, r1
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d102      	bne.n	8003bc2 <_fflush_r+0x12>
 8003bbc:	2500      	movs	r5, #0
 8003bbe:	0028      	movs	r0, r5
 8003bc0:	bd70      	pop	{r4, r5, r6, pc}
 8003bc2:	2800      	cmp	r0, #0
 8003bc4:	d004      	beq.n	8003bd0 <_fflush_r+0x20>
 8003bc6:	6a03      	ldr	r3, [r0, #32]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d101      	bne.n	8003bd0 <_fflush_r+0x20>
 8003bcc:	f7fe ffd4 	bl	8002b78 <__sinit>
 8003bd0:	220c      	movs	r2, #12
 8003bd2:	5ea3      	ldrsh	r3, [r4, r2]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d0f1      	beq.n	8003bbc <_fflush_r+0xc>
 8003bd8:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003bda:	07d2      	lsls	r2, r2, #31
 8003bdc:	d404      	bmi.n	8003be8 <_fflush_r+0x38>
 8003bde:	059b      	lsls	r3, r3, #22
 8003be0:	d402      	bmi.n	8003be8 <_fflush_r+0x38>
 8003be2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003be4:	f7ff fae9 	bl	80031ba <__retarget_lock_acquire_recursive>
 8003be8:	0028      	movs	r0, r5
 8003bea:	0021      	movs	r1, r4
 8003bec:	f7ff ff5a 	bl	8003aa4 <__sflush_r>
 8003bf0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003bf2:	0005      	movs	r5, r0
 8003bf4:	07db      	lsls	r3, r3, #31
 8003bf6:	d4e2      	bmi.n	8003bbe <_fflush_r+0xe>
 8003bf8:	89a3      	ldrh	r3, [r4, #12]
 8003bfa:	059b      	lsls	r3, r3, #22
 8003bfc:	d4df      	bmi.n	8003bbe <_fflush_r+0xe>
 8003bfe:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003c00:	f7ff fadc 	bl	80031bc <__retarget_lock_release_recursive>
 8003c04:	e7db      	b.n	8003bbe <_fflush_r+0xe>
	...

08003c08 <__swhatbuf_r>:
 8003c08:	b570      	push	{r4, r5, r6, lr}
 8003c0a:	000e      	movs	r6, r1
 8003c0c:	001d      	movs	r5, r3
 8003c0e:	230e      	movs	r3, #14
 8003c10:	5ec9      	ldrsh	r1, [r1, r3]
 8003c12:	0014      	movs	r4, r2
 8003c14:	b096      	sub	sp, #88	@ 0x58
 8003c16:	2900      	cmp	r1, #0
 8003c18:	da0c      	bge.n	8003c34 <__swhatbuf_r+0x2c>
 8003c1a:	89b2      	ldrh	r2, [r6, #12]
 8003c1c:	2380      	movs	r3, #128	@ 0x80
 8003c1e:	0011      	movs	r1, r2
 8003c20:	4019      	ands	r1, r3
 8003c22:	421a      	tst	r2, r3
 8003c24:	d114      	bne.n	8003c50 <__swhatbuf_r+0x48>
 8003c26:	2380      	movs	r3, #128	@ 0x80
 8003c28:	00db      	lsls	r3, r3, #3
 8003c2a:	2000      	movs	r0, #0
 8003c2c:	6029      	str	r1, [r5, #0]
 8003c2e:	6023      	str	r3, [r4, #0]
 8003c30:	b016      	add	sp, #88	@ 0x58
 8003c32:	bd70      	pop	{r4, r5, r6, pc}
 8003c34:	466a      	mov	r2, sp
 8003c36:	f000 f853 	bl	8003ce0 <_fstat_r>
 8003c3a:	2800      	cmp	r0, #0
 8003c3c:	dbed      	blt.n	8003c1a <__swhatbuf_r+0x12>
 8003c3e:	23f0      	movs	r3, #240	@ 0xf0
 8003c40:	9901      	ldr	r1, [sp, #4]
 8003c42:	021b      	lsls	r3, r3, #8
 8003c44:	4019      	ands	r1, r3
 8003c46:	4b04      	ldr	r3, [pc, #16]	@ (8003c58 <__swhatbuf_r+0x50>)
 8003c48:	18c9      	adds	r1, r1, r3
 8003c4a:	424b      	negs	r3, r1
 8003c4c:	4159      	adcs	r1, r3
 8003c4e:	e7ea      	b.n	8003c26 <__swhatbuf_r+0x1e>
 8003c50:	2100      	movs	r1, #0
 8003c52:	2340      	movs	r3, #64	@ 0x40
 8003c54:	e7e9      	b.n	8003c2a <__swhatbuf_r+0x22>
 8003c56:	46c0      	nop			@ (mov r8, r8)
 8003c58:	ffffe000 	.word	0xffffe000

08003c5c <__smakebuf_r>:
 8003c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c5e:	2602      	movs	r6, #2
 8003c60:	898b      	ldrh	r3, [r1, #12]
 8003c62:	0005      	movs	r5, r0
 8003c64:	000c      	movs	r4, r1
 8003c66:	b085      	sub	sp, #20
 8003c68:	4233      	tst	r3, r6
 8003c6a:	d007      	beq.n	8003c7c <__smakebuf_r+0x20>
 8003c6c:	0023      	movs	r3, r4
 8003c6e:	3347      	adds	r3, #71	@ 0x47
 8003c70:	6023      	str	r3, [r4, #0]
 8003c72:	6123      	str	r3, [r4, #16]
 8003c74:	2301      	movs	r3, #1
 8003c76:	6163      	str	r3, [r4, #20]
 8003c78:	b005      	add	sp, #20
 8003c7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c7c:	ab03      	add	r3, sp, #12
 8003c7e:	aa02      	add	r2, sp, #8
 8003c80:	f7ff ffc2 	bl	8003c08 <__swhatbuf_r>
 8003c84:	9f02      	ldr	r7, [sp, #8]
 8003c86:	9001      	str	r0, [sp, #4]
 8003c88:	0039      	movs	r1, r7
 8003c8a:	0028      	movs	r0, r5
 8003c8c:	f7fe fe54 	bl	8002938 <_malloc_r>
 8003c90:	2800      	cmp	r0, #0
 8003c92:	d108      	bne.n	8003ca6 <__smakebuf_r+0x4a>
 8003c94:	220c      	movs	r2, #12
 8003c96:	5ea3      	ldrsh	r3, [r4, r2]
 8003c98:	059a      	lsls	r2, r3, #22
 8003c9a:	d4ed      	bmi.n	8003c78 <__smakebuf_r+0x1c>
 8003c9c:	2203      	movs	r2, #3
 8003c9e:	4393      	bics	r3, r2
 8003ca0:	431e      	orrs	r6, r3
 8003ca2:	81a6      	strh	r6, [r4, #12]
 8003ca4:	e7e2      	b.n	8003c6c <__smakebuf_r+0x10>
 8003ca6:	2380      	movs	r3, #128	@ 0x80
 8003ca8:	89a2      	ldrh	r2, [r4, #12]
 8003caa:	6020      	str	r0, [r4, #0]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	81a3      	strh	r3, [r4, #12]
 8003cb0:	9b03      	ldr	r3, [sp, #12]
 8003cb2:	6120      	str	r0, [r4, #16]
 8003cb4:	6167      	str	r7, [r4, #20]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d00c      	beq.n	8003cd4 <__smakebuf_r+0x78>
 8003cba:	0028      	movs	r0, r5
 8003cbc:	230e      	movs	r3, #14
 8003cbe:	5ee1      	ldrsh	r1, [r4, r3]
 8003cc0:	f000 f820 	bl	8003d04 <_isatty_r>
 8003cc4:	2800      	cmp	r0, #0
 8003cc6:	d005      	beq.n	8003cd4 <__smakebuf_r+0x78>
 8003cc8:	2303      	movs	r3, #3
 8003cca:	89a2      	ldrh	r2, [r4, #12]
 8003ccc:	439a      	bics	r2, r3
 8003cce:	3b02      	subs	r3, #2
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	81a3      	strh	r3, [r4, #12]
 8003cd4:	89a3      	ldrh	r3, [r4, #12]
 8003cd6:	9a01      	ldr	r2, [sp, #4]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	81a3      	strh	r3, [r4, #12]
 8003cdc:	e7cc      	b.n	8003c78 <__smakebuf_r+0x1c>
	...

08003ce0 <_fstat_r>:
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	b570      	push	{r4, r5, r6, lr}
 8003ce4:	4d06      	ldr	r5, [pc, #24]	@ (8003d00 <_fstat_r+0x20>)
 8003ce6:	0004      	movs	r4, r0
 8003ce8:	0008      	movs	r0, r1
 8003cea:	0011      	movs	r1, r2
 8003cec:	602b      	str	r3, [r5, #0]
 8003cee:	f7fd fc52 	bl	8001596 <_fstat>
 8003cf2:	1c43      	adds	r3, r0, #1
 8003cf4:	d103      	bne.n	8003cfe <_fstat_r+0x1e>
 8003cf6:	682b      	ldr	r3, [r5, #0]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d000      	beq.n	8003cfe <_fstat_r+0x1e>
 8003cfc:	6023      	str	r3, [r4, #0]
 8003cfe:	bd70      	pop	{r4, r5, r6, pc}
 8003d00:	200008dc 	.word	0x200008dc

08003d04 <_isatty_r>:
 8003d04:	2300      	movs	r3, #0
 8003d06:	b570      	push	{r4, r5, r6, lr}
 8003d08:	4d06      	ldr	r5, [pc, #24]	@ (8003d24 <_isatty_r+0x20>)
 8003d0a:	0004      	movs	r4, r0
 8003d0c:	0008      	movs	r0, r1
 8003d0e:	602b      	str	r3, [r5, #0]
 8003d10:	f7fd fc4f 	bl	80015b2 <_isatty>
 8003d14:	1c43      	adds	r3, r0, #1
 8003d16:	d103      	bne.n	8003d20 <_isatty_r+0x1c>
 8003d18:	682b      	ldr	r3, [r5, #0]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d000      	beq.n	8003d20 <_isatty_r+0x1c>
 8003d1e:	6023      	str	r3, [r4, #0]
 8003d20:	bd70      	pop	{r4, r5, r6, pc}
 8003d22:	46c0      	nop			@ (mov r8, r8)
 8003d24:	200008dc 	.word	0x200008dc

08003d28 <memchr>:
 8003d28:	b2c9      	uxtb	r1, r1
 8003d2a:	1882      	adds	r2, r0, r2
 8003d2c:	4290      	cmp	r0, r2
 8003d2e:	d101      	bne.n	8003d34 <memchr+0xc>
 8003d30:	2000      	movs	r0, #0
 8003d32:	4770      	bx	lr
 8003d34:	7803      	ldrb	r3, [r0, #0]
 8003d36:	428b      	cmp	r3, r1
 8003d38:	d0fb      	beq.n	8003d32 <memchr+0xa>
 8003d3a:	3001      	adds	r0, #1
 8003d3c:	e7f6      	b.n	8003d2c <memchr+0x4>

08003d3e <_realloc_r>:
 8003d3e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d40:	0006      	movs	r6, r0
 8003d42:	000c      	movs	r4, r1
 8003d44:	0015      	movs	r5, r2
 8003d46:	2900      	cmp	r1, #0
 8003d48:	d105      	bne.n	8003d56 <_realloc_r+0x18>
 8003d4a:	0011      	movs	r1, r2
 8003d4c:	f7fe fdf4 	bl	8002938 <_malloc_r>
 8003d50:	0004      	movs	r4, r0
 8003d52:	0020      	movs	r0, r4
 8003d54:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003d56:	2a00      	cmp	r2, #0
 8003d58:	d103      	bne.n	8003d62 <_realloc_r+0x24>
 8003d5a:	f7ff fa39 	bl	80031d0 <_free_r>
 8003d5e:	2400      	movs	r4, #0
 8003d60:	e7f7      	b.n	8003d52 <_realloc_r+0x14>
 8003d62:	f000 f81b 	bl	8003d9c <_malloc_usable_size_r>
 8003d66:	0007      	movs	r7, r0
 8003d68:	4285      	cmp	r5, r0
 8003d6a:	d802      	bhi.n	8003d72 <_realloc_r+0x34>
 8003d6c:	0843      	lsrs	r3, r0, #1
 8003d6e:	42ab      	cmp	r3, r5
 8003d70:	d3ef      	bcc.n	8003d52 <_realloc_r+0x14>
 8003d72:	0029      	movs	r1, r5
 8003d74:	0030      	movs	r0, r6
 8003d76:	f7fe fddf 	bl	8002938 <_malloc_r>
 8003d7a:	9001      	str	r0, [sp, #4]
 8003d7c:	2800      	cmp	r0, #0
 8003d7e:	d0ee      	beq.n	8003d5e <_realloc_r+0x20>
 8003d80:	002a      	movs	r2, r5
 8003d82:	42bd      	cmp	r5, r7
 8003d84:	d900      	bls.n	8003d88 <_realloc_r+0x4a>
 8003d86:	003a      	movs	r2, r7
 8003d88:	0021      	movs	r1, r4
 8003d8a:	9801      	ldr	r0, [sp, #4]
 8003d8c:	f7ff fa17 	bl	80031be <memcpy>
 8003d90:	0021      	movs	r1, r4
 8003d92:	0030      	movs	r0, r6
 8003d94:	f7ff fa1c 	bl	80031d0 <_free_r>
 8003d98:	9c01      	ldr	r4, [sp, #4]
 8003d9a:	e7da      	b.n	8003d52 <_realloc_r+0x14>

08003d9c <_malloc_usable_size_r>:
 8003d9c:	1f0b      	subs	r3, r1, #4
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	1f18      	subs	r0, r3, #4
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	da01      	bge.n	8003daa <_malloc_usable_size_r+0xe>
 8003da6:	580b      	ldr	r3, [r1, r0]
 8003da8:	18c0      	adds	r0, r0, r3
 8003daa:	4770      	bx	lr

08003dac <_init>:
 8003dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dae:	46c0      	nop			@ (mov r8, r8)
 8003db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003db2:	bc08      	pop	{r3}
 8003db4:	469e      	mov	lr, r3
 8003db6:	4770      	bx	lr

08003db8 <_fini>:
 8003db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dba:	46c0      	nop			@ (mov r8, r8)
 8003dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dbe:	bc08      	pop	{r3}
 8003dc0:	469e      	mov	lr, r3
 8003dc2:	4770      	bx	lr
